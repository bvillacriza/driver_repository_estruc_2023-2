
Driver_R_SC_2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000477c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800490c  0800490c  0001490c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049f8  080049f8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080049f8  080049f8  000149f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a00  08004a00  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a00  08004a00  00014a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a04  08004a04  00014a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004a08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000070  08004a78  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08004a78  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b3d5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a48  00000000  00000000  0002b475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  0002cec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f8  00000000  00000000  0002d870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000265e8  00000000  00000000  0002e168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b78e  00000000  00000000  00054750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8f65  00000000  00000000  0005fede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00148e43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e28  00000000  00000000  00148e94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080048f4 	.word	0x080048f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080048f4 	.word	0x080048f4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	b29a      	uxth	r2, r3
 8000584:	f04f 33ff 	mov.w	r3, #4294967295
 8000588:	68b9      	ldr	r1, [r7, #8]
 800058a:	4804      	ldr	r0, [pc, #16]	; (800059c <_write+0x28>)
 800058c:	f002 fa6a 	bl	8002a64 <HAL_UART_Transmit>
  return len;
 8000590:	687b      	ldr	r3, [r7, #4]
}
 8000592:	4618      	mov	r0, r3
 8000594:	3710      	adds	r7, #16
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	2000008c 	.word	0x2000008c

080005a0 <HAL_UART_RxCpltCallback>:
  */

// Callback cuando se completa la transferencia Rx en la UART

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	// Coloca el dato Rx en un buffer circular y configura la recepción nuevamente

	ring_buffer_put(&ring_buffer_uart_rx, rx_data);
 80005a8:	4b07      	ldr	r3, [pc, #28]	; (80005c8 <HAL_UART_RxCpltCallback+0x28>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	4619      	mov	r1, r3
 80005ae:	4807      	ldr	r0, [pc, #28]	; (80005cc <HAL_UART_RxCpltCallback+0x2c>)
 80005b0:	f000 f98d 	bl	80008ce <ring_buffer_put>

	HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 80005b4:	2201      	movs	r2, #1
 80005b6:	4904      	ldr	r1, [pc, #16]	; (80005c8 <HAL_UART_RxCpltCallback+0x28>)
 80005b8:	4805      	ldr	r0, [pc, #20]	; (80005d0 <HAL_UART_RxCpltCallback+0x30>)
 80005ba:	f002 fae7 	bl	8002b8c <HAL_UART_Receive_IT>
}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	2000012c 	.word	0x2000012c
 80005cc:	20000120 	.word	0x20000120
 80005d0:	2000008c 	.word	0x2000008c

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80005d8:	b085      	sub	sp, #20
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f000 fb8c 	bl	8000cf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f86c 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 f8ec 	bl	80007c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005e8:	f000 f8ba 	bl	8000760 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ring_buffer_init(&ring_buffer_uart_rx, rx_buffer, 16);
 80005ec:	2210      	movs	r2, #16
 80005ee:	492e      	ldr	r1, [pc, #184]	; (80006a8 <main+0xd4>)
 80005f0:	482e      	ldr	r0, [pc, #184]	; (80006ac <main+0xd8>)
 80005f2:	f000 f950 	bl	8000896 <ring_buffer_init>

  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 80005f6:	2201      	movs	r2, #1
 80005f8:	492d      	ldr	r1, [pc, #180]	; (80006b0 <main+0xdc>)
 80005fa:	482e      	ldr	r0, [pc, #184]	; (80006b4 <main+0xe0>)
 80005fc:	f002 fac6 	bl	8002b8c <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  uint16_t size = ring_buffer_size(&ring_buffer_uart_rx);
 8000600:	482a      	ldr	r0, [pc, #168]	; (80006ac <main+0xd8>)
 8000602:	f000 f9cf 	bl	80009a4 <ring_buffer_size>
 8000606:	4603      	mov	r3, r0
 8000608:	81bb      	strh	r3, [r7, #12]
	  	  if (size != 0) {
 800060a:	89bb      	ldrh	r3, [r7, #12]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d042      	beq.n	8000696 <main+0xc2>
 8000610:	466b      	mov	r3, sp
 8000612:	461e      	mov	r6, r3
	  		  uint8_t rx_message[size + 1];
 8000614:	89bb      	ldrh	r3, [r7, #12]
 8000616:	1c59      	adds	r1, r3, #1
 8000618:	1e4b      	subs	r3, r1, #1
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	460a      	mov	r2, r1
 800061e:	2300      	movs	r3, #0
 8000620:	4614      	mov	r4, r2
 8000622:	461d      	mov	r5, r3
 8000624:	f04f 0200 	mov.w	r2, #0
 8000628:	f04f 0300 	mov.w	r3, #0
 800062c:	00eb      	lsls	r3, r5, #3
 800062e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000632:	00e2      	lsls	r2, r4, #3
 8000634:	460a      	mov	r2, r1
 8000636:	2300      	movs	r3, #0
 8000638:	4690      	mov	r8, r2
 800063a:	4699      	mov	r9, r3
 800063c:	f04f 0200 	mov.w	r2, #0
 8000640:	f04f 0300 	mov.w	r3, #0
 8000644:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000648:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800064c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000650:	460b      	mov	r3, r1
 8000652:	3307      	adds	r3, #7
 8000654:	08db      	lsrs	r3, r3, #3
 8000656:	00db      	lsls	r3, r3, #3
 8000658:	ebad 0d03 	sub.w	sp, sp, r3
 800065c:	466b      	mov	r3, sp
 800065e:	3300      	adds	r3, #0
 8000660:	607b      	str	r3, [r7, #4]
	  		  for (uint16_t idx = 0; idx < size; idx++) {
 8000662:	2300      	movs	r3, #0
 8000664:	81fb      	strh	r3, [r7, #14]
 8000666:	e009      	b.n	800067c <main+0xa8>
	  			  ring_buffer_get(&ring_buffer_uart_rx, &rx_message[idx]);
 8000668:	89fb      	ldrh	r3, [r7, #14]
 800066a:	687a      	ldr	r2, [r7, #4]
 800066c:	4413      	add	r3, r2
 800066e:	4619      	mov	r1, r3
 8000670:	480e      	ldr	r0, [pc, #56]	; (80006ac <main+0xd8>)
 8000672:	f000 f967 	bl	8000944 <ring_buffer_get>
	  		  for (uint16_t idx = 0; idx < size; idx++) {
 8000676:	89fb      	ldrh	r3, [r7, #14]
 8000678:	3301      	adds	r3, #1
 800067a:	81fb      	strh	r3, [r7, #14]
 800067c:	89fa      	ldrh	r2, [r7, #14]
 800067e:	89bb      	ldrh	r3, [r7, #12]
 8000680:	429a      	cmp	r2, r3
 8000682:	d3f1      	bcc.n	8000668 <main+0x94>
	  		  }
	  		  rx_message[size] = 0;
 8000684:	89bb      	ldrh	r3, [r7, #12]
 8000686:	687a      	ldr	r2, [r7, #4]
 8000688:	2100      	movs	r1, #0
 800068a:	54d1      	strb	r1, [r2, r3]
	  		  printf("Rec: %s\r\n", rx_message);
 800068c:	6879      	ldr	r1, [r7, #4]
 800068e:	480a      	ldr	r0, [pc, #40]	; (80006b8 <main+0xe4>)
 8000690:	f003 f9a2 	bl	80039d8 <iprintf>
 8000694:	46b5      	mov	sp, r6
	  	  }
	  	  HAL_Delay(1000); // to wait one second
 8000696:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800069a:	f000 fba9 	bl	8000df0 <HAL_Delay>

	  	/*uint8_t is_empty = ring_buffer_is_empty(&ring_buffer_uart_rx); */

	  	// Check if the ring buffer is empty
	  	if (ring_buffer_is_empty(&ring_buffer_uart_rx)) {
 800069e:	4803      	ldr	r0, [pc, #12]	; (80006ac <main+0xd8>)
 80006a0:	f000 f9a8 	bl	80009f4 <ring_buffer_is_empty>
  {
 80006a4:	e7ac      	b.n	8000600 <main+0x2c>
 80006a6:	bf00      	nop
 80006a8:	20000110 	.word	0x20000110
 80006ac:	20000120 	.word	0x20000120
 80006b0:	2000012c 	.word	0x2000012c
 80006b4:	2000008c 	.word	0x2000008c
 80006b8:	0800490c 	.word	0x0800490c

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b096      	sub	sp, #88	; 0x58
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	2244      	movs	r2, #68	; 0x44
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f003 f97c 	bl	80039c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	463b      	mov	r3, r7
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
 80006dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006e2:	f000 fe5f 	bl	80013a4 <HAL_PWREx_ControlVoltageScaling>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006ec:	f000 f8ce 	bl	800088c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f0:	2302      	movs	r3, #2
 80006f2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006f8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fa:	2310      	movs	r3, #16
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fe:	2302      	movs	r3, #2
 8000700:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000702:	2302      	movs	r3, #2
 8000704:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000706:	2301      	movs	r3, #1
 8000708:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800070a:	230a      	movs	r3, #10
 800070c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800070e:	2307      	movs	r3, #7
 8000710:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000712:	2302      	movs	r3, #2
 8000714:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000716:	2302      	movs	r3, #2
 8000718:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	4618      	mov	r0, r3
 8000720:	f000 fe96 	bl	8001450 <HAL_RCC_OscConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800072a:	f000 f8af 	bl	800088c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072e:	230f      	movs	r3, #15
 8000730:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000732:	2303      	movs	r3, #3
 8000734:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000742:	463b      	mov	r3, r7
 8000744:	2104      	movs	r1, #4
 8000746:	4618      	mov	r0, r3
 8000748:	f001 fa5e 	bl	8001c08 <HAL_RCC_ClockConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000752:	f000 f89b 	bl	800088c <Error_Handler>
  }
}
 8000756:	bf00      	nop
 8000758:	3758      	adds	r7, #88	; 0x58
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000764:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <MX_USART2_UART_Init+0x58>)
 8000766:	4a15      	ldr	r2, [pc, #84]	; (80007bc <MX_USART2_UART_Init+0x5c>)
 8000768:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800076a:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <MX_USART2_UART_Init+0x58>)
 800076c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000770:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_USART2_UART_Init+0x58>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_USART2_UART_Init+0x58>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_USART2_UART_Init+0x58>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_USART2_UART_Init+0x58>)
 8000786:	220c      	movs	r2, #12
 8000788:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <MX_USART2_UART_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000790:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_USART2_UART_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <MX_USART2_UART_Init+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_USART2_UART_Init+0x58>)
 800079e:	2200      	movs	r2, #0
 80007a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007a2:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_USART2_UART_Init+0x58>)
 80007a4:	f002 f910 	bl	80029c8 <HAL_UART_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007ae:	f000 f86d 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	2000008c 	.word	0x2000008c
 80007bc:	40004400 	.word	0x40004400

080007c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08a      	sub	sp, #40	; 0x28
 80007c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
 80007d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d6:	4b2b      	ldr	r3, [pc, #172]	; (8000884 <MX_GPIO_Init+0xc4>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007da:	4a2a      	ldr	r2, [pc, #168]	; (8000884 <MX_GPIO_Init+0xc4>)
 80007dc:	f043 0304 	orr.w	r3, r3, #4
 80007e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e2:	4b28      	ldr	r3, [pc, #160]	; (8000884 <MX_GPIO_Init+0xc4>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e6:	f003 0304 	and.w	r3, r3, #4
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ee:	4b25      	ldr	r3, [pc, #148]	; (8000884 <MX_GPIO_Init+0xc4>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	4a24      	ldr	r2, [pc, #144]	; (8000884 <MX_GPIO_Init+0xc4>)
 80007f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fa:	4b22      	ldr	r3, [pc, #136]	; (8000884 <MX_GPIO_Init+0xc4>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <MX_GPIO_Init+0xc4>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	4a1e      	ldr	r2, [pc, #120]	; (8000884 <MX_GPIO_Init+0xc4>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000812:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <MX_GPIO_Init+0xc4>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	4b19      	ldr	r3, [pc, #100]	; (8000884 <MX_GPIO_Init+0xc4>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	4a18      	ldr	r2, [pc, #96]	; (8000884 <MX_GPIO_Init+0xc4>)
 8000824:	f043 0302 	orr.w	r3, r3, #2
 8000828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082a:	4b16      	ldr	r3, [pc, #88]	; (8000884 <MX_GPIO_Init+0xc4>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	f003 0302 	and.w	r3, r3, #2
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	2120      	movs	r1, #32
 800083a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800083e:	f000 fd8b 	bl	8001358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000842:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000848:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800084c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	4619      	mov	r1, r3
 8000858:	480b      	ldr	r0, [pc, #44]	; (8000888 <MX_GPIO_Init+0xc8>)
 800085a:	f000 fbd3 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800085e:	2320      	movs	r3, #32
 8000860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000862:	2301      	movs	r3, #1
 8000864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	2300      	movs	r3, #0
 800086c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	4619      	mov	r1, r3
 8000874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000878:	f000 fbc4 	bl	8001004 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800087c:	bf00      	nop
 800087e:	3728      	adds	r7, #40	; 0x28
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40021000 	.word	0x40021000
 8000888:	48000800 	.word	0x48000800

0800088c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000890:	b672      	cpsid	i
}
 8000892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000894:	e7fe      	b.n	8000894 <Error_Handler+0x8>

08000896 <ring_buffer_init>:

/**
 * @brief This function initializes the control struct of the ring buffer
*/
void ring_buffer_init(ring_buffer_t *ring_buffer, uint8_t *buffer, uint16_t capacity)
{
 8000896:	b480      	push	{r7}
 8000898:	b085      	sub	sp, #20
 800089a:	af00      	add	r7, sp, #0
 800089c:	60f8      	str	r0, [r7, #12]
 800089e:	60b9      	str	r1, [r7, #8]
 80008a0:	4613      	mov	r3, r2
 80008a2:	80fb      	strh	r3, [r7, #6]
	ring_buffer->buffer = buffer;
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	68ba      	ldr	r2, [r7, #8]
 80008a8:	601a      	str	r2, [r3, #0]
	ring_buffer->capacity = capacity;
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	88fa      	ldrh	r2, [r7, #6]
 80008ae:	811a      	strh	r2, [r3, #8]

	ring_buffer->head = 0;
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	2200      	movs	r2, #0
 80008b4:	809a      	strh	r2, [r3, #4]
	ring_buffer->tail = 0;
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	2200      	movs	r2, #0
 80008ba:	80da      	strh	r2, [r3, #6]
	ring_buffer->is_full = 0;
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	2200      	movs	r2, #0
 80008c0:	729a      	strb	r2, [r3, #10]
}
 80008c2:	bf00      	nop
 80008c4:	3714      	adds	r7, #20
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr

080008ce <ring_buffer_put>:
/**
 * @brief This function adds a data in the ring buffer
 * @param data: the value to be added
*/
uint8_t ring_buffer_put(ring_buffer_t *ring_buffer, uint8_t data)
{
 80008ce:	b480      	push	{r7}
 80008d0:	b083      	sub	sp, #12
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
 80008d6:	460b      	mov	r3, r1
 80008d8:	70fb      	strb	r3, [r7, #3]
	ring_buffer->buffer[ring_buffer->head] = data;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	687a      	ldr	r2, [r7, #4]
 80008e0:	8892      	ldrh	r2, [r2, #4]
 80008e2:	4413      	add	r3, r2
 80008e4:	78fa      	ldrb	r2, [r7, #3]
 80008e6:	701a      	strb	r2, [r3, #0]
	ring_buffer->head = (ring_buffer->head + 1) % ring_buffer->capacity;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	889b      	ldrh	r3, [r3, #4]
 80008ec:	3301      	adds	r3, #1
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	8912      	ldrh	r2, [r2, #8]
 80008f2:	fb93 f1f2 	sdiv	r1, r3, r2
 80008f6:	fb01 f202 	mul.w	r2, r1, r2
 80008fa:	1a9b      	subs	r3, r3, r2
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	809a      	strh	r2, [r3, #4]

	if (ring_buffer->is_full != 0) {
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	7a9b      	ldrb	r3, [r3, #10]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d00c      	beq.n	8000924 <ring_buffer_put+0x56>
		ring_buffer->tail = (ring_buffer->tail + 1) % ring_buffer->capacity;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	88db      	ldrh	r3, [r3, #6]
 800090e:	3301      	adds	r3, #1
 8000910:	687a      	ldr	r2, [r7, #4]
 8000912:	8912      	ldrh	r2, [r2, #8]
 8000914:	fb93 f1f2 	sdiv	r1, r3, r2
 8000918:	fb01 f202 	mul.w	r2, r1, r2
 800091c:	1a9b      	subs	r3, r3, r2
 800091e:	b29a      	uxth	r2, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	80da      	strh	r2, [r3, #6]
	}

	if (ring_buffer->head == ring_buffer->tail) {
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	889a      	ldrh	r2, [r3, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	88db      	ldrh	r3, [r3, #6]
 800092c:	429a      	cmp	r2, r3
 800092e:	d102      	bne.n	8000936 <ring_buffer_put+0x68>
		ring_buffer->is_full = 1;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2201      	movs	r2, #1
 8000934:	729a      	strb	r2, [r3, #10]
	}
}
 8000936:	bf00      	nop
 8000938:	4618      	mov	r0, r3
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <ring_buffer_get>:
/**
 * @brief This function reads a data from the ring buffer
 * @param data: the pointer to the address to write the data
*/
uint8_t ring_buffer_get(ring_buffer_t *ring_buffer, uint8_t *data)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	6039      	str	r1, [r7, #0]
	if ((ring_buffer->is_full != 0) || (ring_buffer->tail != ring_buffer->head)) {
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	7a9b      	ldrb	r3, [r3, #10]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d105      	bne.n	8000962 <ring_buffer_get+0x1e>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	88da      	ldrh	r2, [r3, #6]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	889b      	ldrh	r3, [r3, #4]
 800095e:	429a      	cmp	r2, r3
 8000960:	d019      	beq.n	8000996 <ring_buffer_get+0x52>
		*data = ring_buffer->buffer[ring_buffer->tail];
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	88d2      	ldrh	r2, [r2, #6]
 800096a:	4413      	add	r3, r2
 800096c:	781a      	ldrb	r2, [r3, #0]
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	701a      	strb	r2, [r3, #0]
		ring_buffer->tail = (ring_buffer->tail + 1) % ring_buffer->capacity;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	88db      	ldrh	r3, [r3, #6]
 8000976:	3301      	adds	r3, #1
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	8912      	ldrh	r2, [r2, #8]
 800097c:	fb93 f1f2 	sdiv	r1, r3, r2
 8000980:	fb01 f202 	mul.w	r2, r1, r2
 8000984:	1a9b      	subs	r3, r3, r2
 8000986:	b29a      	uxth	r2, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	80da      	strh	r2, [r3, #6]
		ring_buffer->is_full = 0;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2200      	movs	r2, #0
 8000990:	729a      	strb	r2, [r3, #10]
		return 1;
 8000992:	2301      	movs	r3, #1
 8000994:	e000      	b.n	8000998 <ring_buffer_get+0x54>
	}
	return 0;
 8000996:	2300      	movs	r3, #0
}
 8000998:	4618      	mov	r0, r3
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <ring_buffer_size>:

/**
 * @brief This function returns the size of the ring buffer
*/
uint16_t ring_buffer_size(ring_buffer_t *ring_buffer)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	uint16_t size = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	81fb      	strh	r3, [r7, #14]

	if ((ring_buffer->is_full == 0) && (ring_buffer->tail <= ring_buffer->head)) {
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	7a9b      	ldrb	r3, [r3, #10]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d10c      	bne.n	80009d2 <ring_buffer_size+0x2e>
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	88da      	ldrh	r2, [r3, #6]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	889b      	ldrh	r3, [r3, #4]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d806      	bhi.n	80009d2 <ring_buffer_size+0x2e>
		size = ring_buffer->head - ring_buffer->tail;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	889a      	ldrh	r2, [r3, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	88db      	ldrh	r3, [r3, #6]
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	81fb      	strh	r3, [r7, #14]
 80009d0:	e009      	b.n	80009e6 <ring_buffer_size+0x42>
	} else {
		size = ring_buffer->head + (ring_buffer->capacity - ring_buffer->tail);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	889a      	ldrh	r2, [r3, #4]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	8919      	ldrh	r1, [r3, #8]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	88db      	ldrh	r3, [r3, #6]
 80009de:	1acb      	subs	r3, r1, r3
 80009e0:	b29b      	uxth	r3, r3
 80009e2:	4413      	add	r3, r2
 80009e4:	81fb      	strh	r3, [r7, #14]
	}

	return size;
 80009e6:	89fb      	ldrh	r3, [r7, #14]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3714      	adds	r7, #20
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <ring_buffer_is_empty>:

/*ring_buffer_is_empty, que se utiliza para verificar si el buffer circular está vacío. Toma un puntero a una estructura ring_buffer_t como argumento.*/

uint8_t ring_buffer_is_empty(ring_buffer_t *ring_buffer)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	return ring_buffer->head == ring_buffer->tail;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	889a      	ldrh	r2, [r3, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	88db      	ldrh	r3, [r3, #6]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	bf0c      	ite	eq
 8000a08:	2301      	moveq	r3, #1
 8000a0a:	2300      	movne	r3, #0
 8000a0c:	b2db      	uxtb	r3, r3
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
	...

08000a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a22:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <HAL_MspInit+0x44>)
 8000a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a26:	4a0e      	ldr	r2, [pc, #56]	; (8000a60 <HAL_MspInit+0x44>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <HAL_MspInit+0x44>)
 8000a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3a:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <HAL_MspInit+0x44>)
 8000a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a3e:	4a08      	ldr	r2, [pc, #32]	; (8000a60 <HAL_MspInit+0x44>)
 8000a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a44:	6593      	str	r3, [r2, #88]	; 0x58
 8000a46:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <HAL_MspInit+0x44>)
 8000a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	40021000 	.word	0x40021000

08000a64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b0ac      	sub	sp, #176	; 0xb0
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	2288      	movs	r2, #136	; 0x88
 8000a82:	2100      	movs	r1, #0
 8000a84:	4618      	mov	r0, r3
 8000a86:	f002 ff9f 	bl	80039c8 <memset>
  if(huart->Instance==USART2)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a21      	ldr	r2, [pc, #132]	; (8000b14 <HAL_UART_MspInit+0xb0>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d13b      	bne.n	8000b0c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a94:	2302      	movs	r3, #2
 8000a96:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f001 fad5 	bl	8002050 <HAL_RCCEx_PeriphCLKConfig>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000aac:	f7ff feee 	bl	800088c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ab0:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <HAL_UART_MspInit+0xb4>)
 8000ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab4:	4a18      	ldr	r2, [pc, #96]	; (8000b18 <HAL_UART_MspInit+0xb4>)
 8000ab6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aba:	6593      	str	r3, [r2, #88]	; 0x58
 8000abc:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <HAL_UART_MspInit+0xb4>)
 8000abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac8:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <HAL_UART_MspInit+0xb4>)
 8000aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000acc:	4a12      	ldr	r2, [pc, #72]	; (8000b18 <HAL_UART_MspInit+0xb4>)
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad4:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <HAL_UART_MspInit+0xb4>)
 8000ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad8:	f003 0301 	and.w	r3, r3, #1
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ae0:	230c      	movs	r3, #12
 8000ae2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af2:	2303      	movs	r3, #3
 8000af4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000af8:	2307      	movs	r3, #7
 8000afa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b02:	4619      	mov	r1, r3
 8000b04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b08:	f000 fa7c 	bl	8001004 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b0c:	bf00      	nop
 8000b0e:	37b0      	adds	r7, #176	; 0xb0
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40004400 	.word	0x40004400
 8000b18:	40021000 	.word	0x40021000

08000b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <NMI_Handler+0x4>

08000b22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <HardFault_Handler+0x4>

08000b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <MemManage_Handler+0x4>

08000b2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <BusFault_Handler+0x4>

08000b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <UsageFault_Handler+0x4>

08000b3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b68:	f000 f922 	bl	8000db0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	e00a      	b.n	8000b98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b82:	f3af 8000 	nop.w
 8000b86:	4601      	mov	r1, r0
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	1c5a      	adds	r2, r3, #1
 8000b8c:	60ba      	str	r2, [r7, #8]
 8000b8e:	b2ca      	uxtb	r2, r1
 8000b90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	3301      	adds	r3, #1
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	697a      	ldr	r2, [r7, #20]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	dbf0      	blt.n	8000b82 <_read+0x12>
  }

  return len;
 8000ba0:	687b      	ldr	r3, [r7, #4]
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <_close>:
  }
  return len;
}

int _close(int file)
{
 8000baa:	b480      	push	{r7}
 8000bac:	b083      	sub	sp, #12
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	b083      	sub	sp, #12
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
 8000bca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bd2:	605a      	str	r2, [r3, #4]
  return 0;
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <_isatty>:

int _isatty(int file)
{
 8000be2:	b480      	push	{r7}
 8000be4:	b083      	sub	sp, #12
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bea:	2301      	movs	r3, #1
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3714      	adds	r7, #20
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
	...

08000c14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c1c:	4a14      	ldr	r2, [pc, #80]	; (8000c70 <_sbrk+0x5c>)
 8000c1e:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <_sbrk+0x60>)
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c28:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <_sbrk+0x64>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d102      	bne.n	8000c36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <_sbrk+0x64>)
 8000c32:	4a12      	ldr	r2, [pc, #72]	; (8000c7c <_sbrk+0x68>)
 8000c34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <_sbrk+0x64>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d207      	bcs.n	8000c54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c44:	f002 fe96 	bl	8003974 <__errno>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c52:	e009      	b.n	8000c68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c54:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <_sbrk+0x64>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c5a:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <_sbrk+0x64>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	4a05      	ldr	r2, [pc, #20]	; (8000c78 <_sbrk+0x64>)
 8000c64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c66:	68fb      	ldr	r3, [r7, #12]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3718      	adds	r7, #24
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20018000 	.word	0x20018000
 8000c74:	00000400 	.word	0x00000400
 8000c78:	20000130 	.word	0x20000130
 8000c7c:	20000148 	.word	0x20000148

08000c80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <SystemInit+0x20>)
 8000c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c8a:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <SystemInit+0x20>)
 8000c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ca4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cdc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ca8:	f7ff ffea 	bl	8000c80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cac:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cae:	490d      	ldr	r1, [pc, #52]	; (8000ce4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ce8 <LoopForever+0xe>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb4:	e002      	b.n	8000cbc <LoopCopyDataInit>

08000cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cba:	3304      	adds	r3, #4

08000cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc0:	d3f9      	bcc.n	8000cb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cc4:	4c0a      	ldr	r4, [pc, #40]	; (8000cf0 <LoopForever+0x16>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc8:	e001      	b.n	8000cce <LoopFillZerobss>

08000cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ccc:	3204      	adds	r2, #4

08000cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd0:	d3fb      	bcc.n	8000cca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cd2:	f002 fe55 	bl	8003980 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cd6:	f7ff fc7d 	bl	80005d4 <main>

08000cda <LoopForever>:

LoopForever:
    b LoopForever
 8000cda:	e7fe      	b.n	8000cda <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cdc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ce8:	08004a08 	.word	0x08004a08
  ldr r2, =_sbss
 8000cec:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cf0:	20000148 	.word	0x20000148

08000cf4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cf4:	e7fe      	b.n	8000cf4 <ADC1_2_IRQHandler>
	...

08000cf8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d02:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <HAL_Init+0x3c>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a0b      	ldr	r2, [pc, #44]	; (8000d34 <HAL_Init+0x3c>)
 8000d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d0c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d0e:	2003      	movs	r0, #3
 8000d10:	f000 f944 	bl	8000f9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d14:	2000      	movs	r0, #0
 8000d16:	f000 f80f 	bl	8000d38 <HAL_InitTick>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d002      	beq.n	8000d26 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	71fb      	strb	r3, [r7, #7]
 8000d24:	e001      	b.n	8000d2a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d26:	f7ff fe79 	bl	8000a1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40022000 	.word	0x40022000

08000d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d40:	2300      	movs	r3, #0
 8000d42:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d44:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <HAL_InitTick+0x6c>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d023      	beq.n	8000d94 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d4c:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <HAL_InitTick+0x70>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <HAL_InitTick+0x6c>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	4619      	mov	r1, r3
 8000d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 f941 	bl	8000fea <HAL_SYSTICK_Config>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d10f      	bne.n	8000d8e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b0f      	cmp	r3, #15
 8000d72:	d809      	bhi.n	8000d88 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d74:	2200      	movs	r2, #0
 8000d76:	6879      	ldr	r1, [r7, #4]
 8000d78:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7c:	f000 f919 	bl	8000fb2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d80:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <HAL_InitTick+0x74>)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6013      	str	r3, [r2, #0]
 8000d86:	e007      	b.n	8000d98 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	73fb      	strb	r3, [r7, #15]
 8000d8c:	e004      	b.n	8000d98 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	73fb      	strb	r3, [r7, #15]
 8000d92:	e001      	b.n	8000d98 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000008 	.word	0x20000008
 8000da8:	20000000 	.word	0x20000000
 8000dac:	20000004 	.word	0x20000004

08000db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_IncTick+0x20>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_IncTick+0x24>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	4a04      	ldr	r2, [pc, #16]	; (8000dd4 <HAL_IncTick+0x24>)
 8000dc2:	6013      	str	r3, [r2, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	20000008 	.word	0x20000008
 8000dd4:	20000134 	.word	0x20000134

08000dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  return uwTick;
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <HAL_GetTick+0x14>)
 8000dde:	681b      	ldr	r3, [r3, #0]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	20000134 	.word	0x20000134

08000df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df8:	f7ff ffee 	bl	8000dd8 <HAL_GetTick>
 8000dfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e08:	d005      	beq.n	8000e16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <HAL_Delay+0x44>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4413      	add	r3, r2
 8000e14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e16:	bf00      	nop
 8000e18:	f7ff ffde 	bl	8000dd8 <HAL_GetTick>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d8f7      	bhi.n	8000e18 <HAL_Delay+0x28>
  {
  }
}
 8000e28:	bf00      	nop
 8000e2a:	bf00      	nop
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000008 	.word	0x20000008

08000e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <__NVIC_SetPriorityGrouping+0x44>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e54:	4013      	ands	r3, r2
 8000e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e6a:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <__NVIC_SetPriorityGrouping+0x44>)
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	60d3      	str	r3, [r2, #12]
}
 8000e70:	bf00      	nop
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e84:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <__NVIC_GetPriorityGrouping+0x18>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	0a1b      	lsrs	r3, r3, #8
 8000e8a:	f003 0307 	and.w	r3, r3, #7
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	6039      	str	r1, [r7, #0]
 8000ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	db0a      	blt.n	8000ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	490c      	ldr	r1, [pc, #48]	; (8000ee8 <__NVIC_SetPriority+0x4c>)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	0112      	lsls	r2, r2, #4
 8000ebc:	b2d2      	uxtb	r2, r2
 8000ebe:	440b      	add	r3, r1
 8000ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec4:	e00a      	b.n	8000edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4908      	ldr	r1, [pc, #32]	; (8000eec <__NVIC_SetPriority+0x50>)
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	f003 030f 	and.w	r3, r3, #15
 8000ed2:	3b04      	subs	r3, #4
 8000ed4:	0112      	lsls	r2, r2, #4
 8000ed6:	b2d2      	uxtb	r2, r2
 8000ed8:	440b      	add	r3, r1
 8000eda:	761a      	strb	r2, [r3, #24]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000e100 	.word	0xe000e100
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b089      	sub	sp, #36	; 0x24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	f1c3 0307 	rsb	r3, r3, #7
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	bf28      	it	cs
 8000f0e:	2304      	movcs	r3, #4
 8000f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3304      	adds	r3, #4
 8000f16:	2b06      	cmp	r3, #6
 8000f18:	d902      	bls.n	8000f20 <NVIC_EncodePriority+0x30>
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3b03      	subs	r3, #3
 8000f1e:	e000      	b.n	8000f22 <NVIC_EncodePriority+0x32>
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	f04f 32ff 	mov.w	r2, #4294967295
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43da      	mvns	r2, r3
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	401a      	ands	r2, r3
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f38:	f04f 31ff 	mov.w	r1, #4294967295
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f42:	43d9      	mvns	r1, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	4313      	orrs	r3, r2
         );
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3724      	adds	r7, #36	; 0x24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
	...

08000f58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f68:	d301      	bcc.n	8000f6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00f      	b.n	8000f8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f6e:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <SysTick_Config+0x40>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f76:	210f      	movs	r1, #15
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	f7ff ff8e 	bl	8000e9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f80:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <SysTick_Config+0x40>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f86:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <SysTick_Config+0x40>)
 8000f88:	2207      	movs	r2, #7
 8000f8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	e000e010 	.word	0xe000e010

08000f9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff ff47 	bl	8000e38 <__NVIC_SetPriorityGrouping>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b086      	sub	sp, #24
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	4603      	mov	r3, r0
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
 8000fbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc4:	f7ff ff5c 	bl	8000e80 <__NVIC_GetPriorityGrouping>
 8000fc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	68b9      	ldr	r1, [r7, #8]
 8000fce:	6978      	ldr	r0, [r7, #20]
 8000fd0:	f7ff ff8e 	bl	8000ef0 <NVIC_EncodePriority>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fda:	4611      	mov	r1, r2
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ff5d 	bl	8000e9c <__NVIC_SetPriority>
}
 8000fe2:	bf00      	nop
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff ffb0 	bl	8000f58 <SysTick_Config>
 8000ff8:	4603      	mov	r3, r0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001004:	b480      	push	{r7}
 8001006:	b087      	sub	sp, #28
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001012:	e17f      	b.n	8001314 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	2101      	movs	r1, #1
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	fa01 f303 	lsl.w	r3, r1, r3
 8001020:	4013      	ands	r3, r2
 8001022:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2b00      	cmp	r3, #0
 8001028:	f000 8171 	beq.w	800130e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 0303 	and.w	r3, r3, #3
 8001034:	2b01      	cmp	r3, #1
 8001036:	d005      	beq.n	8001044 <HAL_GPIO_Init+0x40>
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f003 0303 	and.w	r3, r3, #3
 8001040:	2b02      	cmp	r3, #2
 8001042:	d130      	bne.n	80010a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	2203      	movs	r2, #3
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4013      	ands	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	68da      	ldr	r2, [r3, #12]
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4313      	orrs	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800107a:	2201      	movs	r2, #1
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4013      	ands	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	091b      	lsrs	r3, r3, #4
 8001090:	f003 0201 	and.w	r2, r3, #1
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f003 0303 	and.w	r3, r3, #3
 80010ae:	2b03      	cmp	r3, #3
 80010b0:	d118      	bne.n	80010e4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80010b8:	2201      	movs	r2, #1
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4013      	ands	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	08db      	lsrs	r3, r3, #3
 80010ce:	f003 0201 	and.w	r2, r3, #1
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4313      	orrs	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 0303 	and.w	r3, r3, #3
 80010ec:	2b03      	cmp	r3, #3
 80010ee:	d017      	beq.n	8001120 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	2203      	movs	r2, #3
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4013      	ands	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4313      	orrs	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d123      	bne.n	8001174 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	08da      	lsrs	r2, r3, #3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3208      	adds	r2, #8
 8001134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001138:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	f003 0307 	and.w	r3, r3, #7
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	220f      	movs	r2, #15
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4013      	ands	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	691a      	ldr	r2, [r3, #16]
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	4313      	orrs	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	08da      	lsrs	r2, r3, #3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3208      	adds	r2, #8
 800116e:	6939      	ldr	r1, [r7, #16]
 8001170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	2203      	movs	r2, #3
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0203 	and.w	r2, r3, #3
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4313      	orrs	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f000 80ac 	beq.w	800130e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b6:	4b5f      	ldr	r3, [pc, #380]	; (8001334 <HAL_GPIO_Init+0x330>)
 80011b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ba:	4a5e      	ldr	r2, [pc, #376]	; (8001334 <HAL_GPIO_Init+0x330>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6613      	str	r3, [r2, #96]	; 0x60
 80011c2:	4b5c      	ldr	r3, [pc, #368]	; (8001334 <HAL_GPIO_Init+0x330>)
 80011c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011ce:	4a5a      	ldr	r2, [pc, #360]	; (8001338 <HAL_GPIO_Init+0x334>)
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	089b      	lsrs	r3, r3, #2
 80011d4:	3302      	adds	r3, #2
 80011d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011da:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	f003 0303 	and.w	r3, r3, #3
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	220f      	movs	r2, #15
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43db      	mvns	r3, r3
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4013      	ands	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011f8:	d025      	beq.n	8001246 <HAL_GPIO_Init+0x242>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a4f      	ldr	r2, [pc, #316]	; (800133c <HAL_GPIO_Init+0x338>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d01f      	beq.n	8001242 <HAL_GPIO_Init+0x23e>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4e      	ldr	r2, [pc, #312]	; (8001340 <HAL_GPIO_Init+0x33c>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d019      	beq.n	800123e <HAL_GPIO_Init+0x23a>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a4d      	ldr	r2, [pc, #308]	; (8001344 <HAL_GPIO_Init+0x340>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d013      	beq.n	800123a <HAL_GPIO_Init+0x236>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a4c      	ldr	r2, [pc, #304]	; (8001348 <HAL_GPIO_Init+0x344>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d00d      	beq.n	8001236 <HAL_GPIO_Init+0x232>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a4b      	ldr	r2, [pc, #300]	; (800134c <HAL_GPIO_Init+0x348>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d007      	beq.n	8001232 <HAL_GPIO_Init+0x22e>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a4a      	ldr	r2, [pc, #296]	; (8001350 <HAL_GPIO_Init+0x34c>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d101      	bne.n	800122e <HAL_GPIO_Init+0x22a>
 800122a:	2306      	movs	r3, #6
 800122c:	e00c      	b.n	8001248 <HAL_GPIO_Init+0x244>
 800122e:	2307      	movs	r3, #7
 8001230:	e00a      	b.n	8001248 <HAL_GPIO_Init+0x244>
 8001232:	2305      	movs	r3, #5
 8001234:	e008      	b.n	8001248 <HAL_GPIO_Init+0x244>
 8001236:	2304      	movs	r3, #4
 8001238:	e006      	b.n	8001248 <HAL_GPIO_Init+0x244>
 800123a:	2303      	movs	r3, #3
 800123c:	e004      	b.n	8001248 <HAL_GPIO_Init+0x244>
 800123e:	2302      	movs	r3, #2
 8001240:	e002      	b.n	8001248 <HAL_GPIO_Init+0x244>
 8001242:	2301      	movs	r3, #1
 8001244:	e000      	b.n	8001248 <HAL_GPIO_Init+0x244>
 8001246:	2300      	movs	r3, #0
 8001248:	697a      	ldr	r2, [r7, #20]
 800124a:	f002 0203 	and.w	r2, r2, #3
 800124e:	0092      	lsls	r2, r2, #2
 8001250:	4093      	lsls	r3, r2
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	4313      	orrs	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001258:	4937      	ldr	r1, [pc, #220]	; (8001338 <HAL_GPIO_Init+0x334>)
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	089b      	lsrs	r3, r3, #2
 800125e:	3302      	adds	r3, #2
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001266:	4b3b      	ldr	r3, [pc, #236]	; (8001354 <HAL_GPIO_Init+0x350>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	43db      	mvns	r3, r3
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	4013      	ands	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4313      	orrs	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800128a:	4a32      	ldr	r2, [pc, #200]	; (8001354 <HAL_GPIO_Init+0x350>)
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001290:	4b30      	ldr	r3, [pc, #192]	; (8001354 <HAL_GPIO_Init+0x350>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	43db      	mvns	r3, r3
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4013      	ands	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012b4:	4a27      	ldr	r2, [pc, #156]	; (8001354 <HAL_GPIO_Init+0x350>)
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012ba:	4b26      	ldr	r3, [pc, #152]	; (8001354 <HAL_GPIO_Init+0x350>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	43db      	mvns	r3, r3
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	4013      	ands	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4313      	orrs	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012de:	4a1d      	ldr	r2, [pc, #116]	; (8001354 <HAL_GPIO_Init+0x350>)
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80012e4:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <HAL_GPIO_Init+0x350>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	43db      	mvns	r3, r3
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4013      	ands	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d003      	beq.n	8001308 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	4313      	orrs	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001308:	4a12      	ldr	r2, [pc, #72]	; (8001354 <HAL_GPIO_Init+0x350>)
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	3301      	adds	r3, #1
 8001312:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	fa22 f303 	lsr.w	r3, r2, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	f47f ae78 	bne.w	8001014 <HAL_GPIO_Init+0x10>
  }
}
 8001324:	bf00      	nop
 8001326:	bf00      	nop
 8001328:	371c      	adds	r7, #28
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	40021000 	.word	0x40021000
 8001338:	40010000 	.word	0x40010000
 800133c:	48000400 	.word	0x48000400
 8001340:	48000800 	.word	0x48000800
 8001344:	48000c00 	.word	0x48000c00
 8001348:	48001000 	.word	0x48001000
 800134c:	48001400 	.word	0x48001400
 8001350:	48001800 	.word	0x48001800
 8001354:	40010400 	.word	0x40010400

08001358 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	460b      	mov	r3, r1
 8001362:	807b      	strh	r3, [r7, #2]
 8001364:	4613      	mov	r3, r2
 8001366:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001368:	787b      	ldrb	r3, [r7, #1]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800136e:	887a      	ldrh	r2, [r7, #2]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001374:	e002      	b.n	800137c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001376:	887a      	ldrh	r2, [r7, #2]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800138c:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001394:	4618      	mov	r0, r3
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40007000 	.word	0x40007000

080013a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013b2:	d130      	bne.n	8001416 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80013b4:	4b23      	ldr	r3, [pc, #140]	; (8001444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013c0:	d038      	beq.n	8001434 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013c2:	4b20      	ldr	r3, [pc, #128]	; (8001444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013ca:	4a1e      	ldr	r2, [pc, #120]	; (8001444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013d2:	4b1d      	ldr	r3, [pc, #116]	; (8001448 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2232      	movs	r2, #50	; 0x32
 80013d8:	fb02 f303 	mul.w	r3, r2, r3
 80013dc:	4a1b      	ldr	r2, [pc, #108]	; (800144c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013de:	fba2 2303 	umull	r2, r3, r2, r3
 80013e2:	0c9b      	lsrs	r3, r3, #18
 80013e4:	3301      	adds	r3, #1
 80013e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013e8:	e002      	b.n	80013f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	3b01      	subs	r3, #1
 80013ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013f0:	4b14      	ldr	r3, [pc, #80]	; (8001444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013f2:	695b      	ldr	r3, [r3, #20]
 80013f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013fc:	d102      	bne.n	8001404 <HAL_PWREx_ControlVoltageScaling+0x60>
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1f2      	bne.n	80013ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001404:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001406:	695b      	ldr	r3, [r3, #20]
 8001408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800140c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001410:	d110      	bne.n	8001434 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e00f      	b.n	8001436 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800141e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001422:	d007      	beq.n	8001434 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001424:	4b07      	ldr	r3, [pc, #28]	; (8001444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800142c:	4a05      	ldr	r2, [pc, #20]	; (8001444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800142e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001432:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	40007000 	.word	0x40007000
 8001448:	20000000 	.word	0x20000000
 800144c:	431bde83 	.word	0x431bde83

08001450 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b088      	sub	sp, #32
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e3ca      	b.n	8001bf8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001462:	4b97      	ldr	r3, [pc, #604]	; (80016c0 <HAL_RCC_OscConfig+0x270>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f003 030c 	and.w	r3, r3, #12
 800146a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800146c:	4b94      	ldr	r3, [pc, #592]	; (80016c0 <HAL_RCC_OscConfig+0x270>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	f003 0303 	and.w	r3, r3, #3
 8001474:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0310 	and.w	r3, r3, #16
 800147e:	2b00      	cmp	r3, #0
 8001480:	f000 80e4 	beq.w	800164c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d007      	beq.n	800149a <HAL_RCC_OscConfig+0x4a>
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	2b0c      	cmp	r3, #12
 800148e:	f040 808b 	bne.w	80015a8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	2b01      	cmp	r3, #1
 8001496:	f040 8087 	bne.w	80015a8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800149a:	4b89      	ldr	r3, [pc, #548]	; (80016c0 <HAL_RCC_OscConfig+0x270>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d005      	beq.n	80014b2 <HAL_RCC_OscConfig+0x62>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e3a2      	b.n	8001bf8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a1a      	ldr	r2, [r3, #32]
 80014b6:	4b82      	ldr	r3, [pc, #520]	; (80016c0 <HAL_RCC_OscConfig+0x270>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0308 	and.w	r3, r3, #8
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d004      	beq.n	80014cc <HAL_RCC_OscConfig+0x7c>
 80014c2:	4b7f      	ldr	r3, [pc, #508]	; (80016c0 <HAL_RCC_OscConfig+0x270>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014ca:	e005      	b.n	80014d8 <HAL_RCC_OscConfig+0x88>
 80014cc:	4b7c      	ldr	r3, [pc, #496]	; (80016c0 <HAL_RCC_OscConfig+0x270>)
 80014ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014d2:	091b      	lsrs	r3, r3, #4
 80014d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014d8:	4293      	cmp	r3, r2
 80014da:	d223      	bcs.n	8001524 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a1b      	ldr	r3, [r3, #32]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f000 fd55 	bl	8001f90 <RCC_SetFlashLatencyFromMSIRange>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e383      	b.n	8001bf8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014f0:	4b73      	ldr	r3, [pc, #460]	; (80016c0 <HAL_RCC_OscConfig+0x270>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a72      	ldr	r2, [pc, #456]	; (80016c0 <HAL_RCC_OscConfig+0x270>)
 80014f6:	f043 0308 	orr.w	r3, r3, #8
 80014fa:	6013      	str	r3, [r2, #0]
 80014fc:	4b70      	ldr	r3, [pc, #448]	; (80016c0 <HAL_RCC_OscConfig+0x270>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a1b      	ldr	r3, [r3, #32]
 8001508:	496d      	ldr	r1, [pc, #436]	; (80016c0 <HAL_RCC_OscConfig+0x270>)
 800150a:	4313      	orrs	r3, r2
 800150c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800150e:	4b6c      	ldr	r3, [pc, #432]	; (80016c0 <HAL_RCC_OscConfig+0x270>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	021b      	lsls	r3, r3, #8
 800151c:	4968      	ldr	r1, [pc, #416]	; (80016c0 <HAL_RCC_OscConfig+0x270>)
 800151e:	4313      	orrs	r3, r2
 8001520:	604b      	str	r3, [r1, #4]
 8001522:	e025      	b.n	8001570 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001524:	4b66      	ldr	r3, [pc, #408]	; (80016c0 <HAL_RCC_OscConfig+0x270>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a65      	ldr	r2, [pc, #404]	; (80016c0 <HAL_RCC_OscConfig+0x270>)
 800152a:	f043 0308 	orr.w	r3, r3, #8
 800152e:	6013      	str	r3, [r2, #0]
 8001530:	4b63      	ldr	r3, [pc, #396]	; (80016c0 <HAL_RCC_OscConfig+0x270>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a1b      	ldr	r3, [r3, #32]
 800153c:	4960      	ldr	r1, [pc, #384]	; (80016c0 <HAL_RCC_OscConfig+0x270>)
 800153e:	4313      	orrs	r3, r2
 8001540:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001542:	4b5f      	ldr	r3, [pc, #380]	; (80016c0 <HAL_RCC_OscConfig+0x270>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	69db      	ldr	r3, [r3, #28]
 800154e:	021b      	lsls	r3, r3, #8
 8001550:	495b      	ldr	r1, [pc, #364]	; (80016c0 <HAL_RCC_OscConfig+0x270>)
 8001552:	4313      	orrs	r3, r2
 8001554:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d109      	bne.n	8001570 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a1b      	ldr	r3, [r3, #32]
 8001560:	4618      	mov	r0, r3
 8001562:	f000 fd15 	bl	8001f90 <RCC_SetFlashLatencyFromMSIRange>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e343      	b.n	8001bf8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001570:	f000 fc4a 	bl	8001e08 <HAL_RCC_GetSysClockFreq>
 8001574:	4602      	mov	r2, r0
 8001576:	4b52      	ldr	r3, [pc, #328]	; (80016c0 <HAL_RCC_OscConfig+0x270>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	091b      	lsrs	r3, r3, #4
 800157c:	f003 030f 	and.w	r3, r3, #15
 8001580:	4950      	ldr	r1, [pc, #320]	; (80016c4 <HAL_RCC_OscConfig+0x274>)
 8001582:	5ccb      	ldrb	r3, [r1, r3]
 8001584:	f003 031f 	and.w	r3, r3, #31
 8001588:	fa22 f303 	lsr.w	r3, r2, r3
 800158c:	4a4e      	ldr	r2, [pc, #312]	; (80016c8 <HAL_RCC_OscConfig+0x278>)
 800158e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001590:	4b4e      	ldr	r3, [pc, #312]	; (80016cc <HAL_RCC_OscConfig+0x27c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff fbcf 	bl	8000d38 <HAL_InitTick>
 800159a:	4603      	mov	r3, r0
 800159c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800159e:	7bfb      	ldrb	r3, [r7, #15]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d052      	beq.n	800164a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
 80015a6:	e327      	b.n	8001bf8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d032      	beq.n	8001616 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015b0:	4b43      	ldr	r3, [pc, #268]	; (80016c0 <HAL_RCC_OscConfig+0x270>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a42      	ldr	r2, [pc, #264]	; (80016c0 <HAL_RCC_OscConfig+0x270>)
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015bc:	f7ff fc0c 	bl	8000dd8 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015c4:	f7ff fc08 	bl	8000dd8 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e310      	b.n	8001bf8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015d6:	4b3a      	ldr	r3, [pc, #232]	; (80016c0 <HAL_RCC_OscConfig+0x270>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d0f0      	beq.n	80015c4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015e2:	4b37      	ldr	r3, [pc, #220]	; (80016c0 <HAL_RCC_OscConfig+0x270>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a36      	ldr	r2, [pc, #216]	; (80016c0 <HAL_RCC_OscConfig+0x270>)
 80015e8:	f043 0308 	orr.w	r3, r3, #8
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	4b34      	ldr	r3, [pc, #208]	; (80016c0 <HAL_RCC_OscConfig+0x270>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a1b      	ldr	r3, [r3, #32]
 80015fa:	4931      	ldr	r1, [pc, #196]	; (80016c0 <HAL_RCC_OscConfig+0x270>)
 80015fc:	4313      	orrs	r3, r2
 80015fe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001600:	4b2f      	ldr	r3, [pc, #188]	; (80016c0 <HAL_RCC_OscConfig+0x270>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	69db      	ldr	r3, [r3, #28]
 800160c:	021b      	lsls	r3, r3, #8
 800160e:	492c      	ldr	r1, [pc, #176]	; (80016c0 <HAL_RCC_OscConfig+0x270>)
 8001610:	4313      	orrs	r3, r2
 8001612:	604b      	str	r3, [r1, #4]
 8001614:	e01a      	b.n	800164c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001616:	4b2a      	ldr	r3, [pc, #168]	; (80016c0 <HAL_RCC_OscConfig+0x270>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a29      	ldr	r2, [pc, #164]	; (80016c0 <HAL_RCC_OscConfig+0x270>)
 800161c:	f023 0301 	bic.w	r3, r3, #1
 8001620:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001622:	f7ff fbd9 	bl	8000dd8 <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800162a:	f7ff fbd5 	bl	8000dd8 <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e2dd      	b.n	8001bf8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800163c:	4b20      	ldr	r3, [pc, #128]	; (80016c0 <HAL_RCC_OscConfig+0x270>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d1f0      	bne.n	800162a <HAL_RCC_OscConfig+0x1da>
 8001648:	e000      	b.n	800164c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800164a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	2b00      	cmp	r3, #0
 8001656:	d074      	beq.n	8001742 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	2b08      	cmp	r3, #8
 800165c:	d005      	beq.n	800166a <HAL_RCC_OscConfig+0x21a>
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	2b0c      	cmp	r3, #12
 8001662:	d10e      	bne.n	8001682 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	2b03      	cmp	r3, #3
 8001668:	d10b      	bne.n	8001682 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <HAL_RCC_OscConfig+0x270>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d064      	beq.n	8001740 <HAL_RCC_OscConfig+0x2f0>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d160      	bne.n	8001740 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e2ba      	b.n	8001bf8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800168a:	d106      	bne.n	800169a <HAL_RCC_OscConfig+0x24a>
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <HAL_RCC_OscConfig+0x270>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a0b      	ldr	r2, [pc, #44]	; (80016c0 <HAL_RCC_OscConfig+0x270>)
 8001692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001696:	6013      	str	r3, [r2, #0]
 8001698:	e026      	b.n	80016e8 <HAL_RCC_OscConfig+0x298>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016a2:	d115      	bne.n	80016d0 <HAL_RCC_OscConfig+0x280>
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <HAL_RCC_OscConfig+0x270>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a05      	ldr	r2, [pc, #20]	; (80016c0 <HAL_RCC_OscConfig+0x270>)
 80016aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	4b03      	ldr	r3, [pc, #12]	; (80016c0 <HAL_RCC_OscConfig+0x270>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a02      	ldr	r2, [pc, #8]	; (80016c0 <HAL_RCC_OscConfig+0x270>)
 80016b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ba:	6013      	str	r3, [r2, #0]
 80016bc:	e014      	b.n	80016e8 <HAL_RCC_OscConfig+0x298>
 80016be:	bf00      	nop
 80016c0:	40021000 	.word	0x40021000
 80016c4:	08004918 	.word	0x08004918
 80016c8:	20000000 	.word	0x20000000
 80016cc:	20000004 	.word	0x20000004
 80016d0:	4ba0      	ldr	r3, [pc, #640]	; (8001954 <HAL_RCC_OscConfig+0x504>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a9f      	ldr	r2, [pc, #636]	; (8001954 <HAL_RCC_OscConfig+0x504>)
 80016d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016da:	6013      	str	r3, [r2, #0]
 80016dc:	4b9d      	ldr	r3, [pc, #628]	; (8001954 <HAL_RCC_OscConfig+0x504>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a9c      	ldr	r2, [pc, #624]	; (8001954 <HAL_RCC_OscConfig+0x504>)
 80016e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d013      	beq.n	8001718 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f0:	f7ff fb72 	bl	8000dd8 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f8:	f7ff fb6e 	bl	8000dd8 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b64      	cmp	r3, #100	; 0x64
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e276      	b.n	8001bf8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800170a:	4b92      	ldr	r3, [pc, #584]	; (8001954 <HAL_RCC_OscConfig+0x504>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0f0      	beq.n	80016f8 <HAL_RCC_OscConfig+0x2a8>
 8001716:	e014      	b.n	8001742 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001718:	f7ff fb5e 	bl	8000dd8 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001720:	f7ff fb5a 	bl	8000dd8 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b64      	cmp	r3, #100	; 0x64
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e262      	b.n	8001bf8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001732:	4b88      	ldr	r3, [pc, #544]	; (8001954 <HAL_RCC_OscConfig+0x504>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1f0      	bne.n	8001720 <HAL_RCC_OscConfig+0x2d0>
 800173e:	e000      	b.n	8001742 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001740:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d060      	beq.n	8001810 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	2b04      	cmp	r3, #4
 8001752:	d005      	beq.n	8001760 <HAL_RCC_OscConfig+0x310>
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	2b0c      	cmp	r3, #12
 8001758:	d119      	bne.n	800178e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	2b02      	cmp	r3, #2
 800175e:	d116      	bne.n	800178e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001760:	4b7c      	ldr	r3, [pc, #496]	; (8001954 <HAL_RCC_OscConfig+0x504>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001768:	2b00      	cmp	r3, #0
 800176a:	d005      	beq.n	8001778 <HAL_RCC_OscConfig+0x328>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d101      	bne.n	8001778 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e23f      	b.n	8001bf8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001778:	4b76      	ldr	r3, [pc, #472]	; (8001954 <HAL_RCC_OscConfig+0x504>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	691b      	ldr	r3, [r3, #16]
 8001784:	061b      	lsls	r3, r3, #24
 8001786:	4973      	ldr	r1, [pc, #460]	; (8001954 <HAL_RCC_OscConfig+0x504>)
 8001788:	4313      	orrs	r3, r2
 800178a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800178c:	e040      	b.n	8001810 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d023      	beq.n	80017de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001796:	4b6f      	ldr	r3, [pc, #444]	; (8001954 <HAL_RCC_OscConfig+0x504>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a6e      	ldr	r2, [pc, #440]	; (8001954 <HAL_RCC_OscConfig+0x504>)
 800179c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a2:	f7ff fb19 	bl	8000dd8 <HAL_GetTick>
 80017a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017a8:	e008      	b.n	80017bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017aa:	f7ff fb15 	bl	8000dd8 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e21d      	b.n	8001bf8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017bc:	4b65      	ldr	r3, [pc, #404]	; (8001954 <HAL_RCC_OscConfig+0x504>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d0f0      	beq.n	80017aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c8:	4b62      	ldr	r3, [pc, #392]	; (8001954 <HAL_RCC_OscConfig+0x504>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	061b      	lsls	r3, r3, #24
 80017d6:	495f      	ldr	r1, [pc, #380]	; (8001954 <HAL_RCC_OscConfig+0x504>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	604b      	str	r3, [r1, #4]
 80017dc:	e018      	b.n	8001810 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017de:	4b5d      	ldr	r3, [pc, #372]	; (8001954 <HAL_RCC_OscConfig+0x504>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a5c      	ldr	r2, [pc, #368]	; (8001954 <HAL_RCC_OscConfig+0x504>)
 80017e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ea:	f7ff faf5 	bl	8000dd8 <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017f2:	f7ff faf1 	bl	8000dd8 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e1f9      	b.n	8001bf8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001804:	4b53      	ldr	r3, [pc, #332]	; (8001954 <HAL_RCC_OscConfig+0x504>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1f0      	bne.n	80017f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0308 	and.w	r3, r3, #8
 8001818:	2b00      	cmp	r3, #0
 800181a:	d03c      	beq.n	8001896 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	695b      	ldr	r3, [r3, #20]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d01c      	beq.n	800185e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001824:	4b4b      	ldr	r3, [pc, #300]	; (8001954 <HAL_RCC_OscConfig+0x504>)
 8001826:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800182a:	4a4a      	ldr	r2, [pc, #296]	; (8001954 <HAL_RCC_OscConfig+0x504>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001834:	f7ff fad0 	bl	8000dd8 <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800183c:	f7ff facc 	bl	8000dd8 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e1d4      	b.n	8001bf8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800184e:	4b41      	ldr	r3, [pc, #260]	; (8001954 <HAL_RCC_OscConfig+0x504>)
 8001850:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0ef      	beq.n	800183c <HAL_RCC_OscConfig+0x3ec>
 800185c:	e01b      	b.n	8001896 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800185e:	4b3d      	ldr	r3, [pc, #244]	; (8001954 <HAL_RCC_OscConfig+0x504>)
 8001860:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001864:	4a3b      	ldr	r2, [pc, #236]	; (8001954 <HAL_RCC_OscConfig+0x504>)
 8001866:	f023 0301 	bic.w	r3, r3, #1
 800186a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800186e:	f7ff fab3 	bl	8000dd8 <HAL_GetTick>
 8001872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001876:	f7ff faaf 	bl	8000dd8 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e1b7      	b.n	8001bf8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001888:	4b32      	ldr	r3, [pc, #200]	; (8001954 <HAL_RCC_OscConfig+0x504>)
 800188a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1ef      	bne.n	8001876 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0304 	and.w	r3, r3, #4
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f000 80a6 	beq.w	80019f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018a4:	2300      	movs	r3, #0
 80018a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80018a8:	4b2a      	ldr	r3, [pc, #168]	; (8001954 <HAL_RCC_OscConfig+0x504>)
 80018aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d10d      	bne.n	80018d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018b4:	4b27      	ldr	r3, [pc, #156]	; (8001954 <HAL_RCC_OscConfig+0x504>)
 80018b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b8:	4a26      	ldr	r2, [pc, #152]	; (8001954 <HAL_RCC_OscConfig+0x504>)
 80018ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018be:	6593      	str	r3, [r2, #88]	; 0x58
 80018c0:	4b24      	ldr	r3, [pc, #144]	; (8001954 <HAL_RCC_OscConfig+0x504>)
 80018c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018cc:	2301      	movs	r3, #1
 80018ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018d0:	4b21      	ldr	r3, [pc, #132]	; (8001958 <HAL_RCC_OscConfig+0x508>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d118      	bne.n	800190e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018dc:	4b1e      	ldr	r3, [pc, #120]	; (8001958 <HAL_RCC_OscConfig+0x508>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a1d      	ldr	r2, [pc, #116]	; (8001958 <HAL_RCC_OscConfig+0x508>)
 80018e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018e8:	f7ff fa76 	bl	8000dd8 <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018f0:	f7ff fa72 	bl	8000dd8 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e17a      	b.n	8001bf8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001902:	4b15      	ldr	r3, [pc, #84]	; (8001958 <HAL_RCC_OscConfig+0x508>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0f0      	beq.n	80018f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d108      	bne.n	8001928 <HAL_RCC_OscConfig+0x4d8>
 8001916:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <HAL_RCC_OscConfig+0x504>)
 8001918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800191c:	4a0d      	ldr	r2, [pc, #52]	; (8001954 <HAL_RCC_OscConfig+0x504>)
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001926:	e029      	b.n	800197c <HAL_RCC_OscConfig+0x52c>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	2b05      	cmp	r3, #5
 800192e:	d115      	bne.n	800195c <HAL_RCC_OscConfig+0x50c>
 8001930:	4b08      	ldr	r3, [pc, #32]	; (8001954 <HAL_RCC_OscConfig+0x504>)
 8001932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001936:	4a07      	ldr	r2, [pc, #28]	; (8001954 <HAL_RCC_OscConfig+0x504>)
 8001938:	f043 0304 	orr.w	r3, r3, #4
 800193c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001940:	4b04      	ldr	r3, [pc, #16]	; (8001954 <HAL_RCC_OscConfig+0x504>)
 8001942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001946:	4a03      	ldr	r2, [pc, #12]	; (8001954 <HAL_RCC_OscConfig+0x504>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001950:	e014      	b.n	800197c <HAL_RCC_OscConfig+0x52c>
 8001952:	bf00      	nop
 8001954:	40021000 	.word	0x40021000
 8001958:	40007000 	.word	0x40007000
 800195c:	4b9c      	ldr	r3, [pc, #624]	; (8001bd0 <HAL_RCC_OscConfig+0x780>)
 800195e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001962:	4a9b      	ldr	r2, [pc, #620]	; (8001bd0 <HAL_RCC_OscConfig+0x780>)
 8001964:	f023 0301 	bic.w	r3, r3, #1
 8001968:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800196c:	4b98      	ldr	r3, [pc, #608]	; (8001bd0 <HAL_RCC_OscConfig+0x780>)
 800196e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001972:	4a97      	ldr	r2, [pc, #604]	; (8001bd0 <HAL_RCC_OscConfig+0x780>)
 8001974:	f023 0304 	bic.w	r3, r3, #4
 8001978:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d016      	beq.n	80019b2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001984:	f7ff fa28 	bl	8000dd8 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800198a:	e00a      	b.n	80019a2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800198c:	f7ff fa24 	bl	8000dd8 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	f241 3288 	movw	r2, #5000	; 0x1388
 800199a:	4293      	cmp	r3, r2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e12a      	b.n	8001bf8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019a2:	4b8b      	ldr	r3, [pc, #556]	; (8001bd0 <HAL_RCC_OscConfig+0x780>)
 80019a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0ed      	beq.n	800198c <HAL_RCC_OscConfig+0x53c>
 80019b0:	e015      	b.n	80019de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b2:	f7ff fa11 	bl	8000dd8 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019b8:	e00a      	b.n	80019d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ba:	f7ff fa0d 	bl	8000dd8 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e113      	b.n	8001bf8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019d0:	4b7f      	ldr	r3, [pc, #508]	; (8001bd0 <HAL_RCC_OscConfig+0x780>)
 80019d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1ed      	bne.n	80019ba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019de:	7ffb      	ldrb	r3, [r7, #31]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d105      	bne.n	80019f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019e4:	4b7a      	ldr	r3, [pc, #488]	; (8001bd0 <HAL_RCC_OscConfig+0x780>)
 80019e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e8:	4a79      	ldr	r2, [pc, #484]	; (8001bd0 <HAL_RCC_OscConfig+0x780>)
 80019ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019ee:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 80fe 	beq.w	8001bf6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	f040 80d0 	bne.w	8001ba4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a04:	4b72      	ldr	r3, [pc, #456]	; (8001bd0 <HAL_RCC_OscConfig+0x780>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	f003 0203 	and.w	r2, r3, #3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d130      	bne.n	8001a7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	3b01      	subs	r3, #1
 8001a24:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d127      	bne.n	8001a7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a34:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d11f      	bne.n	8001a7a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a44:	2a07      	cmp	r2, #7
 8001a46:	bf14      	ite	ne
 8001a48:	2201      	movne	r2, #1
 8001a4a:	2200      	moveq	r2, #0
 8001a4c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d113      	bne.n	8001a7a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a5c:	085b      	lsrs	r3, r3, #1
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d109      	bne.n	8001a7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a70:	085b      	lsrs	r3, r3, #1
 8001a72:	3b01      	subs	r3, #1
 8001a74:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d06e      	beq.n	8001b58 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	2b0c      	cmp	r3, #12
 8001a7e:	d069      	beq.n	8001b54 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a80:	4b53      	ldr	r3, [pc, #332]	; (8001bd0 <HAL_RCC_OscConfig+0x780>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d105      	bne.n	8001a98 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a8c:	4b50      	ldr	r3, [pc, #320]	; (8001bd0 <HAL_RCC_OscConfig+0x780>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e0ad      	b.n	8001bf8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a9c:	4b4c      	ldr	r3, [pc, #304]	; (8001bd0 <HAL_RCC_OscConfig+0x780>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a4b      	ldr	r2, [pc, #300]	; (8001bd0 <HAL_RCC_OscConfig+0x780>)
 8001aa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001aa6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001aa8:	f7ff f996 	bl	8000dd8 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab0:	f7ff f992 	bl	8000dd8 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e09a      	b.n	8001bf8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ac2:	4b43      	ldr	r3, [pc, #268]	; (8001bd0 <HAL_RCC_OscConfig+0x780>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f0      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ace:	4b40      	ldr	r3, [pc, #256]	; (8001bd0 <HAL_RCC_OscConfig+0x780>)
 8001ad0:	68da      	ldr	r2, [r3, #12]
 8001ad2:	4b40      	ldr	r3, [pc, #256]	; (8001bd4 <HAL_RCC_OscConfig+0x784>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ade:	3a01      	subs	r2, #1
 8001ae0:	0112      	lsls	r2, r2, #4
 8001ae2:	4311      	orrs	r1, r2
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ae8:	0212      	lsls	r2, r2, #8
 8001aea:	4311      	orrs	r1, r2
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001af0:	0852      	lsrs	r2, r2, #1
 8001af2:	3a01      	subs	r2, #1
 8001af4:	0552      	lsls	r2, r2, #21
 8001af6:	4311      	orrs	r1, r2
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001afc:	0852      	lsrs	r2, r2, #1
 8001afe:	3a01      	subs	r2, #1
 8001b00:	0652      	lsls	r2, r2, #25
 8001b02:	4311      	orrs	r1, r2
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b08:	0912      	lsrs	r2, r2, #4
 8001b0a:	0452      	lsls	r2, r2, #17
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	4930      	ldr	r1, [pc, #192]	; (8001bd0 <HAL_RCC_OscConfig+0x780>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b14:	4b2e      	ldr	r3, [pc, #184]	; (8001bd0 <HAL_RCC_OscConfig+0x780>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a2d      	ldr	r2, [pc, #180]	; (8001bd0 <HAL_RCC_OscConfig+0x780>)
 8001b1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b1e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b20:	4b2b      	ldr	r3, [pc, #172]	; (8001bd0 <HAL_RCC_OscConfig+0x780>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	4a2a      	ldr	r2, [pc, #168]	; (8001bd0 <HAL_RCC_OscConfig+0x780>)
 8001b26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b2a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b2c:	f7ff f954 	bl	8000dd8 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b34:	f7ff f950 	bl	8000dd8 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e058      	b.n	8001bf8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b46:	4b22      	ldr	r3, [pc, #136]	; (8001bd0 <HAL_RCC_OscConfig+0x780>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0f0      	beq.n	8001b34 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b52:	e050      	b.n	8001bf6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e04f      	b.n	8001bf8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b58:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <HAL_RCC_OscConfig+0x780>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d148      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b64:	4b1a      	ldr	r3, [pc, #104]	; (8001bd0 <HAL_RCC_OscConfig+0x780>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a19      	ldr	r2, [pc, #100]	; (8001bd0 <HAL_RCC_OscConfig+0x780>)
 8001b6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b70:	4b17      	ldr	r3, [pc, #92]	; (8001bd0 <HAL_RCC_OscConfig+0x780>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	4a16      	ldr	r2, [pc, #88]	; (8001bd0 <HAL_RCC_OscConfig+0x780>)
 8001b76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b7c:	f7ff f92c 	bl	8000dd8 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b84:	f7ff f928 	bl	8000dd8 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e030      	b.n	8001bf8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b96:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <HAL_RCC_OscConfig+0x780>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d0f0      	beq.n	8001b84 <HAL_RCC_OscConfig+0x734>
 8001ba2:	e028      	b.n	8001bf6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	2b0c      	cmp	r3, #12
 8001ba8:	d023      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001baa:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <HAL_RCC_OscConfig+0x780>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a08      	ldr	r2, [pc, #32]	; (8001bd0 <HAL_RCC_OscConfig+0x780>)
 8001bb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb6:	f7ff f90f 	bl	8000dd8 <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bbc:	e00c      	b.n	8001bd8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bbe:	f7ff f90b 	bl	8000dd8 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d905      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e013      	b.n	8001bf8 <HAL_RCC_OscConfig+0x7a8>
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bd8:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <HAL_RCC_OscConfig+0x7b0>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1ec      	bne.n	8001bbe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001be4:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <HAL_RCC_OscConfig+0x7b0>)
 8001be6:	68da      	ldr	r2, [r3, #12]
 8001be8:	4905      	ldr	r1, [pc, #20]	; (8001c00 <HAL_RCC_OscConfig+0x7b0>)
 8001bea:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <HAL_RCC_OscConfig+0x7b4>)
 8001bec:	4013      	ands	r3, r2
 8001bee:	60cb      	str	r3, [r1, #12]
 8001bf0:	e001      	b.n	8001bf6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e000      	b.n	8001bf8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3720      	adds	r7, #32
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40021000 	.word	0x40021000
 8001c04:	feeefffc 	.word	0xfeeefffc

08001c08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e0e7      	b.n	8001dec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c1c:	4b75      	ldr	r3, [pc, #468]	; (8001df4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d910      	bls.n	8001c4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2a:	4b72      	ldr	r3, [pc, #456]	; (8001df4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f023 0207 	bic.w	r2, r3, #7
 8001c32:	4970      	ldr	r1, [pc, #448]	; (8001df4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3a:	4b6e      	ldr	r3, [pc, #440]	; (8001df4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d001      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e0cf      	b.n	8001dec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d010      	beq.n	8001c7a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	4b66      	ldr	r3, [pc, #408]	; (8001df8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d908      	bls.n	8001c7a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c68:	4b63      	ldr	r3, [pc, #396]	; (8001df8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	4960      	ldr	r1, [pc, #384]	; (8001df8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d04c      	beq.n	8001d20 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b03      	cmp	r3, #3
 8001c8c:	d107      	bne.n	8001c9e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c8e:	4b5a      	ldr	r3, [pc, #360]	; (8001df8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d121      	bne.n	8001cde <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e0a6      	b.n	8001dec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d107      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ca6:	4b54      	ldr	r3, [pc, #336]	; (8001df8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d115      	bne.n	8001cde <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e09a      	b.n	8001dec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d107      	bne.n	8001cce <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cbe:	4b4e      	ldr	r3, [pc, #312]	; (8001df8 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d109      	bne.n	8001cde <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e08e      	b.n	8001dec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cce:	4b4a      	ldr	r3, [pc, #296]	; (8001df8 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e086      	b.n	8001dec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cde:	4b46      	ldr	r3, [pc, #280]	; (8001df8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f023 0203 	bic.w	r2, r3, #3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	4943      	ldr	r1, [pc, #268]	; (8001df8 <HAL_RCC_ClockConfig+0x1f0>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cf0:	f7ff f872 	bl	8000dd8 <HAL_GetTick>
 8001cf4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf6:	e00a      	b.n	8001d0e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf8:	f7ff f86e 	bl	8000dd8 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e06e      	b.n	8001dec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0e:	4b3a      	ldr	r3, [pc, #232]	; (8001df8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 020c 	and.w	r2, r3, #12
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d1eb      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d010      	beq.n	8001d4e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	4b31      	ldr	r3, [pc, #196]	; (8001df8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d208      	bcs.n	8001d4e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d3c:	4b2e      	ldr	r3, [pc, #184]	; (8001df8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	492b      	ldr	r1, [pc, #172]	; (8001df8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d4e:	4b29      	ldr	r3, [pc, #164]	; (8001df4 <HAL_RCC_ClockConfig+0x1ec>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d210      	bcs.n	8001d7e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d5c:	4b25      	ldr	r3, [pc, #148]	; (8001df4 <HAL_RCC_ClockConfig+0x1ec>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f023 0207 	bic.w	r2, r3, #7
 8001d64:	4923      	ldr	r1, [pc, #140]	; (8001df4 <HAL_RCC_ClockConfig+0x1ec>)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6c:	4b21      	ldr	r3, [pc, #132]	; (8001df4 <HAL_RCC_ClockConfig+0x1ec>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d001      	beq.n	8001d7e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e036      	b.n	8001dec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0304 	and.w	r3, r3, #4
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d008      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d8a:	4b1b      	ldr	r3, [pc, #108]	; (8001df8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	4918      	ldr	r1, [pc, #96]	; (8001df8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0308 	and.w	r3, r3, #8
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d009      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001da8:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <HAL_RCC_ClockConfig+0x1f0>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	4910      	ldr	r1, [pc, #64]	; (8001df8 <HAL_RCC_ClockConfig+0x1f0>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dbc:	f000 f824 	bl	8001e08 <HAL_RCC_GetSysClockFreq>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	4b0d      	ldr	r3, [pc, #52]	; (8001df8 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	091b      	lsrs	r3, r3, #4
 8001dc8:	f003 030f 	and.w	r3, r3, #15
 8001dcc:	490b      	ldr	r1, [pc, #44]	; (8001dfc <HAL_RCC_ClockConfig+0x1f4>)
 8001dce:	5ccb      	ldrb	r3, [r1, r3]
 8001dd0:	f003 031f 	and.w	r3, r3, #31
 8001dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd8:	4a09      	ldr	r2, [pc, #36]	; (8001e00 <HAL_RCC_ClockConfig+0x1f8>)
 8001dda:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ddc:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <HAL_RCC_ClockConfig+0x1fc>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7fe ffa9 	bl	8000d38 <HAL_InitTick>
 8001de6:	4603      	mov	r3, r0
 8001de8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001dea:	7afb      	ldrb	r3, [r7, #11]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40022000 	.word	0x40022000
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	08004918 	.word	0x08004918
 8001e00:	20000000 	.word	0x20000000
 8001e04:	20000004 	.word	0x20000004

08001e08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b089      	sub	sp, #36	; 0x24
 8001e0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61fb      	str	r3, [r7, #28]
 8001e12:	2300      	movs	r3, #0
 8001e14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e16:	4b3e      	ldr	r3, [pc, #248]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
 8001e1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e20:	4b3b      	ldr	r3, [pc, #236]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d005      	beq.n	8001e3c <HAL_RCC_GetSysClockFreq+0x34>
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	2b0c      	cmp	r3, #12
 8001e34:	d121      	bne.n	8001e7a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d11e      	bne.n	8001e7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e3c:	4b34      	ldr	r3, [pc, #208]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0308 	and.w	r3, r3, #8
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d107      	bne.n	8001e58 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e48:	4b31      	ldr	r3, [pc, #196]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e4e:	0a1b      	lsrs	r3, r3, #8
 8001e50:	f003 030f 	and.w	r3, r3, #15
 8001e54:	61fb      	str	r3, [r7, #28]
 8001e56:	e005      	b.n	8001e64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e58:	4b2d      	ldr	r3, [pc, #180]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	091b      	lsrs	r3, r3, #4
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e64:	4a2b      	ldr	r2, [pc, #172]	; (8001f14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e6c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d10d      	bne.n	8001e90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e78:	e00a      	b.n	8001e90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	2b04      	cmp	r3, #4
 8001e7e:	d102      	bne.n	8001e86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e80:	4b25      	ldr	r3, [pc, #148]	; (8001f18 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e82:	61bb      	str	r3, [r7, #24]
 8001e84:	e004      	b.n	8001e90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d101      	bne.n	8001e90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e8c:	4b23      	ldr	r3, [pc, #140]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x114>)
 8001e8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	2b0c      	cmp	r3, #12
 8001e94:	d134      	bne.n	8001f00 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e96:	4b1e      	ldr	r3, [pc, #120]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d003      	beq.n	8001eae <HAL_RCC_GetSysClockFreq+0xa6>
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	2b03      	cmp	r3, #3
 8001eaa:	d003      	beq.n	8001eb4 <HAL_RCC_GetSysClockFreq+0xac>
 8001eac:	e005      	b.n	8001eba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001eae:	4b1a      	ldr	r3, [pc, #104]	; (8001f18 <HAL_RCC_GetSysClockFreq+0x110>)
 8001eb0:	617b      	str	r3, [r7, #20]
      break;
 8001eb2:	e005      	b.n	8001ec0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001eb4:	4b19      	ldr	r3, [pc, #100]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x114>)
 8001eb6:	617b      	str	r3, [r7, #20]
      break;
 8001eb8:	e002      	b.n	8001ec0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	617b      	str	r3, [r7, #20]
      break;
 8001ebe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ec0:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	091b      	lsrs	r3, r3, #4
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	3301      	adds	r3, #1
 8001ecc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	0a1b      	lsrs	r3, r3, #8
 8001ed4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	fb03 f202 	mul.w	r2, r3, r2
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	0e5b      	lsrs	r3, r3, #25
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001efe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f00:	69bb      	ldr	r3, [r7, #24]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3724      	adds	r7, #36	; 0x24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	40021000 	.word	0x40021000
 8001f14:	08004930 	.word	0x08004930
 8001f18:	00f42400 	.word	0x00f42400
 8001f1c:	007a1200 	.word	0x007a1200

08001f20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f24:	4b03      	ldr	r3, [pc, #12]	; (8001f34 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f26:	681b      	ldr	r3, [r3, #0]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	20000000 	.word	0x20000000

08001f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f3c:	f7ff fff0 	bl	8001f20 <HAL_RCC_GetHCLKFreq>
 8001f40:	4602      	mov	r2, r0
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	0a1b      	lsrs	r3, r3, #8
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	4904      	ldr	r1, [pc, #16]	; (8001f60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f4e:	5ccb      	ldrb	r3, [r1, r3]
 8001f50:	f003 031f 	and.w	r3, r3, #31
 8001f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	08004928 	.word	0x08004928

08001f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f68:	f7ff ffda 	bl	8001f20 <HAL_RCC_GetHCLKFreq>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	0adb      	lsrs	r3, r3, #11
 8001f74:	f003 0307 	and.w	r3, r3, #7
 8001f78:	4904      	ldr	r1, [pc, #16]	; (8001f8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f7a:	5ccb      	ldrb	r3, [r1, r3]
 8001f7c:	f003 031f 	and.w	r3, r3, #31
 8001f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	08004928 	.word	0x08004928

08001f90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f98:	2300      	movs	r3, #0
 8001f9a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f9c:	4b2a      	ldr	r3, [pc, #168]	; (8002048 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001fa8:	f7ff f9ee 	bl	8001388 <HAL_PWREx_GetVoltageRange>
 8001fac:	6178      	str	r0, [r7, #20]
 8001fae:	e014      	b.n	8001fda <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fb0:	4b25      	ldr	r3, [pc, #148]	; (8002048 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb4:	4a24      	ldr	r2, [pc, #144]	; (8002048 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fba:	6593      	str	r3, [r2, #88]	; 0x58
 8001fbc:	4b22      	ldr	r3, [pc, #136]	; (8002048 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001fc8:	f7ff f9de 	bl	8001388 <HAL_PWREx_GetVoltageRange>
 8001fcc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001fce:	4b1e      	ldr	r3, [pc, #120]	; (8002048 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd2:	4a1d      	ldr	r2, [pc, #116]	; (8002048 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fd8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fe0:	d10b      	bne.n	8001ffa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b80      	cmp	r3, #128	; 0x80
 8001fe6:	d919      	bls.n	800201c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2ba0      	cmp	r3, #160	; 0xa0
 8001fec:	d902      	bls.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fee:	2302      	movs	r3, #2
 8001ff0:	613b      	str	r3, [r7, #16]
 8001ff2:	e013      	b.n	800201c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	613b      	str	r3, [r7, #16]
 8001ff8:	e010      	b.n	800201c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b80      	cmp	r3, #128	; 0x80
 8001ffe:	d902      	bls.n	8002006 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002000:	2303      	movs	r3, #3
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	e00a      	b.n	800201c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b80      	cmp	r3, #128	; 0x80
 800200a:	d102      	bne.n	8002012 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800200c:	2302      	movs	r3, #2
 800200e:	613b      	str	r3, [r7, #16]
 8002010:	e004      	b.n	800201c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b70      	cmp	r3, #112	; 0x70
 8002016:	d101      	bne.n	800201c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002018:	2301      	movs	r3, #1
 800201a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800201c:	4b0b      	ldr	r3, [pc, #44]	; (800204c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f023 0207 	bic.w	r2, r3, #7
 8002024:	4909      	ldr	r1, [pc, #36]	; (800204c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4313      	orrs	r3, r2
 800202a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800202c:	4b07      	ldr	r3, [pc, #28]	; (800204c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	429a      	cmp	r2, r3
 8002038:	d001      	beq.n	800203e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40021000 	.word	0x40021000
 800204c:	40022000 	.word	0x40022000

08002050 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002058:	2300      	movs	r3, #0
 800205a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800205c:	2300      	movs	r3, #0
 800205e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002068:	2b00      	cmp	r3, #0
 800206a:	d041      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002070:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002074:	d02a      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002076:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800207a:	d824      	bhi.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800207c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002080:	d008      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002082:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002086:	d81e      	bhi.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00a      	beq.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800208c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002090:	d010      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002092:	e018      	b.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002094:	4b86      	ldr	r3, [pc, #536]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	4a85      	ldr	r2, [pc, #532]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800209a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800209e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020a0:	e015      	b.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	3304      	adds	r3, #4
 80020a6:	2100      	movs	r1, #0
 80020a8:	4618      	mov	r0, r3
 80020aa:	f000 fabb 	bl	8002624 <RCCEx_PLLSAI1_Config>
 80020ae:	4603      	mov	r3, r0
 80020b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020b2:	e00c      	b.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3320      	adds	r3, #32
 80020b8:	2100      	movs	r1, #0
 80020ba:	4618      	mov	r0, r3
 80020bc:	f000 fba6 	bl	800280c <RCCEx_PLLSAI2_Config>
 80020c0:	4603      	mov	r3, r0
 80020c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020c4:	e003      	b.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	74fb      	strb	r3, [r7, #19]
      break;
 80020ca:	e000      	b.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80020cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020ce:	7cfb      	ldrb	r3, [r7, #19]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d10b      	bne.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020d4:	4b76      	ldr	r3, [pc, #472]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020e2:	4973      	ldr	r1, [pc, #460]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80020ea:	e001      	b.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020ec:	7cfb      	ldrb	r3, [r7, #19]
 80020ee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d041      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002100:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002104:	d02a      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002106:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800210a:	d824      	bhi.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800210c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002110:	d008      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002112:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002116:	d81e      	bhi.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00a      	beq.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800211c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002120:	d010      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002122:	e018      	b.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002124:	4b62      	ldr	r3, [pc, #392]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	4a61      	ldr	r2, [pc, #388]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800212a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800212e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002130:	e015      	b.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	3304      	adds	r3, #4
 8002136:	2100      	movs	r1, #0
 8002138:	4618      	mov	r0, r3
 800213a:	f000 fa73 	bl	8002624 <RCCEx_PLLSAI1_Config>
 800213e:	4603      	mov	r3, r0
 8002140:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002142:	e00c      	b.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3320      	adds	r3, #32
 8002148:	2100      	movs	r1, #0
 800214a:	4618      	mov	r0, r3
 800214c:	f000 fb5e 	bl	800280c <RCCEx_PLLSAI2_Config>
 8002150:	4603      	mov	r3, r0
 8002152:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002154:	e003      	b.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	74fb      	strb	r3, [r7, #19]
      break;
 800215a:	e000      	b.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800215c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800215e:	7cfb      	ldrb	r3, [r7, #19]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10b      	bne.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002164:	4b52      	ldr	r3, [pc, #328]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002172:	494f      	ldr	r1, [pc, #316]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002174:	4313      	orrs	r3, r2
 8002176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800217a:	e001      	b.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800217c:	7cfb      	ldrb	r3, [r7, #19]
 800217e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002188:	2b00      	cmp	r3, #0
 800218a:	f000 80a0 	beq.w	80022ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800218e:	2300      	movs	r3, #0
 8002190:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002192:	4b47      	ldr	r3, [pc, #284]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800219e:	2301      	movs	r3, #1
 80021a0:	e000      	b.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80021a2:	2300      	movs	r3, #0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00d      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021a8:	4b41      	ldr	r3, [pc, #260]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ac:	4a40      	ldr	r2, [pc, #256]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b2:	6593      	str	r3, [r2, #88]	; 0x58
 80021b4:	4b3e      	ldr	r3, [pc, #248]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021bc:	60bb      	str	r3, [r7, #8]
 80021be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021c0:	2301      	movs	r3, #1
 80021c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021c4:	4b3b      	ldr	r3, [pc, #236]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a3a      	ldr	r2, [pc, #232]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021d0:	f7fe fe02 	bl	8000dd8 <HAL_GetTick>
 80021d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021d6:	e009      	b.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d8:	f7fe fdfe 	bl	8000dd8 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d902      	bls.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	74fb      	strb	r3, [r7, #19]
        break;
 80021ea:	e005      	b.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021ec:	4b31      	ldr	r3, [pc, #196]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0ef      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80021f8:	7cfb      	ldrb	r3, [r7, #19]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d15c      	bne.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021fe:	4b2c      	ldr	r3, [pc, #176]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002204:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002208:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d01f      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	429a      	cmp	r2, r3
 800221a:	d019      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800221c:	4b24      	ldr	r3, [pc, #144]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800221e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002226:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002228:	4b21      	ldr	r3, [pc, #132]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800222a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222e:	4a20      	ldr	r2, [pc, #128]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002234:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002238:	4b1d      	ldr	r3, [pc, #116]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800223a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800223e:	4a1c      	ldr	r2, [pc, #112]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002240:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002248:	4a19      	ldr	r2, [pc, #100]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d016      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225a:	f7fe fdbd 	bl	8000dd8 <HAL_GetTick>
 800225e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002260:	e00b      	b.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002262:	f7fe fdb9 	bl	8000dd8 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002270:	4293      	cmp	r3, r2
 8002272:	d902      	bls.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	74fb      	strb	r3, [r7, #19]
            break;
 8002278:	e006      	b.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800227a:	4b0d      	ldr	r3, [pc, #52]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800227c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0ec      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002288:	7cfb      	ldrb	r3, [r7, #19]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10c      	bne.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800228e:	4b08      	ldr	r3, [pc, #32]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002294:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800229e:	4904      	ldr	r1, [pc, #16]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80022a6:	e009      	b.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80022a8:	7cfb      	ldrb	r3, [r7, #19]
 80022aa:	74bb      	strb	r3, [r7, #18]
 80022ac:	e006      	b.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80022ae:	bf00      	nop
 80022b0:	40021000 	.word	0x40021000
 80022b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022b8:	7cfb      	ldrb	r3, [r7, #19]
 80022ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022bc:	7c7b      	ldrb	r3, [r7, #17]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d105      	bne.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022c2:	4b9e      	ldr	r3, [pc, #632]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c6:	4a9d      	ldr	r2, [pc, #628]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00a      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022da:	4b98      	ldr	r3, [pc, #608]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e0:	f023 0203 	bic.w	r2, r3, #3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e8:	4994      	ldr	r1, [pc, #592]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00a      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022fc:	4b8f      	ldr	r3, [pc, #572]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002302:	f023 020c 	bic.w	r2, r3, #12
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800230a:	498c      	ldr	r1, [pc, #560]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230c:	4313      	orrs	r3, r2
 800230e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0304 	and.w	r3, r3, #4
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00a      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800231e:	4b87      	ldr	r3, [pc, #540]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002324:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	4983      	ldr	r1, [pc, #524]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800232e:	4313      	orrs	r3, r2
 8002330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00a      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002340:	4b7e      	ldr	r3, [pc, #504]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002346:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	497b      	ldr	r1, [pc, #492]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002350:	4313      	orrs	r3, r2
 8002352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0310 	and.w	r3, r3, #16
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00a      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002362:	4b76      	ldr	r3, [pc, #472]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002368:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002370:	4972      	ldr	r1, [pc, #456]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002372:	4313      	orrs	r3, r2
 8002374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0320 	and.w	r3, r3, #32
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00a      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002384:	4b6d      	ldr	r3, [pc, #436]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002392:	496a      	ldr	r1, [pc, #424]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002394:	4313      	orrs	r3, r2
 8002396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00a      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023a6:	4b65      	ldr	r3, [pc, #404]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b4:	4961      	ldr	r1, [pc, #388]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00a      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80023c8:	4b5c      	ldr	r3, [pc, #368]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023d6:	4959      	ldr	r1, [pc, #356]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00a      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023ea:	4b54      	ldr	r3, [pc, #336]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023f8:	4950      	ldr	r1, [pc, #320]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00a      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800240c:	4b4b      	ldr	r3, [pc, #300]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002412:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241a:	4948      	ldr	r1, [pc, #288]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241c:	4313      	orrs	r3, r2
 800241e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00a      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800242e:	4b43      	ldr	r3, [pc, #268]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002434:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243c:	493f      	ldr	r1, [pc, #252]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243e:	4313      	orrs	r3, r2
 8002440:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d028      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002450:	4b3a      	ldr	r3, [pc, #232]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002456:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800245e:	4937      	ldr	r1, [pc, #220]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002460:	4313      	orrs	r3, r2
 8002462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800246a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800246e:	d106      	bne.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002470:	4b32      	ldr	r3, [pc, #200]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	4a31      	ldr	r2, [pc, #196]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002476:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800247a:	60d3      	str	r3, [r2, #12]
 800247c:	e011      	b.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002482:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002486:	d10c      	bne.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3304      	adds	r3, #4
 800248c:	2101      	movs	r1, #1
 800248e:	4618      	mov	r0, r3
 8002490:	f000 f8c8 	bl	8002624 <RCCEx_PLLSAI1_Config>
 8002494:	4603      	mov	r3, r0
 8002496:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002498:	7cfb      	ldrb	r3, [r7, #19]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800249e:	7cfb      	ldrb	r3, [r7, #19]
 80024a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d028      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80024ae:	4b23      	ldr	r3, [pc, #140]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024bc:	491f      	ldr	r1, [pc, #124]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024cc:	d106      	bne.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024ce:	4b1b      	ldr	r3, [pc, #108]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	4a1a      	ldr	r2, [pc, #104]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024d8:	60d3      	str	r3, [r2, #12]
 80024da:	e011      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024e4:	d10c      	bne.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	3304      	adds	r3, #4
 80024ea:	2101      	movs	r1, #1
 80024ec:	4618      	mov	r0, r3
 80024ee:	f000 f899 	bl	8002624 <RCCEx_PLLSAI1_Config>
 80024f2:	4603      	mov	r3, r0
 80024f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024f6:	7cfb      	ldrb	r3, [r7, #19]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80024fc:	7cfb      	ldrb	r3, [r7, #19]
 80024fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d02b      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800250c:	4b0b      	ldr	r3, [pc, #44]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800250e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002512:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800251a:	4908      	ldr	r1, [pc, #32]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800251c:	4313      	orrs	r3, r2
 800251e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002526:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800252a:	d109      	bne.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800252c:	4b03      	ldr	r3, [pc, #12]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	4a02      	ldr	r2, [pc, #8]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002532:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002536:	60d3      	str	r3, [r2, #12]
 8002538:	e014      	b.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800253a:	bf00      	nop
 800253c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002544:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002548:	d10c      	bne.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3304      	adds	r3, #4
 800254e:	2101      	movs	r1, #1
 8002550:	4618      	mov	r0, r3
 8002552:	f000 f867 	bl	8002624 <RCCEx_PLLSAI1_Config>
 8002556:	4603      	mov	r3, r0
 8002558:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800255a:	7cfb      	ldrb	r3, [r7, #19]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002560:	7cfb      	ldrb	r3, [r7, #19]
 8002562:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d02f      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002570:	4b2b      	ldr	r3, [pc, #172]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002576:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800257e:	4928      	ldr	r1, [pc, #160]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002580:	4313      	orrs	r3, r2
 8002582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800258a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800258e:	d10d      	bne.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3304      	adds	r3, #4
 8002594:	2102      	movs	r1, #2
 8002596:	4618      	mov	r0, r3
 8002598:	f000 f844 	bl	8002624 <RCCEx_PLLSAI1_Config>
 800259c:	4603      	mov	r3, r0
 800259e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025a0:	7cfb      	ldrb	r3, [r7, #19]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d014      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80025a6:	7cfb      	ldrb	r3, [r7, #19]
 80025a8:	74bb      	strb	r3, [r7, #18]
 80025aa:	e011      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025b4:	d10c      	bne.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	3320      	adds	r3, #32
 80025ba:	2102      	movs	r1, #2
 80025bc:	4618      	mov	r0, r3
 80025be:	f000 f925 	bl	800280c <RCCEx_PLLSAI2_Config>
 80025c2:	4603      	mov	r3, r0
 80025c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025c6:	7cfb      	ldrb	r3, [r7, #19]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80025cc:	7cfb      	ldrb	r3, [r7, #19]
 80025ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00a      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80025dc:	4b10      	ldr	r3, [pc, #64]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025ea:	490d      	ldr	r1, [pc, #52]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00b      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80025fe:	4b08      	ldr	r3, [pc, #32]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002604:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800260e:	4904      	ldr	r1, [pc, #16]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002610:	4313      	orrs	r3, r2
 8002612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002616:	7cbb      	ldrb	r3, [r7, #18]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40021000 	.word	0x40021000

08002624 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800262e:	2300      	movs	r3, #0
 8002630:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002632:	4b75      	ldr	r3, [pc, #468]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d018      	beq.n	8002670 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800263e:	4b72      	ldr	r3, [pc, #456]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	f003 0203 	and.w	r2, r3, #3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d10d      	bne.n	800266a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
       ||
 8002652:	2b00      	cmp	r3, #0
 8002654:	d009      	beq.n	800266a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002656:	4b6c      	ldr	r3, [pc, #432]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	091b      	lsrs	r3, r3, #4
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	1c5a      	adds	r2, r3, #1
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
       ||
 8002666:	429a      	cmp	r2, r3
 8002668:	d047      	beq.n	80026fa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	73fb      	strb	r3, [r7, #15]
 800266e:	e044      	b.n	80026fa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b03      	cmp	r3, #3
 8002676:	d018      	beq.n	80026aa <RCCEx_PLLSAI1_Config+0x86>
 8002678:	2b03      	cmp	r3, #3
 800267a:	d825      	bhi.n	80026c8 <RCCEx_PLLSAI1_Config+0xa4>
 800267c:	2b01      	cmp	r3, #1
 800267e:	d002      	beq.n	8002686 <RCCEx_PLLSAI1_Config+0x62>
 8002680:	2b02      	cmp	r3, #2
 8002682:	d009      	beq.n	8002698 <RCCEx_PLLSAI1_Config+0x74>
 8002684:	e020      	b.n	80026c8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002686:	4b60      	ldr	r3, [pc, #384]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d11d      	bne.n	80026ce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002696:	e01a      	b.n	80026ce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002698:	4b5b      	ldr	r3, [pc, #364]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d116      	bne.n	80026d2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026a8:	e013      	b.n	80026d2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026aa:	4b57      	ldr	r3, [pc, #348]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10f      	bne.n	80026d6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026b6:	4b54      	ldr	r3, [pc, #336]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d109      	bne.n	80026d6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026c6:	e006      	b.n	80026d6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	73fb      	strb	r3, [r7, #15]
      break;
 80026cc:	e004      	b.n	80026d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026ce:	bf00      	nop
 80026d0:	e002      	b.n	80026d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026d2:	bf00      	nop
 80026d4:	e000      	b.n	80026d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10d      	bne.n	80026fa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026de:	4b4a      	ldr	r3, [pc, #296]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6819      	ldr	r1, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	011b      	lsls	r3, r3, #4
 80026f2:	430b      	orrs	r3, r1
 80026f4:	4944      	ldr	r1, [pc, #272]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d17d      	bne.n	80027fc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002700:	4b41      	ldr	r3, [pc, #260]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a40      	ldr	r2, [pc, #256]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002706:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800270a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800270c:	f7fe fb64 	bl	8000dd8 <HAL_GetTick>
 8002710:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002712:	e009      	b.n	8002728 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002714:	f7fe fb60 	bl	8000dd8 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d902      	bls.n	8002728 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	73fb      	strb	r3, [r7, #15]
        break;
 8002726:	e005      	b.n	8002734 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002728:	4b37      	ldr	r3, [pc, #220]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1ef      	bne.n	8002714 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002734:	7bfb      	ldrb	r3, [r7, #15]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d160      	bne.n	80027fc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d111      	bne.n	8002764 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002740:	4b31      	ldr	r3, [pc, #196]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002748:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6892      	ldr	r2, [r2, #8]
 8002750:	0211      	lsls	r1, r2, #8
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	68d2      	ldr	r2, [r2, #12]
 8002756:	0912      	lsrs	r2, r2, #4
 8002758:	0452      	lsls	r2, r2, #17
 800275a:	430a      	orrs	r2, r1
 800275c:	492a      	ldr	r1, [pc, #168]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 800275e:	4313      	orrs	r3, r2
 8002760:	610b      	str	r3, [r1, #16]
 8002762:	e027      	b.n	80027b4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d112      	bne.n	8002790 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800276a:	4b27      	ldr	r3, [pc, #156]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002772:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6892      	ldr	r2, [r2, #8]
 800277a:	0211      	lsls	r1, r2, #8
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6912      	ldr	r2, [r2, #16]
 8002780:	0852      	lsrs	r2, r2, #1
 8002782:	3a01      	subs	r2, #1
 8002784:	0552      	lsls	r2, r2, #21
 8002786:	430a      	orrs	r2, r1
 8002788:	491f      	ldr	r1, [pc, #124]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 800278a:	4313      	orrs	r3, r2
 800278c:	610b      	str	r3, [r1, #16]
 800278e:	e011      	b.n	80027b4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002790:	4b1d      	ldr	r3, [pc, #116]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002798:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6892      	ldr	r2, [r2, #8]
 80027a0:	0211      	lsls	r1, r2, #8
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	6952      	ldr	r2, [r2, #20]
 80027a6:	0852      	lsrs	r2, r2, #1
 80027a8:	3a01      	subs	r2, #1
 80027aa:	0652      	lsls	r2, r2, #25
 80027ac:	430a      	orrs	r2, r1
 80027ae:	4916      	ldr	r1, [pc, #88]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80027b4:	4b14      	ldr	r3, [pc, #80]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a13      	ldr	r2, [pc, #76]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c0:	f7fe fb0a 	bl	8000dd8 <HAL_GetTick>
 80027c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027c6:	e009      	b.n	80027dc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027c8:	f7fe fb06 	bl	8000dd8 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d902      	bls.n	80027dc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	73fb      	strb	r3, [r7, #15]
          break;
 80027da:	e005      	b.n	80027e8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027dc:	4b0a      	ldr	r3, [pc, #40]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0ef      	beq.n	80027c8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80027e8:	7bfb      	ldrb	r3, [r7, #15]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d106      	bne.n	80027fc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80027ee:	4b06      	ldr	r3, [pc, #24]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027f0:	691a      	ldr	r2, [r3, #16]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	4904      	ldr	r1, [pc, #16]	; (8002808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80027fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40021000 	.word	0x40021000

0800280c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002816:	2300      	movs	r3, #0
 8002818:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800281a:	4b6a      	ldr	r3, [pc, #424]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	f003 0303 	and.w	r3, r3, #3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d018      	beq.n	8002858 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002826:	4b67      	ldr	r3, [pc, #412]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	f003 0203 	and.w	r2, r3, #3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	d10d      	bne.n	8002852 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
       ||
 800283a:	2b00      	cmp	r3, #0
 800283c:	d009      	beq.n	8002852 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800283e:	4b61      	ldr	r3, [pc, #388]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	091b      	lsrs	r3, r3, #4
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
       ||
 800284e:	429a      	cmp	r2, r3
 8002850:	d047      	beq.n	80028e2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	73fb      	strb	r3, [r7, #15]
 8002856:	e044      	b.n	80028e2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2b03      	cmp	r3, #3
 800285e:	d018      	beq.n	8002892 <RCCEx_PLLSAI2_Config+0x86>
 8002860:	2b03      	cmp	r3, #3
 8002862:	d825      	bhi.n	80028b0 <RCCEx_PLLSAI2_Config+0xa4>
 8002864:	2b01      	cmp	r3, #1
 8002866:	d002      	beq.n	800286e <RCCEx_PLLSAI2_Config+0x62>
 8002868:	2b02      	cmp	r3, #2
 800286a:	d009      	beq.n	8002880 <RCCEx_PLLSAI2_Config+0x74>
 800286c:	e020      	b.n	80028b0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800286e:	4b55      	ldr	r3, [pc, #340]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d11d      	bne.n	80028b6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800287e:	e01a      	b.n	80028b6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002880:	4b50      	ldr	r3, [pc, #320]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002888:	2b00      	cmp	r3, #0
 800288a:	d116      	bne.n	80028ba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002890:	e013      	b.n	80028ba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002892:	4b4c      	ldr	r3, [pc, #304]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10f      	bne.n	80028be <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800289e:	4b49      	ldr	r3, [pc, #292]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d109      	bne.n	80028be <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028ae:	e006      	b.n	80028be <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	73fb      	strb	r3, [r7, #15]
      break;
 80028b4:	e004      	b.n	80028c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80028b6:	bf00      	nop
 80028b8:	e002      	b.n	80028c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80028ba:	bf00      	nop
 80028bc:	e000      	b.n	80028c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80028be:	bf00      	nop
    }

    if(status == HAL_OK)
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10d      	bne.n	80028e2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028c6:	4b3f      	ldr	r3, [pc, #252]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6819      	ldr	r1, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	011b      	lsls	r3, r3, #4
 80028da:	430b      	orrs	r3, r1
 80028dc:	4939      	ldr	r1, [pc, #228]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028e2:	7bfb      	ldrb	r3, [r7, #15]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d167      	bne.n	80029b8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80028e8:	4b36      	ldr	r3, [pc, #216]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a35      	ldr	r2, [pc, #212]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028f4:	f7fe fa70 	bl	8000dd8 <HAL_GetTick>
 80028f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028fa:	e009      	b.n	8002910 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028fc:	f7fe fa6c 	bl	8000dd8 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d902      	bls.n	8002910 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	73fb      	strb	r3, [r7, #15]
        break;
 800290e:	e005      	b.n	800291c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002910:	4b2c      	ldr	r3, [pc, #176]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1ef      	bne.n	80028fc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800291c:	7bfb      	ldrb	r3, [r7, #15]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d14a      	bne.n	80029b8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d111      	bne.n	800294c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002928:	4b26      	ldr	r3, [pc, #152]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6892      	ldr	r2, [r2, #8]
 8002938:	0211      	lsls	r1, r2, #8
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	68d2      	ldr	r2, [r2, #12]
 800293e:	0912      	lsrs	r2, r2, #4
 8002940:	0452      	lsls	r2, r2, #17
 8002942:	430a      	orrs	r2, r1
 8002944:	491f      	ldr	r1, [pc, #124]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002946:	4313      	orrs	r3, r2
 8002948:	614b      	str	r3, [r1, #20]
 800294a:	e011      	b.n	8002970 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800294c:	4b1d      	ldr	r3, [pc, #116]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002954:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	6892      	ldr	r2, [r2, #8]
 800295c:	0211      	lsls	r1, r2, #8
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	6912      	ldr	r2, [r2, #16]
 8002962:	0852      	lsrs	r2, r2, #1
 8002964:	3a01      	subs	r2, #1
 8002966:	0652      	lsls	r2, r2, #25
 8002968:	430a      	orrs	r2, r1
 800296a:	4916      	ldr	r1, [pc, #88]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800296c:	4313      	orrs	r3, r2
 800296e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002970:	4b14      	ldr	r3, [pc, #80]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a13      	ldr	r2, [pc, #76]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800297a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800297c:	f7fe fa2c 	bl	8000dd8 <HAL_GetTick>
 8002980:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002982:	e009      	b.n	8002998 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002984:	f7fe fa28 	bl	8000dd8 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d902      	bls.n	8002998 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	73fb      	strb	r3, [r7, #15]
          break;
 8002996:	e005      	b.n	80029a4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002998:	4b0a      	ldr	r3, [pc, #40]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0ef      	beq.n	8002984 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d106      	bne.n	80029b8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80029aa:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ac:	695a      	ldr	r2, [r3, #20]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	4904      	ldr	r1, [pc, #16]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40021000 	.word	0x40021000

080029c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e040      	b.n	8002a5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d106      	bne.n	80029f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7fe f83a 	bl	8000a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2224      	movs	r2, #36	; 0x24
 80029f4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0201 	bic.w	r2, r2, #1
 8002a04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f922 	bl	8002c50 <UART_SetConfig>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d101      	bne.n	8002a16 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e022      	b.n	8002a5c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d002      	beq.n	8002a24 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 fbce 	bl	80031c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689a      	ldr	r2, [r3, #8]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0201 	orr.w	r2, r2, #1
 8002a52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 fc55 	bl	8003304 <UART_CheckIdleState>
 8002a5a:	4603      	mov	r3, r0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08a      	sub	sp, #40	; 0x28
 8002a68:	af02      	add	r7, sp, #8
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	603b      	str	r3, [r7, #0]
 8002a70:	4613      	mov	r3, r2
 8002a72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a78:	2b20      	cmp	r3, #32
 8002a7a:	f040 8082 	bne.w	8002b82 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d002      	beq.n	8002a8a <HAL_UART_Transmit+0x26>
 8002a84:	88fb      	ldrh	r3, [r7, #6]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e07a      	b.n	8002b84 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d101      	bne.n	8002a9c <HAL_UART_Transmit+0x38>
 8002a98:	2302      	movs	r3, #2
 8002a9a:	e073      	b.n	8002b84 <HAL_UART_Transmit+0x120>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2221      	movs	r2, #33	; 0x21
 8002ab0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ab2:	f7fe f991 	bl	8000dd8 <HAL_GetTick>
 8002ab6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	88fa      	ldrh	r2, [r7, #6]
 8002abc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	88fa      	ldrh	r2, [r7, #6]
 8002ac4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ad0:	d108      	bne.n	8002ae4 <HAL_UART_Transmit+0x80>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d104      	bne.n	8002ae4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002ada:	2300      	movs	r3, #0
 8002adc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	61bb      	str	r3, [r7, #24]
 8002ae2:	e003      	b.n	8002aec <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002af4:	e02d      	b.n	8002b52 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	2200      	movs	r2, #0
 8002afe:	2180      	movs	r1, #128	; 0x80
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 fc48 	bl	8003396 <UART_WaitOnFlagUntilTimeout>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e039      	b.n	8002b84 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10b      	bne.n	8002b2e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	881a      	ldrh	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b22:	b292      	uxth	r2, r2
 8002b24:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	3302      	adds	r3, #2
 8002b2a:	61bb      	str	r3, [r7, #24]
 8002b2c:	e008      	b.n	8002b40 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	781a      	ldrb	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	b292      	uxth	r2, r2
 8002b38:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1cb      	bne.n	8002af6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	2200      	movs	r2, #0
 8002b66:	2140      	movs	r1, #64	; 0x40
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f000 fc14 	bl	8003396 <UART_WaitOnFlagUntilTimeout>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e005      	b.n	8002b84 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	e000      	b.n	8002b84 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002b82:	2302      	movs	r3, #2
  }
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3720      	adds	r7, #32
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b08a      	sub	sp, #40	; 0x28
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	4613      	mov	r3, r2
 8002b98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b9e:	2b20      	cmp	r3, #32
 8002ba0:	d142      	bne.n	8002c28 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d002      	beq.n	8002bae <HAL_UART_Receive_IT+0x22>
 8002ba8:	88fb      	ldrh	r3, [r7, #6]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e03b      	b.n	8002c2a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d101      	bne.n	8002bc0 <HAL_UART_Receive_IT+0x34>
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	e034      	b.n	8002c2a <HAL_UART_Receive_IT+0x9e>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a18      	ldr	r2, [pc, #96]	; (8002c34 <HAL_UART_Receive_IT+0xa8>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d01f      	beq.n	8002c18 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d018      	beq.n	8002c18 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	e853 3f00 	ldrex	r3, [r3]
 8002bf2:	613b      	str	r3, [r7, #16]
   return(result);
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	461a      	mov	r2, r3
 8002c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c04:	623b      	str	r3, [r7, #32]
 8002c06:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c08:	69f9      	ldr	r1, [r7, #28]
 8002c0a:	6a3a      	ldr	r2, [r7, #32]
 8002c0c:	e841 2300 	strex	r3, r2, [r1]
 8002c10:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1e6      	bne.n	8002be6 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002c18:	88fb      	ldrh	r3, [r7, #6]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	68b9      	ldr	r1, [r7, #8]
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 fc7e 	bl	8003520 <UART_Start_Receive_IT>
 8002c24:	4603      	mov	r3, r0
 8002c26:	e000      	b.n	8002c2a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002c28:	2302      	movs	r3, #2
  }
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3728      	adds	r7, #40	; 0x28
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40008000 	.word	0x40008000

08002c38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	460b      	mov	r3, r1
 8002c42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c54:	b08a      	sub	sp, #40	; 0x28
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	69db      	ldr	r3, [r3, #28]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	4ba4      	ldr	r3, [pc, #656]	; (8002f10 <UART_SetConfig+0x2c0>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	6812      	ldr	r2, [r2, #0]
 8002c86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c88:	430b      	orrs	r3, r1
 8002c8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	68da      	ldr	r2, [r3, #12]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a99      	ldr	r2, [pc, #612]	; (8002f14 <UART_SetConfig+0x2c4>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d004      	beq.n	8002cbc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a90      	ldr	r2, [pc, #576]	; (8002f18 <UART_SetConfig+0x2c8>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d126      	bne.n	8002d28 <UART_SetConfig+0xd8>
 8002cda:	4b90      	ldr	r3, [pc, #576]	; (8002f1c <UART_SetConfig+0x2cc>)
 8002cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce0:	f003 0303 	and.w	r3, r3, #3
 8002ce4:	2b03      	cmp	r3, #3
 8002ce6:	d81b      	bhi.n	8002d20 <UART_SetConfig+0xd0>
 8002ce8:	a201      	add	r2, pc, #4	; (adr r2, 8002cf0 <UART_SetConfig+0xa0>)
 8002cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cee:	bf00      	nop
 8002cf0:	08002d01 	.word	0x08002d01
 8002cf4:	08002d11 	.word	0x08002d11
 8002cf8:	08002d09 	.word	0x08002d09
 8002cfc:	08002d19 	.word	0x08002d19
 8002d00:	2301      	movs	r3, #1
 8002d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d06:	e116      	b.n	8002f36 <UART_SetConfig+0x2e6>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d0e:	e112      	b.n	8002f36 <UART_SetConfig+0x2e6>
 8002d10:	2304      	movs	r3, #4
 8002d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d16:	e10e      	b.n	8002f36 <UART_SetConfig+0x2e6>
 8002d18:	2308      	movs	r3, #8
 8002d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d1e:	e10a      	b.n	8002f36 <UART_SetConfig+0x2e6>
 8002d20:	2310      	movs	r3, #16
 8002d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d26:	e106      	b.n	8002f36 <UART_SetConfig+0x2e6>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a7c      	ldr	r2, [pc, #496]	; (8002f20 <UART_SetConfig+0x2d0>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d138      	bne.n	8002da4 <UART_SetConfig+0x154>
 8002d32:	4b7a      	ldr	r3, [pc, #488]	; (8002f1c <UART_SetConfig+0x2cc>)
 8002d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d38:	f003 030c 	and.w	r3, r3, #12
 8002d3c:	2b0c      	cmp	r3, #12
 8002d3e:	d82d      	bhi.n	8002d9c <UART_SetConfig+0x14c>
 8002d40:	a201      	add	r2, pc, #4	; (adr r2, 8002d48 <UART_SetConfig+0xf8>)
 8002d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d46:	bf00      	nop
 8002d48:	08002d7d 	.word	0x08002d7d
 8002d4c:	08002d9d 	.word	0x08002d9d
 8002d50:	08002d9d 	.word	0x08002d9d
 8002d54:	08002d9d 	.word	0x08002d9d
 8002d58:	08002d8d 	.word	0x08002d8d
 8002d5c:	08002d9d 	.word	0x08002d9d
 8002d60:	08002d9d 	.word	0x08002d9d
 8002d64:	08002d9d 	.word	0x08002d9d
 8002d68:	08002d85 	.word	0x08002d85
 8002d6c:	08002d9d 	.word	0x08002d9d
 8002d70:	08002d9d 	.word	0x08002d9d
 8002d74:	08002d9d 	.word	0x08002d9d
 8002d78:	08002d95 	.word	0x08002d95
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d82:	e0d8      	b.n	8002f36 <UART_SetConfig+0x2e6>
 8002d84:	2302      	movs	r3, #2
 8002d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d8a:	e0d4      	b.n	8002f36 <UART_SetConfig+0x2e6>
 8002d8c:	2304      	movs	r3, #4
 8002d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d92:	e0d0      	b.n	8002f36 <UART_SetConfig+0x2e6>
 8002d94:	2308      	movs	r3, #8
 8002d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d9a:	e0cc      	b.n	8002f36 <UART_SetConfig+0x2e6>
 8002d9c:	2310      	movs	r3, #16
 8002d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002da2:	e0c8      	b.n	8002f36 <UART_SetConfig+0x2e6>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a5e      	ldr	r2, [pc, #376]	; (8002f24 <UART_SetConfig+0x2d4>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d125      	bne.n	8002dfa <UART_SetConfig+0x1aa>
 8002dae:	4b5b      	ldr	r3, [pc, #364]	; (8002f1c <UART_SetConfig+0x2cc>)
 8002db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002db8:	2b30      	cmp	r3, #48	; 0x30
 8002dba:	d016      	beq.n	8002dea <UART_SetConfig+0x19a>
 8002dbc:	2b30      	cmp	r3, #48	; 0x30
 8002dbe:	d818      	bhi.n	8002df2 <UART_SetConfig+0x1a2>
 8002dc0:	2b20      	cmp	r3, #32
 8002dc2:	d00a      	beq.n	8002dda <UART_SetConfig+0x18a>
 8002dc4:	2b20      	cmp	r3, #32
 8002dc6:	d814      	bhi.n	8002df2 <UART_SetConfig+0x1a2>
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d002      	beq.n	8002dd2 <UART_SetConfig+0x182>
 8002dcc:	2b10      	cmp	r3, #16
 8002dce:	d008      	beq.n	8002de2 <UART_SetConfig+0x192>
 8002dd0:	e00f      	b.n	8002df2 <UART_SetConfig+0x1a2>
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dd8:	e0ad      	b.n	8002f36 <UART_SetConfig+0x2e6>
 8002dda:	2302      	movs	r3, #2
 8002ddc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002de0:	e0a9      	b.n	8002f36 <UART_SetConfig+0x2e6>
 8002de2:	2304      	movs	r3, #4
 8002de4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002de8:	e0a5      	b.n	8002f36 <UART_SetConfig+0x2e6>
 8002dea:	2308      	movs	r3, #8
 8002dec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002df0:	e0a1      	b.n	8002f36 <UART_SetConfig+0x2e6>
 8002df2:	2310      	movs	r3, #16
 8002df4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002df8:	e09d      	b.n	8002f36 <UART_SetConfig+0x2e6>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a4a      	ldr	r2, [pc, #296]	; (8002f28 <UART_SetConfig+0x2d8>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d125      	bne.n	8002e50 <UART_SetConfig+0x200>
 8002e04:	4b45      	ldr	r3, [pc, #276]	; (8002f1c <UART_SetConfig+0x2cc>)
 8002e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002e0e:	2bc0      	cmp	r3, #192	; 0xc0
 8002e10:	d016      	beq.n	8002e40 <UART_SetConfig+0x1f0>
 8002e12:	2bc0      	cmp	r3, #192	; 0xc0
 8002e14:	d818      	bhi.n	8002e48 <UART_SetConfig+0x1f8>
 8002e16:	2b80      	cmp	r3, #128	; 0x80
 8002e18:	d00a      	beq.n	8002e30 <UART_SetConfig+0x1e0>
 8002e1a:	2b80      	cmp	r3, #128	; 0x80
 8002e1c:	d814      	bhi.n	8002e48 <UART_SetConfig+0x1f8>
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d002      	beq.n	8002e28 <UART_SetConfig+0x1d8>
 8002e22:	2b40      	cmp	r3, #64	; 0x40
 8002e24:	d008      	beq.n	8002e38 <UART_SetConfig+0x1e8>
 8002e26:	e00f      	b.n	8002e48 <UART_SetConfig+0x1f8>
 8002e28:	2300      	movs	r3, #0
 8002e2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e2e:	e082      	b.n	8002f36 <UART_SetConfig+0x2e6>
 8002e30:	2302      	movs	r3, #2
 8002e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e36:	e07e      	b.n	8002f36 <UART_SetConfig+0x2e6>
 8002e38:	2304      	movs	r3, #4
 8002e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e3e:	e07a      	b.n	8002f36 <UART_SetConfig+0x2e6>
 8002e40:	2308      	movs	r3, #8
 8002e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e46:	e076      	b.n	8002f36 <UART_SetConfig+0x2e6>
 8002e48:	2310      	movs	r3, #16
 8002e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e4e:	e072      	b.n	8002f36 <UART_SetConfig+0x2e6>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a35      	ldr	r2, [pc, #212]	; (8002f2c <UART_SetConfig+0x2dc>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d12a      	bne.n	8002eb0 <UART_SetConfig+0x260>
 8002e5a:	4b30      	ldr	r3, [pc, #192]	; (8002f1c <UART_SetConfig+0x2cc>)
 8002e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e68:	d01a      	beq.n	8002ea0 <UART_SetConfig+0x250>
 8002e6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e6e:	d81b      	bhi.n	8002ea8 <UART_SetConfig+0x258>
 8002e70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e74:	d00c      	beq.n	8002e90 <UART_SetConfig+0x240>
 8002e76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e7a:	d815      	bhi.n	8002ea8 <UART_SetConfig+0x258>
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d003      	beq.n	8002e88 <UART_SetConfig+0x238>
 8002e80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e84:	d008      	beq.n	8002e98 <UART_SetConfig+0x248>
 8002e86:	e00f      	b.n	8002ea8 <UART_SetConfig+0x258>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e8e:	e052      	b.n	8002f36 <UART_SetConfig+0x2e6>
 8002e90:	2302      	movs	r3, #2
 8002e92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e96:	e04e      	b.n	8002f36 <UART_SetConfig+0x2e6>
 8002e98:	2304      	movs	r3, #4
 8002e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e9e:	e04a      	b.n	8002f36 <UART_SetConfig+0x2e6>
 8002ea0:	2308      	movs	r3, #8
 8002ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ea6:	e046      	b.n	8002f36 <UART_SetConfig+0x2e6>
 8002ea8:	2310      	movs	r3, #16
 8002eaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eae:	e042      	b.n	8002f36 <UART_SetConfig+0x2e6>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a17      	ldr	r2, [pc, #92]	; (8002f14 <UART_SetConfig+0x2c4>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d13a      	bne.n	8002f30 <UART_SetConfig+0x2e0>
 8002eba:	4b18      	ldr	r3, [pc, #96]	; (8002f1c <UART_SetConfig+0x2cc>)
 8002ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ec4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ec8:	d01a      	beq.n	8002f00 <UART_SetConfig+0x2b0>
 8002eca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ece:	d81b      	bhi.n	8002f08 <UART_SetConfig+0x2b8>
 8002ed0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ed4:	d00c      	beq.n	8002ef0 <UART_SetConfig+0x2a0>
 8002ed6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002eda:	d815      	bhi.n	8002f08 <UART_SetConfig+0x2b8>
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d003      	beq.n	8002ee8 <UART_SetConfig+0x298>
 8002ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ee4:	d008      	beq.n	8002ef8 <UART_SetConfig+0x2a8>
 8002ee6:	e00f      	b.n	8002f08 <UART_SetConfig+0x2b8>
 8002ee8:	2300      	movs	r3, #0
 8002eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eee:	e022      	b.n	8002f36 <UART_SetConfig+0x2e6>
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ef6:	e01e      	b.n	8002f36 <UART_SetConfig+0x2e6>
 8002ef8:	2304      	movs	r3, #4
 8002efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002efe:	e01a      	b.n	8002f36 <UART_SetConfig+0x2e6>
 8002f00:	2308      	movs	r3, #8
 8002f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f06:	e016      	b.n	8002f36 <UART_SetConfig+0x2e6>
 8002f08:	2310      	movs	r3, #16
 8002f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f0e:	e012      	b.n	8002f36 <UART_SetConfig+0x2e6>
 8002f10:	efff69f3 	.word	0xefff69f3
 8002f14:	40008000 	.word	0x40008000
 8002f18:	40013800 	.word	0x40013800
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	40004400 	.word	0x40004400
 8002f24:	40004800 	.word	0x40004800
 8002f28:	40004c00 	.word	0x40004c00
 8002f2c:	40005000 	.word	0x40005000
 8002f30:	2310      	movs	r3, #16
 8002f32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a9f      	ldr	r2, [pc, #636]	; (80031b8 <UART_SetConfig+0x568>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d17a      	bne.n	8003036 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002f40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d824      	bhi.n	8002f92 <UART_SetConfig+0x342>
 8002f48:	a201      	add	r2, pc, #4	; (adr r2, 8002f50 <UART_SetConfig+0x300>)
 8002f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4e:	bf00      	nop
 8002f50:	08002f75 	.word	0x08002f75
 8002f54:	08002f93 	.word	0x08002f93
 8002f58:	08002f7d 	.word	0x08002f7d
 8002f5c:	08002f93 	.word	0x08002f93
 8002f60:	08002f83 	.word	0x08002f83
 8002f64:	08002f93 	.word	0x08002f93
 8002f68:	08002f93 	.word	0x08002f93
 8002f6c:	08002f93 	.word	0x08002f93
 8002f70:	08002f8b 	.word	0x08002f8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f74:	f7fe ffe0 	bl	8001f38 <HAL_RCC_GetPCLK1Freq>
 8002f78:	61f8      	str	r0, [r7, #28]
        break;
 8002f7a:	e010      	b.n	8002f9e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f7c:	4b8f      	ldr	r3, [pc, #572]	; (80031bc <UART_SetConfig+0x56c>)
 8002f7e:	61fb      	str	r3, [r7, #28]
        break;
 8002f80:	e00d      	b.n	8002f9e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f82:	f7fe ff41 	bl	8001e08 <HAL_RCC_GetSysClockFreq>
 8002f86:	61f8      	str	r0, [r7, #28]
        break;
 8002f88:	e009      	b.n	8002f9e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f8e:	61fb      	str	r3, [r7, #28]
        break;
 8002f90:	e005      	b.n	8002f9e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002f92:	2300      	movs	r3, #0
 8002f94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002f9c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 80fb 	beq.w	800319c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	4613      	mov	r3, r2
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	4413      	add	r3, r2
 8002fb0:	69fa      	ldr	r2, [r7, #28]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d305      	bcc.n	8002fc2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002fbc:	69fa      	ldr	r2, [r7, #28]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d903      	bls.n	8002fca <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002fc8:	e0e8      	b.n	800319c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	461c      	mov	r4, r3
 8002fd0:	4615      	mov	r5, r2
 8002fd2:	f04f 0200 	mov.w	r2, #0
 8002fd6:	f04f 0300 	mov.w	r3, #0
 8002fda:	022b      	lsls	r3, r5, #8
 8002fdc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002fe0:	0222      	lsls	r2, r4, #8
 8002fe2:	68f9      	ldr	r1, [r7, #12]
 8002fe4:	6849      	ldr	r1, [r1, #4]
 8002fe6:	0849      	lsrs	r1, r1, #1
 8002fe8:	2000      	movs	r0, #0
 8002fea:	4688      	mov	r8, r1
 8002fec:	4681      	mov	r9, r0
 8002fee:	eb12 0a08 	adds.w	sl, r2, r8
 8002ff2:	eb43 0b09 	adc.w	fp, r3, r9
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	603b      	str	r3, [r7, #0]
 8002ffe:	607a      	str	r2, [r7, #4]
 8003000:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003004:	4650      	mov	r0, sl
 8003006:	4659      	mov	r1, fp
 8003008:	f7fd f932 	bl	8000270 <__aeabi_uldivmod>
 800300c:	4602      	mov	r2, r0
 800300e:	460b      	mov	r3, r1
 8003010:	4613      	mov	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800301a:	d308      	bcc.n	800302e <UART_SetConfig+0x3de>
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003022:	d204      	bcs.n	800302e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	60da      	str	r2, [r3, #12]
 800302c:	e0b6      	b.n	800319c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003034:	e0b2      	b.n	800319c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800303e:	d15e      	bne.n	80030fe <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003040:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003044:	2b08      	cmp	r3, #8
 8003046:	d828      	bhi.n	800309a <UART_SetConfig+0x44a>
 8003048:	a201      	add	r2, pc, #4	; (adr r2, 8003050 <UART_SetConfig+0x400>)
 800304a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304e:	bf00      	nop
 8003050:	08003075 	.word	0x08003075
 8003054:	0800307d 	.word	0x0800307d
 8003058:	08003085 	.word	0x08003085
 800305c:	0800309b 	.word	0x0800309b
 8003060:	0800308b 	.word	0x0800308b
 8003064:	0800309b 	.word	0x0800309b
 8003068:	0800309b 	.word	0x0800309b
 800306c:	0800309b 	.word	0x0800309b
 8003070:	08003093 	.word	0x08003093
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003074:	f7fe ff60 	bl	8001f38 <HAL_RCC_GetPCLK1Freq>
 8003078:	61f8      	str	r0, [r7, #28]
        break;
 800307a:	e014      	b.n	80030a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800307c:	f7fe ff72 	bl	8001f64 <HAL_RCC_GetPCLK2Freq>
 8003080:	61f8      	str	r0, [r7, #28]
        break;
 8003082:	e010      	b.n	80030a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003084:	4b4d      	ldr	r3, [pc, #308]	; (80031bc <UART_SetConfig+0x56c>)
 8003086:	61fb      	str	r3, [r7, #28]
        break;
 8003088:	e00d      	b.n	80030a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800308a:	f7fe febd 	bl	8001e08 <HAL_RCC_GetSysClockFreq>
 800308e:	61f8      	str	r0, [r7, #28]
        break;
 8003090:	e009      	b.n	80030a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003092:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003096:	61fb      	str	r3, [r7, #28]
        break;
 8003098:	e005      	b.n	80030a6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800309a:	2300      	movs	r3, #0
 800309c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80030a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d077      	beq.n	800319c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	005a      	lsls	r2, r3, #1
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	085b      	lsrs	r3, r3, #1
 80030b6:	441a      	add	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	2b0f      	cmp	r3, #15
 80030c6:	d916      	bls.n	80030f6 <UART_SetConfig+0x4a6>
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ce:	d212      	bcs.n	80030f6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	f023 030f 	bic.w	r3, r3, #15
 80030d8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	085b      	lsrs	r3, r3, #1
 80030de:	b29b      	uxth	r3, r3
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	8afb      	ldrh	r3, [r7, #22]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	8afa      	ldrh	r2, [r7, #22]
 80030f2:	60da      	str	r2, [r3, #12]
 80030f4:	e052      	b.n	800319c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80030fc:	e04e      	b.n	800319c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80030fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003102:	2b08      	cmp	r3, #8
 8003104:	d827      	bhi.n	8003156 <UART_SetConfig+0x506>
 8003106:	a201      	add	r2, pc, #4	; (adr r2, 800310c <UART_SetConfig+0x4bc>)
 8003108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800310c:	08003131 	.word	0x08003131
 8003110:	08003139 	.word	0x08003139
 8003114:	08003141 	.word	0x08003141
 8003118:	08003157 	.word	0x08003157
 800311c:	08003147 	.word	0x08003147
 8003120:	08003157 	.word	0x08003157
 8003124:	08003157 	.word	0x08003157
 8003128:	08003157 	.word	0x08003157
 800312c:	0800314f 	.word	0x0800314f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003130:	f7fe ff02 	bl	8001f38 <HAL_RCC_GetPCLK1Freq>
 8003134:	61f8      	str	r0, [r7, #28]
        break;
 8003136:	e014      	b.n	8003162 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003138:	f7fe ff14 	bl	8001f64 <HAL_RCC_GetPCLK2Freq>
 800313c:	61f8      	str	r0, [r7, #28]
        break;
 800313e:	e010      	b.n	8003162 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003140:	4b1e      	ldr	r3, [pc, #120]	; (80031bc <UART_SetConfig+0x56c>)
 8003142:	61fb      	str	r3, [r7, #28]
        break;
 8003144:	e00d      	b.n	8003162 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003146:	f7fe fe5f 	bl	8001e08 <HAL_RCC_GetSysClockFreq>
 800314a:	61f8      	str	r0, [r7, #28]
        break;
 800314c:	e009      	b.n	8003162 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800314e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003152:	61fb      	str	r3, [r7, #28]
        break;
 8003154:	e005      	b.n	8003162 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003156:	2300      	movs	r3, #0
 8003158:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003160:	bf00      	nop
    }

    if (pclk != 0U)
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d019      	beq.n	800319c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	085a      	lsrs	r2, r3, #1
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	441a      	add	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	fbb2 f3f3 	udiv	r3, r2, r3
 800317a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	2b0f      	cmp	r3, #15
 8003180:	d909      	bls.n	8003196 <UART_SetConfig+0x546>
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003188:	d205      	bcs.n	8003196 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	b29a      	uxth	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	60da      	str	r2, [r3, #12]
 8003194:	e002      	b.n	800319c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80031a8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3728      	adds	r7, #40	; 0x28
 80031b0:	46bd      	mov	sp, r7
 80031b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031b6:	bf00      	nop
 80031b8:	40008000 	.word	0x40008000
 80031bc:	00f42400 	.word	0x00f42400

080031c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00a      	beq.n	80031ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00a      	beq.n	800320c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00a      	beq.n	800322e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00a      	beq.n	8003250 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	f003 0310 	and.w	r3, r3, #16
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00a      	beq.n	8003272 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003276:	f003 0320 	and.w	r3, r3, #32
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00a      	beq.n	8003294 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329c:	2b00      	cmp	r3, #0
 800329e:	d01a      	beq.n	80032d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032be:	d10a      	bne.n	80032d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00a      	beq.n	80032f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	605a      	str	r2, [r3, #4]
  }
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af02      	add	r7, sp, #8
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003314:	f7fd fd60 	bl	8000dd8 <HAL_GetTick>
 8003318:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0308 	and.w	r3, r3, #8
 8003324:	2b08      	cmp	r3, #8
 8003326:	d10e      	bne.n	8003346 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003328:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 f82d 	bl	8003396 <UART_WaitOnFlagUntilTimeout>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e023      	b.n	800338e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0304 	and.w	r3, r3, #4
 8003350:	2b04      	cmp	r3, #4
 8003352:	d10e      	bne.n	8003372 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003354:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f817 	bl	8003396 <UART_WaitOnFlagUntilTimeout>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e00d      	b.n	800338e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2220      	movs	r2, #32
 8003376:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2220      	movs	r2, #32
 800337c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b09c      	sub	sp, #112	; 0x70
 800339a:	af00      	add	r7, sp, #0
 800339c:	60f8      	str	r0, [r7, #12]
 800339e:	60b9      	str	r1, [r7, #8]
 80033a0:	603b      	str	r3, [r7, #0]
 80033a2:	4613      	mov	r3, r2
 80033a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033a6:	e0a5      	b.n	80034f4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ae:	f000 80a1 	beq.w	80034f4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033b2:	f7fd fd11 	bl	8000dd8 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80033be:	429a      	cmp	r2, r3
 80033c0:	d302      	bcc.n	80033c8 <UART_WaitOnFlagUntilTimeout+0x32>
 80033c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d13e      	bne.n	8003446 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033d0:	e853 3f00 	ldrex	r3, [r3]
 80033d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80033d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80033dc:	667b      	str	r3, [r7, #100]	; 0x64
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	461a      	mov	r2, r3
 80033e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033e8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80033ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80033ee:	e841 2300 	strex	r3, r2, [r1]
 80033f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80033f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1e6      	bne.n	80033c8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	3308      	adds	r3, #8
 8003400:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003404:	e853 3f00 	ldrex	r3, [r3]
 8003408:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800340a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800340c:	f023 0301 	bic.w	r3, r3, #1
 8003410:	663b      	str	r3, [r7, #96]	; 0x60
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	3308      	adds	r3, #8
 8003418:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800341a:	64ba      	str	r2, [r7, #72]	; 0x48
 800341c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800341e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003420:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003422:	e841 2300 	strex	r3, r2, [r1]
 8003426:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003428:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1e5      	bne.n	80033fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2220      	movs	r2, #32
 8003432:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2220      	movs	r2, #32
 8003438:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e067      	b.n	8003516 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b00      	cmp	r3, #0
 8003452:	d04f      	beq.n	80034f4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800345e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003462:	d147      	bne.n	80034f4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800346c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003476:	e853 3f00 	ldrex	r3, [r3]
 800347a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003482:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	461a      	mov	r2, r3
 800348a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800348c:	637b      	str	r3, [r7, #52]	; 0x34
 800348e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003490:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003492:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003494:	e841 2300 	strex	r3, r2, [r1]
 8003498:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800349a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1e6      	bne.n	800346e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	3308      	adds	r3, #8
 80034a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	e853 3f00 	ldrex	r3, [r3]
 80034ae:	613b      	str	r3, [r7, #16]
   return(result);
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	f023 0301 	bic.w	r3, r3, #1
 80034b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	3308      	adds	r3, #8
 80034be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80034c0:	623a      	str	r2, [r7, #32]
 80034c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c4:	69f9      	ldr	r1, [r7, #28]
 80034c6:	6a3a      	ldr	r2, [r7, #32]
 80034c8:	e841 2300 	strex	r3, r2, [r1]
 80034cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1e5      	bne.n	80034a0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2220      	movs	r2, #32
 80034de:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2220      	movs	r2, #32
 80034e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e010      	b.n	8003516 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	69da      	ldr	r2, [r3, #28]
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	4013      	ands	r3, r2
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	429a      	cmp	r2, r3
 8003502:	bf0c      	ite	eq
 8003504:	2301      	moveq	r3, #1
 8003506:	2300      	movne	r3, #0
 8003508:	b2db      	uxtb	r3, r3
 800350a:	461a      	mov	r2, r3
 800350c:	79fb      	ldrb	r3, [r7, #7]
 800350e:	429a      	cmp	r2, r3
 8003510:	f43f af4a 	beq.w	80033a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3770      	adds	r7, #112	; 0x70
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
	...

08003520 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003520:	b480      	push	{r7}
 8003522:	b097      	sub	sp, #92	; 0x5c
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	4613      	mov	r3, r2
 800352c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	68ba      	ldr	r2, [r7, #8]
 8003532:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	88fa      	ldrh	r2, [r7, #6]
 8003538:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	88fa      	ldrh	r2, [r7, #6]
 8003540:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003552:	d10e      	bne.n	8003572 <UART_Start_Receive_IT+0x52>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d105      	bne.n	8003568 <UART_Start_Receive_IT+0x48>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003562:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003566:	e02d      	b.n	80035c4 <UART_Start_Receive_IT+0xa4>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	22ff      	movs	r2, #255	; 0xff
 800356c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003570:	e028      	b.n	80035c4 <UART_Start_Receive_IT+0xa4>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10d      	bne.n	8003596 <UART_Start_Receive_IT+0x76>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d104      	bne.n	800358c <UART_Start_Receive_IT+0x6c>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	22ff      	movs	r2, #255	; 0xff
 8003586:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800358a:	e01b      	b.n	80035c4 <UART_Start_Receive_IT+0xa4>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	227f      	movs	r2, #127	; 0x7f
 8003590:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003594:	e016      	b.n	80035c4 <UART_Start_Receive_IT+0xa4>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800359e:	d10d      	bne.n	80035bc <UART_Start_Receive_IT+0x9c>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d104      	bne.n	80035b2 <UART_Start_Receive_IT+0x92>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	227f      	movs	r2, #127	; 0x7f
 80035ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035b0:	e008      	b.n	80035c4 <UART_Start_Receive_IT+0xa4>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	223f      	movs	r2, #63	; 0x3f
 80035b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035ba:	e003      	b.n	80035c4 <UART_Start_Receive_IT+0xa4>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2222      	movs	r2, #34	; 0x22
 80035d0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	3308      	adds	r3, #8
 80035d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035dc:	e853 3f00 	ldrex	r3, [r3]
 80035e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e4:	f043 0301 	orr.w	r3, r3, #1
 80035e8:	657b      	str	r3, [r7, #84]	; 0x54
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	3308      	adds	r3, #8
 80035f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80035f2:	64ba      	str	r2, [r7, #72]	; 0x48
 80035f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80035f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035fa:	e841 2300 	strex	r3, r2, [r1]
 80035fe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1e5      	bne.n	80035d2 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800360e:	d107      	bne.n	8003620 <UART_Start_Receive_IT+0x100>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d103      	bne.n	8003620 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4a24      	ldr	r2, [pc, #144]	; (80036ac <UART_Start_Receive_IT+0x18c>)
 800361c:	665a      	str	r2, [r3, #100]	; 0x64
 800361e:	e002      	b.n	8003626 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4a23      	ldr	r2, [pc, #140]	; (80036b0 <UART_Start_Receive_IT+0x190>)
 8003624:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d019      	beq.n	800366a <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800363e:	e853 3f00 	ldrex	r3, [r3]
 8003642:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003646:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800364a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	461a      	mov	r2, r3
 8003652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003654:	637b      	str	r3, [r7, #52]	; 0x34
 8003656:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003658:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800365a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800365c:	e841 2300 	strex	r3, r2, [r1]
 8003660:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1e6      	bne.n	8003636 <UART_Start_Receive_IT+0x116>
 8003668:	e018      	b.n	800369c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	e853 3f00 	ldrex	r3, [r3]
 8003676:	613b      	str	r3, [r7, #16]
   return(result);
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	f043 0320 	orr.w	r3, r3, #32
 800367e:	653b      	str	r3, [r7, #80]	; 0x50
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	461a      	mov	r2, r3
 8003686:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003688:	623b      	str	r3, [r7, #32]
 800368a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368c:	69f9      	ldr	r1, [r7, #28]
 800368e:	6a3a      	ldr	r2, [r7, #32]
 8003690:	e841 2300 	strex	r3, r2, [r1]
 8003694:	61bb      	str	r3, [r7, #24]
   return(result);
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1e6      	bne.n	800366a <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	375c      	adds	r7, #92	; 0x5c
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	08003815 	.word	0x08003815
 80036b0:	080036b5 	.word	0x080036b5

080036b4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b096      	sub	sp, #88	; 0x58
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80036c2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036ca:	2b22      	cmp	r3, #34	; 0x22
 80036cc:	f040 8094 	bne.w	80037f8 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80036d6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80036da:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80036de:	b2d9      	uxtb	r1, r3
 80036e0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ea:	400a      	ands	r2, r1
 80036ec:	b2d2      	uxtb	r2, r2
 80036ee:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f4:	1c5a      	adds	r2, r3, #1
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003700:	b29b      	uxth	r3, r3
 8003702:	3b01      	subs	r3, #1
 8003704:	b29a      	uxth	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003712:	b29b      	uxth	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	d179      	bne.n	800380c <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800371e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003720:	e853 3f00 	ldrex	r3, [r3]
 8003724:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003728:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800372c:	653b      	str	r3, [r7, #80]	; 0x50
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	461a      	mov	r2, r3
 8003734:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003736:	647b      	str	r3, [r7, #68]	; 0x44
 8003738:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800373a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800373c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800373e:	e841 2300 	strex	r3, r2, [r1]
 8003742:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1e6      	bne.n	8003718 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	3308      	adds	r3, #8
 8003750:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003754:	e853 3f00 	ldrex	r3, [r3]
 8003758:	623b      	str	r3, [r7, #32]
   return(result);
 800375a:	6a3b      	ldr	r3, [r7, #32]
 800375c:	f023 0301 	bic.w	r3, r3, #1
 8003760:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	3308      	adds	r3, #8
 8003768:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800376a:	633a      	str	r2, [r7, #48]	; 0x30
 800376c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003772:	e841 2300 	strex	r3, r2, [r1]
 8003776:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1e5      	bne.n	800374a <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2220      	movs	r2, #32
 8003782:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800378e:	2b01      	cmp	r3, #1
 8003790:	d12e      	bne.n	80037f0 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	e853 3f00 	ldrex	r3, [r3]
 80037a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f023 0310 	bic.w	r3, r3, #16
 80037ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	461a      	mov	r2, r3
 80037b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037b6:	61fb      	str	r3, [r7, #28]
 80037b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ba:	69b9      	ldr	r1, [r7, #24]
 80037bc:	69fa      	ldr	r2, [r7, #28]
 80037be:	e841 2300 	strex	r3, r2, [r1]
 80037c2:	617b      	str	r3, [r7, #20]
   return(result);
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1e6      	bne.n	8003798 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	69db      	ldr	r3, [r3, #28]
 80037d0:	f003 0310 	and.w	r3, r3, #16
 80037d4:	2b10      	cmp	r3, #16
 80037d6:	d103      	bne.n	80037e0 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2210      	movs	r2, #16
 80037de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80037e6:	4619      	mov	r1, r3
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7ff fa25 	bl	8002c38 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80037ee:	e00d      	b.n	800380c <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f7fc fed5 	bl	80005a0 <HAL_UART_RxCpltCallback>
}
 80037f6:	e009      	b.n	800380c <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	8b1b      	ldrh	r3, [r3, #24]
 80037fe:	b29a      	uxth	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f042 0208 	orr.w	r2, r2, #8
 8003808:	b292      	uxth	r2, r2
 800380a:	831a      	strh	r2, [r3, #24]
}
 800380c:	bf00      	nop
 800380e:	3758      	adds	r7, #88	; 0x58
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b096      	sub	sp, #88	; 0x58
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003822:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800382a:	2b22      	cmp	r3, #34	; 0x22
 800382c:	f040 8094 	bne.w	8003958 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003836:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003840:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003844:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003848:	4013      	ands	r3, r2
 800384a:	b29a      	uxth	r2, r3
 800384c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800384e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003854:	1c9a      	adds	r2, r3, #2
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003860:	b29b      	uxth	r3, r3
 8003862:	3b01      	subs	r3, #1
 8003864:	b29a      	uxth	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003872:	b29b      	uxth	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	d179      	bne.n	800396c <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003880:	e853 3f00 	ldrex	r3, [r3]
 8003884:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003888:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800388c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	461a      	mov	r2, r3
 8003894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003896:	643b      	str	r3, [r7, #64]	; 0x40
 8003898:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800389c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800389e:	e841 2300 	strex	r3, r2, [r1]
 80038a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1e6      	bne.n	8003878 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	3308      	adds	r3, #8
 80038b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b2:	6a3b      	ldr	r3, [r7, #32]
 80038b4:	e853 3f00 	ldrex	r3, [r3]
 80038b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	f023 0301 	bic.w	r3, r3, #1
 80038c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	3308      	adds	r3, #8
 80038c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038d2:	e841 2300 	strex	r3, r2, [r1]
 80038d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1e5      	bne.n	80038aa <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2220      	movs	r2, #32
 80038e2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d12e      	bne.n	8003950 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	e853 3f00 	ldrex	r3, [r3]
 8003904:	60bb      	str	r3, [r7, #8]
   return(result);
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	f023 0310 	bic.w	r3, r3, #16
 800390c:	647b      	str	r3, [r7, #68]	; 0x44
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	461a      	mov	r2, r3
 8003914:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003916:	61bb      	str	r3, [r7, #24]
 8003918:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391a:	6979      	ldr	r1, [r7, #20]
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	e841 2300 	strex	r3, r2, [r1]
 8003922:	613b      	str	r3, [r7, #16]
   return(result);
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1e6      	bne.n	80038f8 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	69db      	ldr	r3, [r3, #28]
 8003930:	f003 0310 	and.w	r3, r3, #16
 8003934:	2b10      	cmp	r3, #16
 8003936:	d103      	bne.n	8003940 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2210      	movs	r2, #16
 800393e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003946:	4619      	mov	r1, r3
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f7ff f975 	bl	8002c38 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800394e:	e00d      	b.n	800396c <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f7fc fe25 	bl	80005a0 <HAL_UART_RxCpltCallback>
}
 8003956:	e009      	b.n	800396c <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	8b1b      	ldrh	r3, [r3, #24]
 800395e:	b29a      	uxth	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f042 0208 	orr.w	r2, r2, #8
 8003968:	b292      	uxth	r2, r2
 800396a:	831a      	strh	r2, [r3, #24]
}
 800396c:	bf00      	nop
 800396e:	3758      	adds	r7, #88	; 0x58
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <__errno>:
 8003974:	4b01      	ldr	r3, [pc, #4]	; (800397c <__errno+0x8>)
 8003976:	6818      	ldr	r0, [r3, #0]
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	2000000c 	.word	0x2000000c

08003980 <__libc_init_array>:
 8003980:	b570      	push	{r4, r5, r6, lr}
 8003982:	4d0d      	ldr	r5, [pc, #52]	; (80039b8 <__libc_init_array+0x38>)
 8003984:	4c0d      	ldr	r4, [pc, #52]	; (80039bc <__libc_init_array+0x3c>)
 8003986:	1b64      	subs	r4, r4, r5
 8003988:	10a4      	asrs	r4, r4, #2
 800398a:	2600      	movs	r6, #0
 800398c:	42a6      	cmp	r6, r4
 800398e:	d109      	bne.n	80039a4 <__libc_init_array+0x24>
 8003990:	4d0b      	ldr	r5, [pc, #44]	; (80039c0 <__libc_init_array+0x40>)
 8003992:	4c0c      	ldr	r4, [pc, #48]	; (80039c4 <__libc_init_array+0x44>)
 8003994:	f000 ffae 	bl	80048f4 <_init>
 8003998:	1b64      	subs	r4, r4, r5
 800399a:	10a4      	asrs	r4, r4, #2
 800399c:	2600      	movs	r6, #0
 800399e:	42a6      	cmp	r6, r4
 80039a0:	d105      	bne.n	80039ae <__libc_init_array+0x2e>
 80039a2:	bd70      	pop	{r4, r5, r6, pc}
 80039a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80039a8:	4798      	blx	r3
 80039aa:	3601      	adds	r6, #1
 80039ac:	e7ee      	b.n	800398c <__libc_init_array+0xc>
 80039ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80039b2:	4798      	blx	r3
 80039b4:	3601      	adds	r6, #1
 80039b6:	e7f2      	b.n	800399e <__libc_init_array+0x1e>
 80039b8:	08004a00 	.word	0x08004a00
 80039bc:	08004a00 	.word	0x08004a00
 80039c0:	08004a00 	.word	0x08004a00
 80039c4:	08004a04 	.word	0x08004a04

080039c8 <memset>:
 80039c8:	4402      	add	r2, r0
 80039ca:	4603      	mov	r3, r0
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d100      	bne.n	80039d2 <memset+0xa>
 80039d0:	4770      	bx	lr
 80039d2:	f803 1b01 	strb.w	r1, [r3], #1
 80039d6:	e7f9      	b.n	80039cc <memset+0x4>

080039d8 <iprintf>:
 80039d8:	b40f      	push	{r0, r1, r2, r3}
 80039da:	4b0a      	ldr	r3, [pc, #40]	; (8003a04 <iprintf+0x2c>)
 80039dc:	b513      	push	{r0, r1, r4, lr}
 80039de:	681c      	ldr	r4, [r3, #0]
 80039e0:	b124      	cbz	r4, 80039ec <iprintf+0x14>
 80039e2:	69a3      	ldr	r3, [r4, #24]
 80039e4:	b913      	cbnz	r3, 80039ec <iprintf+0x14>
 80039e6:	4620      	mov	r0, r4
 80039e8:	f000 f866 	bl	8003ab8 <__sinit>
 80039ec:	ab05      	add	r3, sp, #20
 80039ee:	9a04      	ldr	r2, [sp, #16]
 80039f0:	68a1      	ldr	r1, [r4, #8]
 80039f2:	9301      	str	r3, [sp, #4]
 80039f4:	4620      	mov	r0, r4
 80039f6:	f000 f9bd 	bl	8003d74 <_vfiprintf_r>
 80039fa:	b002      	add	sp, #8
 80039fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a00:	b004      	add	sp, #16
 8003a02:	4770      	bx	lr
 8003a04:	2000000c 	.word	0x2000000c

08003a08 <std>:
 8003a08:	2300      	movs	r3, #0
 8003a0a:	b510      	push	{r4, lr}
 8003a0c:	4604      	mov	r4, r0
 8003a0e:	e9c0 3300 	strd	r3, r3, [r0]
 8003a12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a16:	6083      	str	r3, [r0, #8]
 8003a18:	8181      	strh	r1, [r0, #12]
 8003a1a:	6643      	str	r3, [r0, #100]	; 0x64
 8003a1c:	81c2      	strh	r2, [r0, #14]
 8003a1e:	6183      	str	r3, [r0, #24]
 8003a20:	4619      	mov	r1, r3
 8003a22:	2208      	movs	r2, #8
 8003a24:	305c      	adds	r0, #92	; 0x5c
 8003a26:	f7ff ffcf 	bl	80039c8 <memset>
 8003a2a:	4b05      	ldr	r3, [pc, #20]	; (8003a40 <std+0x38>)
 8003a2c:	6263      	str	r3, [r4, #36]	; 0x24
 8003a2e:	4b05      	ldr	r3, [pc, #20]	; (8003a44 <std+0x3c>)
 8003a30:	62a3      	str	r3, [r4, #40]	; 0x28
 8003a32:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <std+0x40>)
 8003a34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003a36:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <std+0x44>)
 8003a38:	6224      	str	r4, [r4, #32]
 8003a3a:	6323      	str	r3, [r4, #48]	; 0x30
 8003a3c:	bd10      	pop	{r4, pc}
 8003a3e:	bf00      	nop
 8003a40:	0800431d 	.word	0x0800431d
 8003a44:	0800433f 	.word	0x0800433f
 8003a48:	08004377 	.word	0x08004377
 8003a4c:	0800439b 	.word	0x0800439b

08003a50 <_cleanup_r>:
 8003a50:	4901      	ldr	r1, [pc, #4]	; (8003a58 <_cleanup_r+0x8>)
 8003a52:	f000 b8af 	b.w	8003bb4 <_fwalk_reent>
 8003a56:	bf00      	nop
 8003a58:	08004675 	.word	0x08004675

08003a5c <__sfmoreglue>:
 8003a5c:	b570      	push	{r4, r5, r6, lr}
 8003a5e:	2268      	movs	r2, #104	; 0x68
 8003a60:	1e4d      	subs	r5, r1, #1
 8003a62:	4355      	muls	r5, r2
 8003a64:	460e      	mov	r6, r1
 8003a66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003a6a:	f000 f8e5 	bl	8003c38 <_malloc_r>
 8003a6e:	4604      	mov	r4, r0
 8003a70:	b140      	cbz	r0, 8003a84 <__sfmoreglue+0x28>
 8003a72:	2100      	movs	r1, #0
 8003a74:	e9c0 1600 	strd	r1, r6, [r0]
 8003a78:	300c      	adds	r0, #12
 8003a7a:	60a0      	str	r0, [r4, #8]
 8003a7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003a80:	f7ff ffa2 	bl	80039c8 <memset>
 8003a84:	4620      	mov	r0, r4
 8003a86:	bd70      	pop	{r4, r5, r6, pc}

08003a88 <__sfp_lock_acquire>:
 8003a88:	4801      	ldr	r0, [pc, #4]	; (8003a90 <__sfp_lock_acquire+0x8>)
 8003a8a:	f000 b8b3 	b.w	8003bf4 <__retarget_lock_acquire_recursive>
 8003a8e:	bf00      	nop
 8003a90:	20000139 	.word	0x20000139

08003a94 <__sfp_lock_release>:
 8003a94:	4801      	ldr	r0, [pc, #4]	; (8003a9c <__sfp_lock_release+0x8>)
 8003a96:	f000 b8ae 	b.w	8003bf6 <__retarget_lock_release_recursive>
 8003a9a:	bf00      	nop
 8003a9c:	20000139 	.word	0x20000139

08003aa0 <__sinit_lock_acquire>:
 8003aa0:	4801      	ldr	r0, [pc, #4]	; (8003aa8 <__sinit_lock_acquire+0x8>)
 8003aa2:	f000 b8a7 	b.w	8003bf4 <__retarget_lock_acquire_recursive>
 8003aa6:	bf00      	nop
 8003aa8:	2000013a 	.word	0x2000013a

08003aac <__sinit_lock_release>:
 8003aac:	4801      	ldr	r0, [pc, #4]	; (8003ab4 <__sinit_lock_release+0x8>)
 8003aae:	f000 b8a2 	b.w	8003bf6 <__retarget_lock_release_recursive>
 8003ab2:	bf00      	nop
 8003ab4:	2000013a 	.word	0x2000013a

08003ab8 <__sinit>:
 8003ab8:	b510      	push	{r4, lr}
 8003aba:	4604      	mov	r4, r0
 8003abc:	f7ff fff0 	bl	8003aa0 <__sinit_lock_acquire>
 8003ac0:	69a3      	ldr	r3, [r4, #24]
 8003ac2:	b11b      	cbz	r3, 8003acc <__sinit+0x14>
 8003ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ac8:	f7ff bff0 	b.w	8003aac <__sinit_lock_release>
 8003acc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003ad0:	6523      	str	r3, [r4, #80]	; 0x50
 8003ad2:	4b13      	ldr	r3, [pc, #76]	; (8003b20 <__sinit+0x68>)
 8003ad4:	4a13      	ldr	r2, [pc, #76]	; (8003b24 <__sinit+0x6c>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	62a2      	str	r2, [r4, #40]	; 0x28
 8003ada:	42a3      	cmp	r3, r4
 8003adc:	bf04      	itt	eq
 8003ade:	2301      	moveq	r3, #1
 8003ae0:	61a3      	streq	r3, [r4, #24]
 8003ae2:	4620      	mov	r0, r4
 8003ae4:	f000 f820 	bl	8003b28 <__sfp>
 8003ae8:	6060      	str	r0, [r4, #4]
 8003aea:	4620      	mov	r0, r4
 8003aec:	f000 f81c 	bl	8003b28 <__sfp>
 8003af0:	60a0      	str	r0, [r4, #8]
 8003af2:	4620      	mov	r0, r4
 8003af4:	f000 f818 	bl	8003b28 <__sfp>
 8003af8:	2200      	movs	r2, #0
 8003afa:	60e0      	str	r0, [r4, #12]
 8003afc:	2104      	movs	r1, #4
 8003afe:	6860      	ldr	r0, [r4, #4]
 8003b00:	f7ff ff82 	bl	8003a08 <std>
 8003b04:	68a0      	ldr	r0, [r4, #8]
 8003b06:	2201      	movs	r2, #1
 8003b08:	2109      	movs	r1, #9
 8003b0a:	f7ff ff7d 	bl	8003a08 <std>
 8003b0e:	68e0      	ldr	r0, [r4, #12]
 8003b10:	2202      	movs	r2, #2
 8003b12:	2112      	movs	r1, #18
 8003b14:	f7ff ff78 	bl	8003a08 <std>
 8003b18:	2301      	movs	r3, #1
 8003b1a:	61a3      	str	r3, [r4, #24]
 8003b1c:	e7d2      	b.n	8003ac4 <__sinit+0xc>
 8003b1e:	bf00      	nop
 8003b20:	08004960 	.word	0x08004960
 8003b24:	08003a51 	.word	0x08003a51

08003b28 <__sfp>:
 8003b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b2a:	4607      	mov	r7, r0
 8003b2c:	f7ff ffac 	bl	8003a88 <__sfp_lock_acquire>
 8003b30:	4b1e      	ldr	r3, [pc, #120]	; (8003bac <__sfp+0x84>)
 8003b32:	681e      	ldr	r6, [r3, #0]
 8003b34:	69b3      	ldr	r3, [r6, #24]
 8003b36:	b913      	cbnz	r3, 8003b3e <__sfp+0x16>
 8003b38:	4630      	mov	r0, r6
 8003b3a:	f7ff ffbd 	bl	8003ab8 <__sinit>
 8003b3e:	3648      	adds	r6, #72	; 0x48
 8003b40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003b44:	3b01      	subs	r3, #1
 8003b46:	d503      	bpl.n	8003b50 <__sfp+0x28>
 8003b48:	6833      	ldr	r3, [r6, #0]
 8003b4a:	b30b      	cbz	r3, 8003b90 <__sfp+0x68>
 8003b4c:	6836      	ldr	r6, [r6, #0]
 8003b4e:	e7f7      	b.n	8003b40 <__sfp+0x18>
 8003b50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003b54:	b9d5      	cbnz	r5, 8003b8c <__sfp+0x64>
 8003b56:	4b16      	ldr	r3, [pc, #88]	; (8003bb0 <__sfp+0x88>)
 8003b58:	60e3      	str	r3, [r4, #12]
 8003b5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003b5e:	6665      	str	r5, [r4, #100]	; 0x64
 8003b60:	f000 f847 	bl	8003bf2 <__retarget_lock_init_recursive>
 8003b64:	f7ff ff96 	bl	8003a94 <__sfp_lock_release>
 8003b68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003b6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003b70:	6025      	str	r5, [r4, #0]
 8003b72:	61a5      	str	r5, [r4, #24]
 8003b74:	2208      	movs	r2, #8
 8003b76:	4629      	mov	r1, r5
 8003b78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003b7c:	f7ff ff24 	bl	80039c8 <memset>
 8003b80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003b84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003b88:	4620      	mov	r0, r4
 8003b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b8c:	3468      	adds	r4, #104	; 0x68
 8003b8e:	e7d9      	b.n	8003b44 <__sfp+0x1c>
 8003b90:	2104      	movs	r1, #4
 8003b92:	4638      	mov	r0, r7
 8003b94:	f7ff ff62 	bl	8003a5c <__sfmoreglue>
 8003b98:	4604      	mov	r4, r0
 8003b9a:	6030      	str	r0, [r6, #0]
 8003b9c:	2800      	cmp	r0, #0
 8003b9e:	d1d5      	bne.n	8003b4c <__sfp+0x24>
 8003ba0:	f7ff ff78 	bl	8003a94 <__sfp_lock_release>
 8003ba4:	230c      	movs	r3, #12
 8003ba6:	603b      	str	r3, [r7, #0]
 8003ba8:	e7ee      	b.n	8003b88 <__sfp+0x60>
 8003baa:	bf00      	nop
 8003bac:	08004960 	.word	0x08004960
 8003bb0:	ffff0001 	.word	0xffff0001

08003bb4 <_fwalk_reent>:
 8003bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bb8:	4606      	mov	r6, r0
 8003bba:	4688      	mov	r8, r1
 8003bbc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003bc0:	2700      	movs	r7, #0
 8003bc2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003bc6:	f1b9 0901 	subs.w	r9, r9, #1
 8003bca:	d505      	bpl.n	8003bd8 <_fwalk_reent+0x24>
 8003bcc:	6824      	ldr	r4, [r4, #0]
 8003bce:	2c00      	cmp	r4, #0
 8003bd0:	d1f7      	bne.n	8003bc2 <_fwalk_reent+0xe>
 8003bd2:	4638      	mov	r0, r7
 8003bd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bd8:	89ab      	ldrh	r3, [r5, #12]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d907      	bls.n	8003bee <_fwalk_reent+0x3a>
 8003bde:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003be2:	3301      	adds	r3, #1
 8003be4:	d003      	beq.n	8003bee <_fwalk_reent+0x3a>
 8003be6:	4629      	mov	r1, r5
 8003be8:	4630      	mov	r0, r6
 8003bea:	47c0      	blx	r8
 8003bec:	4307      	orrs	r7, r0
 8003bee:	3568      	adds	r5, #104	; 0x68
 8003bf0:	e7e9      	b.n	8003bc6 <_fwalk_reent+0x12>

08003bf2 <__retarget_lock_init_recursive>:
 8003bf2:	4770      	bx	lr

08003bf4 <__retarget_lock_acquire_recursive>:
 8003bf4:	4770      	bx	lr

08003bf6 <__retarget_lock_release_recursive>:
 8003bf6:	4770      	bx	lr

08003bf8 <sbrk_aligned>:
 8003bf8:	b570      	push	{r4, r5, r6, lr}
 8003bfa:	4e0e      	ldr	r6, [pc, #56]	; (8003c34 <sbrk_aligned+0x3c>)
 8003bfc:	460c      	mov	r4, r1
 8003bfe:	6831      	ldr	r1, [r6, #0]
 8003c00:	4605      	mov	r5, r0
 8003c02:	b911      	cbnz	r1, 8003c0a <sbrk_aligned+0x12>
 8003c04:	f000 fb7a 	bl	80042fc <_sbrk_r>
 8003c08:	6030      	str	r0, [r6, #0]
 8003c0a:	4621      	mov	r1, r4
 8003c0c:	4628      	mov	r0, r5
 8003c0e:	f000 fb75 	bl	80042fc <_sbrk_r>
 8003c12:	1c43      	adds	r3, r0, #1
 8003c14:	d00a      	beq.n	8003c2c <sbrk_aligned+0x34>
 8003c16:	1cc4      	adds	r4, r0, #3
 8003c18:	f024 0403 	bic.w	r4, r4, #3
 8003c1c:	42a0      	cmp	r0, r4
 8003c1e:	d007      	beq.n	8003c30 <sbrk_aligned+0x38>
 8003c20:	1a21      	subs	r1, r4, r0
 8003c22:	4628      	mov	r0, r5
 8003c24:	f000 fb6a 	bl	80042fc <_sbrk_r>
 8003c28:	3001      	adds	r0, #1
 8003c2a:	d101      	bne.n	8003c30 <sbrk_aligned+0x38>
 8003c2c:	f04f 34ff 	mov.w	r4, #4294967295
 8003c30:	4620      	mov	r0, r4
 8003c32:	bd70      	pop	{r4, r5, r6, pc}
 8003c34:	20000140 	.word	0x20000140

08003c38 <_malloc_r>:
 8003c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c3c:	1ccd      	adds	r5, r1, #3
 8003c3e:	f025 0503 	bic.w	r5, r5, #3
 8003c42:	3508      	adds	r5, #8
 8003c44:	2d0c      	cmp	r5, #12
 8003c46:	bf38      	it	cc
 8003c48:	250c      	movcc	r5, #12
 8003c4a:	2d00      	cmp	r5, #0
 8003c4c:	4607      	mov	r7, r0
 8003c4e:	db01      	blt.n	8003c54 <_malloc_r+0x1c>
 8003c50:	42a9      	cmp	r1, r5
 8003c52:	d905      	bls.n	8003c60 <_malloc_r+0x28>
 8003c54:	230c      	movs	r3, #12
 8003c56:	603b      	str	r3, [r7, #0]
 8003c58:	2600      	movs	r6, #0
 8003c5a:	4630      	mov	r0, r6
 8003c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c60:	4e2e      	ldr	r6, [pc, #184]	; (8003d1c <_malloc_r+0xe4>)
 8003c62:	f000 fdbb 	bl	80047dc <__malloc_lock>
 8003c66:	6833      	ldr	r3, [r6, #0]
 8003c68:	461c      	mov	r4, r3
 8003c6a:	bb34      	cbnz	r4, 8003cba <_malloc_r+0x82>
 8003c6c:	4629      	mov	r1, r5
 8003c6e:	4638      	mov	r0, r7
 8003c70:	f7ff ffc2 	bl	8003bf8 <sbrk_aligned>
 8003c74:	1c43      	adds	r3, r0, #1
 8003c76:	4604      	mov	r4, r0
 8003c78:	d14d      	bne.n	8003d16 <_malloc_r+0xde>
 8003c7a:	6834      	ldr	r4, [r6, #0]
 8003c7c:	4626      	mov	r6, r4
 8003c7e:	2e00      	cmp	r6, #0
 8003c80:	d140      	bne.n	8003d04 <_malloc_r+0xcc>
 8003c82:	6823      	ldr	r3, [r4, #0]
 8003c84:	4631      	mov	r1, r6
 8003c86:	4638      	mov	r0, r7
 8003c88:	eb04 0803 	add.w	r8, r4, r3
 8003c8c:	f000 fb36 	bl	80042fc <_sbrk_r>
 8003c90:	4580      	cmp	r8, r0
 8003c92:	d13a      	bne.n	8003d0a <_malloc_r+0xd2>
 8003c94:	6821      	ldr	r1, [r4, #0]
 8003c96:	3503      	adds	r5, #3
 8003c98:	1a6d      	subs	r5, r5, r1
 8003c9a:	f025 0503 	bic.w	r5, r5, #3
 8003c9e:	3508      	adds	r5, #8
 8003ca0:	2d0c      	cmp	r5, #12
 8003ca2:	bf38      	it	cc
 8003ca4:	250c      	movcc	r5, #12
 8003ca6:	4629      	mov	r1, r5
 8003ca8:	4638      	mov	r0, r7
 8003caa:	f7ff ffa5 	bl	8003bf8 <sbrk_aligned>
 8003cae:	3001      	adds	r0, #1
 8003cb0:	d02b      	beq.n	8003d0a <_malloc_r+0xd2>
 8003cb2:	6823      	ldr	r3, [r4, #0]
 8003cb4:	442b      	add	r3, r5
 8003cb6:	6023      	str	r3, [r4, #0]
 8003cb8:	e00e      	b.n	8003cd8 <_malloc_r+0xa0>
 8003cba:	6822      	ldr	r2, [r4, #0]
 8003cbc:	1b52      	subs	r2, r2, r5
 8003cbe:	d41e      	bmi.n	8003cfe <_malloc_r+0xc6>
 8003cc0:	2a0b      	cmp	r2, #11
 8003cc2:	d916      	bls.n	8003cf2 <_malloc_r+0xba>
 8003cc4:	1961      	adds	r1, r4, r5
 8003cc6:	42a3      	cmp	r3, r4
 8003cc8:	6025      	str	r5, [r4, #0]
 8003cca:	bf18      	it	ne
 8003ccc:	6059      	strne	r1, [r3, #4]
 8003cce:	6863      	ldr	r3, [r4, #4]
 8003cd0:	bf08      	it	eq
 8003cd2:	6031      	streq	r1, [r6, #0]
 8003cd4:	5162      	str	r2, [r4, r5]
 8003cd6:	604b      	str	r3, [r1, #4]
 8003cd8:	4638      	mov	r0, r7
 8003cda:	f104 060b 	add.w	r6, r4, #11
 8003cde:	f000 fd83 	bl	80047e8 <__malloc_unlock>
 8003ce2:	f026 0607 	bic.w	r6, r6, #7
 8003ce6:	1d23      	adds	r3, r4, #4
 8003ce8:	1af2      	subs	r2, r6, r3
 8003cea:	d0b6      	beq.n	8003c5a <_malloc_r+0x22>
 8003cec:	1b9b      	subs	r3, r3, r6
 8003cee:	50a3      	str	r3, [r4, r2]
 8003cf0:	e7b3      	b.n	8003c5a <_malloc_r+0x22>
 8003cf2:	6862      	ldr	r2, [r4, #4]
 8003cf4:	42a3      	cmp	r3, r4
 8003cf6:	bf0c      	ite	eq
 8003cf8:	6032      	streq	r2, [r6, #0]
 8003cfa:	605a      	strne	r2, [r3, #4]
 8003cfc:	e7ec      	b.n	8003cd8 <_malloc_r+0xa0>
 8003cfe:	4623      	mov	r3, r4
 8003d00:	6864      	ldr	r4, [r4, #4]
 8003d02:	e7b2      	b.n	8003c6a <_malloc_r+0x32>
 8003d04:	4634      	mov	r4, r6
 8003d06:	6876      	ldr	r6, [r6, #4]
 8003d08:	e7b9      	b.n	8003c7e <_malloc_r+0x46>
 8003d0a:	230c      	movs	r3, #12
 8003d0c:	603b      	str	r3, [r7, #0]
 8003d0e:	4638      	mov	r0, r7
 8003d10:	f000 fd6a 	bl	80047e8 <__malloc_unlock>
 8003d14:	e7a1      	b.n	8003c5a <_malloc_r+0x22>
 8003d16:	6025      	str	r5, [r4, #0]
 8003d18:	e7de      	b.n	8003cd8 <_malloc_r+0xa0>
 8003d1a:	bf00      	nop
 8003d1c:	2000013c 	.word	0x2000013c

08003d20 <__sfputc_r>:
 8003d20:	6893      	ldr	r3, [r2, #8]
 8003d22:	3b01      	subs	r3, #1
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	b410      	push	{r4}
 8003d28:	6093      	str	r3, [r2, #8]
 8003d2a:	da08      	bge.n	8003d3e <__sfputc_r+0x1e>
 8003d2c:	6994      	ldr	r4, [r2, #24]
 8003d2e:	42a3      	cmp	r3, r4
 8003d30:	db01      	blt.n	8003d36 <__sfputc_r+0x16>
 8003d32:	290a      	cmp	r1, #10
 8003d34:	d103      	bne.n	8003d3e <__sfputc_r+0x1e>
 8003d36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d3a:	f000 bb33 	b.w	80043a4 <__swbuf_r>
 8003d3e:	6813      	ldr	r3, [r2, #0]
 8003d40:	1c58      	adds	r0, r3, #1
 8003d42:	6010      	str	r0, [r2, #0]
 8003d44:	7019      	strb	r1, [r3, #0]
 8003d46:	4608      	mov	r0, r1
 8003d48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <__sfputs_r>:
 8003d4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d50:	4606      	mov	r6, r0
 8003d52:	460f      	mov	r7, r1
 8003d54:	4614      	mov	r4, r2
 8003d56:	18d5      	adds	r5, r2, r3
 8003d58:	42ac      	cmp	r4, r5
 8003d5a:	d101      	bne.n	8003d60 <__sfputs_r+0x12>
 8003d5c:	2000      	movs	r0, #0
 8003d5e:	e007      	b.n	8003d70 <__sfputs_r+0x22>
 8003d60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d64:	463a      	mov	r2, r7
 8003d66:	4630      	mov	r0, r6
 8003d68:	f7ff ffda 	bl	8003d20 <__sfputc_r>
 8003d6c:	1c43      	adds	r3, r0, #1
 8003d6e:	d1f3      	bne.n	8003d58 <__sfputs_r+0xa>
 8003d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003d74 <_vfiprintf_r>:
 8003d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d78:	460d      	mov	r5, r1
 8003d7a:	b09d      	sub	sp, #116	; 0x74
 8003d7c:	4614      	mov	r4, r2
 8003d7e:	4698      	mov	r8, r3
 8003d80:	4606      	mov	r6, r0
 8003d82:	b118      	cbz	r0, 8003d8c <_vfiprintf_r+0x18>
 8003d84:	6983      	ldr	r3, [r0, #24]
 8003d86:	b90b      	cbnz	r3, 8003d8c <_vfiprintf_r+0x18>
 8003d88:	f7ff fe96 	bl	8003ab8 <__sinit>
 8003d8c:	4b89      	ldr	r3, [pc, #548]	; (8003fb4 <_vfiprintf_r+0x240>)
 8003d8e:	429d      	cmp	r5, r3
 8003d90:	d11b      	bne.n	8003dca <_vfiprintf_r+0x56>
 8003d92:	6875      	ldr	r5, [r6, #4]
 8003d94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d96:	07d9      	lsls	r1, r3, #31
 8003d98:	d405      	bmi.n	8003da6 <_vfiprintf_r+0x32>
 8003d9a:	89ab      	ldrh	r3, [r5, #12]
 8003d9c:	059a      	lsls	r2, r3, #22
 8003d9e:	d402      	bmi.n	8003da6 <_vfiprintf_r+0x32>
 8003da0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003da2:	f7ff ff27 	bl	8003bf4 <__retarget_lock_acquire_recursive>
 8003da6:	89ab      	ldrh	r3, [r5, #12]
 8003da8:	071b      	lsls	r3, r3, #28
 8003daa:	d501      	bpl.n	8003db0 <_vfiprintf_r+0x3c>
 8003dac:	692b      	ldr	r3, [r5, #16]
 8003dae:	b9eb      	cbnz	r3, 8003dec <_vfiprintf_r+0x78>
 8003db0:	4629      	mov	r1, r5
 8003db2:	4630      	mov	r0, r6
 8003db4:	f000 fb5a 	bl	800446c <__swsetup_r>
 8003db8:	b1c0      	cbz	r0, 8003dec <_vfiprintf_r+0x78>
 8003dba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003dbc:	07dc      	lsls	r4, r3, #31
 8003dbe:	d50e      	bpl.n	8003dde <_vfiprintf_r+0x6a>
 8003dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc4:	b01d      	add	sp, #116	; 0x74
 8003dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dca:	4b7b      	ldr	r3, [pc, #492]	; (8003fb8 <_vfiprintf_r+0x244>)
 8003dcc:	429d      	cmp	r5, r3
 8003dce:	d101      	bne.n	8003dd4 <_vfiprintf_r+0x60>
 8003dd0:	68b5      	ldr	r5, [r6, #8]
 8003dd2:	e7df      	b.n	8003d94 <_vfiprintf_r+0x20>
 8003dd4:	4b79      	ldr	r3, [pc, #484]	; (8003fbc <_vfiprintf_r+0x248>)
 8003dd6:	429d      	cmp	r5, r3
 8003dd8:	bf08      	it	eq
 8003dda:	68f5      	ldreq	r5, [r6, #12]
 8003ddc:	e7da      	b.n	8003d94 <_vfiprintf_r+0x20>
 8003dde:	89ab      	ldrh	r3, [r5, #12]
 8003de0:	0598      	lsls	r0, r3, #22
 8003de2:	d4ed      	bmi.n	8003dc0 <_vfiprintf_r+0x4c>
 8003de4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003de6:	f7ff ff06 	bl	8003bf6 <__retarget_lock_release_recursive>
 8003dea:	e7e9      	b.n	8003dc0 <_vfiprintf_r+0x4c>
 8003dec:	2300      	movs	r3, #0
 8003dee:	9309      	str	r3, [sp, #36]	; 0x24
 8003df0:	2320      	movs	r3, #32
 8003df2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003df6:	f8cd 800c 	str.w	r8, [sp, #12]
 8003dfa:	2330      	movs	r3, #48	; 0x30
 8003dfc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003fc0 <_vfiprintf_r+0x24c>
 8003e00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e04:	f04f 0901 	mov.w	r9, #1
 8003e08:	4623      	mov	r3, r4
 8003e0a:	469a      	mov	sl, r3
 8003e0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e10:	b10a      	cbz	r2, 8003e16 <_vfiprintf_r+0xa2>
 8003e12:	2a25      	cmp	r2, #37	; 0x25
 8003e14:	d1f9      	bne.n	8003e0a <_vfiprintf_r+0x96>
 8003e16:	ebba 0b04 	subs.w	fp, sl, r4
 8003e1a:	d00b      	beq.n	8003e34 <_vfiprintf_r+0xc0>
 8003e1c:	465b      	mov	r3, fp
 8003e1e:	4622      	mov	r2, r4
 8003e20:	4629      	mov	r1, r5
 8003e22:	4630      	mov	r0, r6
 8003e24:	f7ff ff93 	bl	8003d4e <__sfputs_r>
 8003e28:	3001      	adds	r0, #1
 8003e2a:	f000 80aa 	beq.w	8003f82 <_vfiprintf_r+0x20e>
 8003e2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e30:	445a      	add	r2, fp
 8003e32:	9209      	str	r2, [sp, #36]	; 0x24
 8003e34:	f89a 3000 	ldrb.w	r3, [sl]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f000 80a2 	beq.w	8003f82 <_vfiprintf_r+0x20e>
 8003e3e:	2300      	movs	r3, #0
 8003e40:	f04f 32ff 	mov.w	r2, #4294967295
 8003e44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e48:	f10a 0a01 	add.w	sl, sl, #1
 8003e4c:	9304      	str	r3, [sp, #16]
 8003e4e:	9307      	str	r3, [sp, #28]
 8003e50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e54:	931a      	str	r3, [sp, #104]	; 0x68
 8003e56:	4654      	mov	r4, sl
 8003e58:	2205      	movs	r2, #5
 8003e5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e5e:	4858      	ldr	r0, [pc, #352]	; (8003fc0 <_vfiprintf_r+0x24c>)
 8003e60:	f7fc f9b6 	bl	80001d0 <memchr>
 8003e64:	9a04      	ldr	r2, [sp, #16]
 8003e66:	b9d8      	cbnz	r0, 8003ea0 <_vfiprintf_r+0x12c>
 8003e68:	06d1      	lsls	r1, r2, #27
 8003e6a:	bf44      	itt	mi
 8003e6c:	2320      	movmi	r3, #32
 8003e6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e72:	0713      	lsls	r3, r2, #28
 8003e74:	bf44      	itt	mi
 8003e76:	232b      	movmi	r3, #43	; 0x2b
 8003e78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e7c:	f89a 3000 	ldrb.w	r3, [sl]
 8003e80:	2b2a      	cmp	r3, #42	; 0x2a
 8003e82:	d015      	beq.n	8003eb0 <_vfiprintf_r+0x13c>
 8003e84:	9a07      	ldr	r2, [sp, #28]
 8003e86:	4654      	mov	r4, sl
 8003e88:	2000      	movs	r0, #0
 8003e8a:	f04f 0c0a 	mov.w	ip, #10
 8003e8e:	4621      	mov	r1, r4
 8003e90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e94:	3b30      	subs	r3, #48	; 0x30
 8003e96:	2b09      	cmp	r3, #9
 8003e98:	d94e      	bls.n	8003f38 <_vfiprintf_r+0x1c4>
 8003e9a:	b1b0      	cbz	r0, 8003eca <_vfiprintf_r+0x156>
 8003e9c:	9207      	str	r2, [sp, #28]
 8003e9e:	e014      	b.n	8003eca <_vfiprintf_r+0x156>
 8003ea0:	eba0 0308 	sub.w	r3, r0, r8
 8003ea4:	fa09 f303 	lsl.w	r3, r9, r3
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	9304      	str	r3, [sp, #16]
 8003eac:	46a2      	mov	sl, r4
 8003eae:	e7d2      	b.n	8003e56 <_vfiprintf_r+0xe2>
 8003eb0:	9b03      	ldr	r3, [sp, #12]
 8003eb2:	1d19      	adds	r1, r3, #4
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	9103      	str	r1, [sp, #12]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	bfbb      	ittet	lt
 8003ebc:	425b      	neglt	r3, r3
 8003ebe:	f042 0202 	orrlt.w	r2, r2, #2
 8003ec2:	9307      	strge	r3, [sp, #28]
 8003ec4:	9307      	strlt	r3, [sp, #28]
 8003ec6:	bfb8      	it	lt
 8003ec8:	9204      	strlt	r2, [sp, #16]
 8003eca:	7823      	ldrb	r3, [r4, #0]
 8003ecc:	2b2e      	cmp	r3, #46	; 0x2e
 8003ece:	d10c      	bne.n	8003eea <_vfiprintf_r+0x176>
 8003ed0:	7863      	ldrb	r3, [r4, #1]
 8003ed2:	2b2a      	cmp	r3, #42	; 0x2a
 8003ed4:	d135      	bne.n	8003f42 <_vfiprintf_r+0x1ce>
 8003ed6:	9b03      	ldr	r3, [sp, #12]
 8003ed8:	1d1a      	adds	r2, r3, #4
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	9203      	str	r2, [sp, #12]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	bfb8      	it	lt
 8003ee2:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ee6:	3402      	adds	r4, #2
 8003ee8:	9305      	str	r3, [sp, #20]
 8003eea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003fd0 <_vfiprintf_r+0x25c>
 8003eee:	7821      	ldrb	r1, [r4, #0]
 8003ef0:	2203      	movs	r2, #3
 8003ef2:	4650      	mov	r0, sl
 8003ef4:	f7fc f96c 	bl	80001d0 <memchr>
 8003ef8:	b140      	cbz	r0, 8003f0c <_vfiprintf_r+0x198>
 8003efa:	2340      	movs	r3, #64	; 0x40
 8003efc:	eba0 000a 	sub.w	r0, r0, sl
 8003f00:	fa03 f000 	lsl.w	r0, r3, r0
 8003f04:	9b04      	ldr	r3, [sp, #16]
 8003f06:	4303      	orrs	r3, r0
 8003f08:	3401      	adds	r4, #1
 8003f0a:	9304      	str	r3, [sp, #16]
 8003f0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f10:	482c      	ldr	r0, [pc, #176]	; (8003fc4 <_vfiprintf_r+0x250>)
 8003f12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f16:	2206      	movs	r2, #6
 8003f18:	f7fc f95a 	bl	80001d0 <memchr>
 8003f1c:	2800      	cmp	r0, #0
 8003f1e:	d03f      	beq.n	8003fa0 <_vfiprintf_r+0x22c>
 8003f20:	4b29      	ldr	r3, [pc, #164]	; (8003fc8 <_vfiprintf_r+0x254>)
 8003f22:	bb1b      	cbnz	r3, 8003f6c <_vfiprintf_r+0x1f8>
 8003f24:	9b03      	ldr	r3, [sp, #12]
 8003f26:	3307      	adds	r3, #7
 8003f28:	f023 0307 	bic.w	r3, r3, #7
 8003f2c:	3308      	adds	r3, #8
 8003f2e:	9303      	str	r3, [sp, #12]
 8003f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f32:	443b      	add	r3, r7
 8003f34:	9309      	str	r3, [sp, #36]	; 0x24
 8003f36:	e767      	b.n	8003e08 <_vfiprintf_r+0x94>
 8003f38:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f3c:	460c      	mov	r4, r1
 8003f3e:	2001      	movs	r0, #1
 8003f40:	e7a5      	b.n	8003e8e <_vfiprintf_r+0x11a>
 8003f42:	2300      	movs	r3, #0
 8003f44:	3401      	adds	r4, #1
 8003f46:	9305      	str	r3, [sp, #20]
 8003f48:	4619      	mov	r1, r3
 8003f4a:	f04f 0c0a 	mov.w	ip, #10
 8003f4e:	4620      	mov	r0, r4
 8003f50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f54:	3a30      	subs	r2, #48	; 0x30
 8003f56:	2a09      	cmp	r2, #9
 8003f58:	d903      	bls.n	8003f62 <_vfiprintf_r+0x1ee>
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d0c5      	beq.n	8003eea <_vfiprintf_r+0x176>
 8003f5e:	9105      	str	r1, [sp, #20]
 8003f60:	e7c3      	b.n	8003eea <_vfiprintf_r+0x176>
 8003f62:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f66:	4604      	mov	r4, r0
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e7f0      	b.n	8003f4e <_vfiprintf_r+0x1da>
 8003f6c:	ab03      	add	r3, sp, #12
 8003f6e:	9300      	str	r3, [sp, #0]
 8003f70:	462a      	mov	r2, r5
 8003f72:	4b16      	ldr	r3, [pc, #88]	; (8003fcc <_vfiprintf_r+0x258>)
 8003f74:	a904      	add	r1, sp, #16
 8003f76:	4630      	mov	r0, r6
 8003f78:	f3af 8000 	nop.w
 8003f7c:	4607      	mov	r7, r0
 8003f7e:	1c78      	adds	r0, r7, #1
 8003f80:	d1d6      	bne.n	8003f30 <_vfiprintf_r+0x1bc>
 8003f82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f84:	07d9      	lsls	r1, r3, #31
 8003f86:	d405      	bmi.n	8003f94 <_vfiprintf_r+0x220>
 8003f88:	89ab      	ldrh	r3, [r5, #12]
 8003f8a:	059a      	lsls	r2, r3, #22
 8003f8c:	d402      	bmi.n	8003f94 <_vfiprintf_r+0x220>
 8003f8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f90:	f7ff fe31 	bl	8003bf6 <__retarget_lock_release_recursive>
 8003f94:	89ab      	ldrh	r3, [r5, #12]
 8003f96:	065b      	lsls	r3, r3, #25
 8003f98:	f53f af12 	bmi.w	8003dc0 <_vfiprintf_r+0x4c>
 8003f9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f9e:	e711      	b.n	8003dc4 <_vfiprintf_r+0x50>
 8003fa0:	ab03      	add	r3, sp, #12
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	462a      	mov	r2, r5
 8003fa6:	4b09      	ldr	r3, [pc, #36]	; (8003fcc <_vfiprintf_r+0x258>)
 8003fa8:	a904      	add	r1, sp, #16
 8003faa:	4630      	mov	r0, r6
 8003fac:	f000 f880 	bl	80040b0 <_printf_i>
 8003fb0:	e7e4      	b.n	8003f7c <_vfiprintf_r+0x208>
 8003fb2:	bf00      	nop
 8003fb4:	08004984 	.word	0x08004984
 8003fb8:	080049a4 	.word	0x080049a4
 8003fbc:	08004964 	.word	0x08004964
 8003fc0:	080049c4 	.word	0x080049c4
 8003fc4:	080049ce 	.word	0x080049ce
 8003fc8:	00000000 	.word	0x00000000
 8003fcc:	08003d4f 	.word	0x08003d4f
 8003fd0:	080049ca 	.word	0x080049ca

08003fd4 <_printf_common>:
 8003fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fd8:	4616      	mov	r6, r2
 8003fda:	4699      	mov	r9, r3
 8003fdc:	688a      	ldr	r2, [r1, #8]
 8003fde:	690b      	ldr	r3, [r1, #16]
 8003fe0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	bfb8      	it	lt
 8003fe8:	4613      	movlt	r3, r2
 8003fea:	6033      	str	r3, [r6, #0]
 8003fec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ff0:	4607      	mov	r7, r0
 8003ff2:	460c      	mov	r4, r1
 8003ff4:	b10a      	cbz	r2, 8003ffa <_printf_common+0x26>
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	6033      	str	r3, [r6, #0]
 8003ffa:	6823      	ldr	r3, [r4, #0]
 8003ffc:	0699      	lsls	r1, r3, #26
 8003ffe:	bf42      	ittt	mi
 8004000:	6833      	ldrmi	r3, [r6, #0]
 8004002:	3302      	addmi	r3, #2
 8004004:	6033      	strmi	r3, [r6, #0]
 8004006:	6825      	ldr	r5, [r4, #0]
 8004008:	f015 0506 	ands.w	r5, r5, #6
 800400c:	d106      	bne.n	800401c <_printf_common+0x48>
 800400e:	f104 0a19 	add.w	sl, r4, #25
 8004012:	68e3      	ldr	r3, [r4, #12]
 8004014:	6832      	ldr	r2, [r6, #0]
 8004016:	1a9b      	subs	r3, r3, r2
 8004018:	42ab      	cmp	r3, r5
 800401a:	dc26      	bgt.n	800406a <_printf_common+0x96>
 800401c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004020:	1e13      	subs	r3, r2, #0
 8004022:	6822      	ldr	r2, [r4, #0]
 8004024:	bf18      	it	ne
 8004026:	2301      	movne	r3, #1
 8004028:	0692      	lsls	r2, r2, #26
 800402a:	d42b      	bmi.n	8004084 <_printf_common+0xb0>
 800402c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004030:	4649      	mov	r1, r9
 8004032:	4638      	mov	r0, r7
 8004034:	47c0      	blx	r8
 8004036:	3001      	adds	r0, #1
 8004038:	d01e      	beq.n	8004078 <_printf_common+0xa4>
 800403a:	6823      	ldr	r3, [r4, #0]
 800403c:	68e5      	ldr	r5, [r4, #12]
 800403e:	6832      	ldr	r2, [r6, #0]
 8004040:	f003 0306 	and.w	r3, r3, #6
 8004044:	2b04      	cmp	r3, #4
 8004046:	bf08      	it	eq
 8004048:	1aad      	subeq	r5, r5, r2
 800404a:	68a3      	ldr	r3, [r4, #8]
 800404c:	6922      	ldr	r2, [r4, #16]
 800404e:	bf0c      	ite	eq
 8004050:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004054:	2500      	movne	r5, #0
 8004056:	4293      	cmp	r3, r2
 8004058:	bfc4      	itt	gt
 800405a:	1a9b      	subgt	r3, r3, r2
 800405c:	18ed      	addgt	r5, r5, r3
 800405e:	2600      	movs	r6, #0
 8004060:	341a      	adds	r4, #26
 8004062:	42b5      	cmp	r5, r6
 8004064:	d11a      	bne.n	800409c <_printf_common+0xc8>
 8004066:	2000      	movs	r0, #0
 8004068:	e008      	b.n	800407c <_printf_common+0xa8>
 800406a:	2301      	movs	r3, #1
 800406c:	4652      	mov	r2, sl
 800406e:	4649      	mov	r1, r9
 8004070:	4638      	mov	r0, r7
 8004072:	47c0      	blx	r8
 8004074:	3001      	adds	r0, #1
 8004076:	d103      	bne.n	8004080 <_printf_common+0xac>
 8004078:	f04f 30ff 	mov.w	r0, #4294967295
 800407c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004080:	3501      	adds	r5, #1
 8004082:	e7c6      	b.n	8004012 <_printf_common+0x3e>
 8004084:	18e1      	adds	r1, r4, r3
 8004086:	1c5a      	adds	r2, r3, #1
 8004088:	2030      	movs	r0, #48	; 0x30
 800408a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800408e:	4422      	add	r2, r4
 8004090:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004094:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004098:	3302      	adds	r3, #2
 800409a:	e7c7      	b.n	800402c <_printf_common+0x58>
 800409c:	2301      	movs	r3, #1
 800409e:	4622      	mov	r2, r4
 80040a0:	4649      	mov	r1, r9
 80040a2:	4638      	mov	r0, r7
 80040a4:	47c0      	blx	r8
 80040a6:	3001      	adds	r0, #1
 80040a8:	d0e6      	beq.n	8004078 <_printf_common+0xa4>
 80040aa:	3601      	adds	r6, #1
 80040ac:	e7d9      	b.n	8004062 <_printf_common+0x8e>
	...

080040b0 <_printf_i>:
 80040b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040b4:	7e0f      	ldrb	r7, [r1, #24]
 80040b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80040b8:	2f78      	cmp	r7, #120	; 0x78
 80040ba:	4691      	mov	r9, r2
 80040bc:	4680      	mov	r8, r0
 80040be:	460c      	mov	r4, r1
 80040c0:	469a      	mov	sl, r3
 80040c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80040c6:	d807      	bhi.n	80040d8 <_printf_i+0x28>
 80040c8:	2f62      	cmp	r7, #98	; 0x62
 80040ca:	d80a      	bhi.n	80040e2 <_printf_i+0x32>
 80040cc:	2f00      	cmp	r7, #0
 80040ce:	f000 80d8 	beq.w	8004282 <_printf_i+0x1d2>
 80040d2:	2f58      	cmp	r7, #88	; 0x58
 80040d4:	f000 80a3 	beq.w	800421e <_printf_i+0x16e>
 80040d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80040e0:	e03a      	b.n	8004158 <_printf_i+0xa8>
 80040e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80040e6:	2b15      	cmp	r3, #21
 80040e8:	d8f6      	bhi.n	80040d8 <_printf_i+0x28>
 80040ea:	a101      	add	r1, pc, #4	; (adr r1, 80040f0 <_printf_i+0x40>)
 80040ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040f0:	08004149 	.word	0x08004149
 80040f4:	0800415d 	.word	0x0800415d
 80040f8:	080040d9 	.word	0x080040d9
 80040fc:	080040d9 	.word	0x080040d9
 8004100:	080040d9 	.word	0x080040d9
 8004104:	080040d9 	.word	0x080040d9
 8004108:	0800415d 	.word	0x0800415d
 800410c:	080040d9 	.word	0x080040d9
 8004110:	080040d9 	.word	0x080040d9
 8004114:	080040d9 	.word	0x080040d9
 8004118:	080040d9 	.word	0x080040d9
 800411c:	08004269 	.word	0x08004269
 8004120:	0800418d 	.word	0x0800418d
 8004124:	0800424b 	.word	0x0800424b
 8004128:	080040d9 	.word	0x080040d9
 800412c:	080040d9 	.word	0x080040d9
 8004130:	0800428b 	.word	0x0800428b
 8004134:	080040d9 	.word	0x080040d9
 8004138:	0800418d 	.word	0x0800418d
 800413c:	080040d9 	.word	0x080040d9
 8004140:	080040d9 	.word	0x080040d9
 8004144:	08004253 	.word	0x08004253
 8004148:	682b      	ldr	r3, [r5, #0]
 800414a:	1d1a      	adds	r2, r3, #4
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	602a      	str	r2, [r5, #0]
 8004150:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004154:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004158:	2301      	movs	r3, #1
 800415a:	e0a3      	b.n	80042a4 <_printf_i+0x1f4>
 800415c:	6820      	ldr	r0, [r4, #0]
 800415e:	6829      	ldr	r1, [r5, #0]
 8004160:	0606      	lsls	r6, r0, #24
 8004162:	f101 0304 	add.w	r3, r1, #4
 8004166:	d50a      	bpl.n	800417e <_printf_i+0xce>
 8004168:	680e      	ldr	r6, [r1, #0]
 800416a:	602b      	str	r3, [r5, #0]
 800416c:	2e00      	cmp	r6, #0
 800416e:	da03      	bge.n	8004178 <_printf_i+0xc8>
 8004170:	232d      	movs	r3, #45	; 0x2d
 8004172:	4276      	negs	r6, r6
 8004174:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004178:	485e      	ldr	r0, [pc, #376]	; (80042f4 <_printf_i+0x244>)
 800417a:	230a      	movs	r3, #10
 800417c:	e019      	b.n	80041b2 <_printf_i+0x102>
 800417e:	680e      	ldr	r6, [r1, #0]
 8004180:	602b      	str	r3, [r5, #0]
 8004182:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004186:	bf18      	it	ne
 8004188:	b236      	sxthne	r6, r6
 800418a:	e7ef      	b.n	800416c <_printf_i+0xbc>
 800418c:	682b      	ldr	r3, [r5, #0]
 800418e:	6820      	ldr	r0, [r4, #0]
 8004190:	1d19      	adds	r1, r3, #4
 8004192:	6029      	str	r1, [r5, #0]
 8004194:	0601      	lsls	r1, r0, #24
 8004196:	d501      	bpl.n	800419c <_printf_i+0xec>
 8004198:	681e      	ldr	r6, [r3, #0]
 800419a:	e002      	b.n	80041a2 <_printf_i+0xf2>
 800419c:	0646      	lsls	r6, r0, #25
 800419e:	d5fb      	bpl.n	8004198 <_printf_i+0xe8>
 80041a0:	881e      	ldrh	r6, [r3, #0]
 80041a2:	4854      	ldr	r0, [pc, #336]	; (80042f4 <_printf_i+0x244>)
 80041a4:	2f6f      	cmp	r7, #111	; 0x6f
 80041a6:	bf0c      	ite	eq
 80041a8:	2308      	moveq	r3, #8
 80041aa:	230a      	movne	r3, #10
 80041ac:	2100      	movs	r1, #0
 80041ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041b2:	6865      	ldr	r5, [r4, #4]
 80041b4:	60a5      	str	r5, [r4, #8]
 80041b6:	2d00      	cmp	r5, #0
 80041b8:	bfa2      	ittt	ge
 80041ba:	6821      	ldrge	r1, [r4, #0]
 80041bc:	f021 0104 	bicge.w	r1, r1, #4
 80041c0:	6021      	strge	r1, [r4, #0]
 80041c2:	b90e      	cbnz	r6, 80041c8 <_printf_i+0x118>
 80041c4:	2d00      	cmp	r5, #0
 80041c6:	d04d      	beq.n	8004264 <_printf_i+0x1b4>
 80041c8:	4615      	mov	r5, r2
 80041ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80041ce:	fb03 6711 	mls	r7, r3, r1, r6
 80041d2:	5dc7      	ldrb	r7, [r0, r7]
 80041d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80041d8:	4637      	mov	r7, r6
 80041da:	42bb      	cmp	r3, r7
 80041dc:	460e      	mov	r6, r1
 80041de:	d9f4      	bls.n	80041ca <_printf_i+0x11a>
 80041e0:	2b08      	cmp	r3, #8
 80041e2:	d10b      	bne.n	80041fc <_printf_i+0x14c>
 80041e4:	6823      	ldr	r3, [r4, #0]
 80041e6:	07de      	lsls	r6, r3, #31
 80041e8:	d508      	bpl.n	80041fc <_printf_i+0x14c>
 80041ea:	6923      	ldr	r3, [r4, #16]
 80041ec:	6861      	ldr	r1, [r4, #4]
 80041ee:	4299      	cmp	r1, r3
 80041f0:	bfde      	ittt	le
 80041f2:	2330      	movle	r3, #48	; 0x30
 80041f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80041f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80041fc:	1b52      	subs	r2, r2, r5
 80041fe:	6122      	str	r2, [r4, #16]
 8004200:	f8cd a000 	str.w	sl, [sp]
 8004204:	464b      	mov	r3, r9
 8004206:	aa03      	add	r2, sp, #12
 8004208:	4621      	mov	r1, r4
 800420a:	4640      	mov	r0, r8
 800420c:	f7ff fee2 	bl	8003fd4 <_printf_common>
 8004210:	3001      	adds	r0, #1
 8004212:	d14c      	bne.n	80042ae <_printf_i+0x1fe>
 8004214:	f04f 30ff 	mov.w	r0, #4294967295
 8004218:	b004      	add	sp, #16
 800421a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800421e:	4835      	ldr	r0, [pc, #212]	; (80042f4 <_printf_i+0x244>)
 8004220:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004224:	6829      	ldr	r1, [r5, #0]
 8004226:	6823      	ldr	r3, [r4, #0]
 8004228:	f851 6b04 	ldr.w	r6, [r1], #4
 800422c:	6029      	str	r1, [r5, #0]
 800422e:	061d      	lsls	r5, r3, #24
 8004230:	d514      	bpl.n	800425c <_printf_i+0x1ac>
 8004232:	07df      	lsls	r7, r3, #31
 8004234:	bf44      	itt	mi
 8004236:	f043 0320 	orrmi.w	r3, r3, #32
 800423a:	6023      	strmi	r3, [r4, #0]
 800423c:	b91e      	cbnz	r6, 8004246 <_printf_i+0x196>
 800423e:	6823      	ldr	r3, [r4, #0]
 8004240:	f023 0320 	bic.w	r3, r3, #32
 8004244:	6023      	str	r3, [r4, #0]
 8004246:	2310      	movs	r3, #16
 8004248:	e7b0      	b.n	80041ac <_printf_i+0xfc>
 800424a:	6823      	ldr	r3, [r4, #0]
 800424c:	f043 0320 	orr.w	r3, r3, #32
 8004250:	6023      	str	r3, [r4, #0]
 8004252:	2378      	movs	r3, #120	; 0x78
 8004254:	4828      	ldr	r0, [pc, #160]	; (80042f8 <_printf_i+0x248>)
 8004256:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800425a:	e7e3      	b.n	8004224 <_printf_i+0x174>
 800425c:	0659      	lsls	r1, r3, #25
 800425e:	bf48      	it	mi
 8004260:	b2b6      	uxthmi	r6, r6
 8004262:	e7e6      	b.n	8004232 <_printf_i+0x182>
 8004264:	4615      	mov	r5, r2
 8004266:	e7bb      	b.n	80041e0 <_printf_i+0x130>
 8004268:	682b      	ldr	r3, [r5, #0]
 800426a:	6826      	ldr	r6, [r4, #0]
 800426c:	6961      	ldr	r1, [r4, #20]
 800426e:	1d18      	adds	r0, r3, #4
 8004270:	6028      	str	r0, [r5, #0]
 8004272:	0635      	lsls	r5, r6, #24
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	d501      	bpl.n	800427c <_printf_i+0x1cc>
 8004278:	6019      	str	r1, [r3, #0]
 800427a:	e002      	b.n	8004282 <_printf_i+0x1d2>
 800427c:	0670      	lsls	r0, r6, #25
 800427e:	d5fb      	bpl.n	8004278 <_printf_i+0x1c8>
 8004280:	8019      	strh	r1, [r3, #0]
 8004282:	2300      	movs	r3, #0
 8004284:	6123      	str	r3, [r4, #16]
 8004286:	4615      	mov	r5, r2
 8004288:	e7ba      	b.n	8004200 <_printf_i+0x150>
 800428a:	682b      	ldr	r3, [r5, #0]
 800428c:	1d1a      	adds	r2, r3, #4
 800428e:	602a      	str	r2, [r5, #0]
 8004290:	681d      	ldr	r5, [r3, #0]
 8004292:	6862      	ldr	r2, [r4, #4]
 8004294:	2100      	movs	r1, #0
 8004296:	4628      	mov	r0, r5
 8004298:	f7fb ff9a 	bl	80001d0 <memchr>
 800429c:	b108      	cbz	r0, 80042a2 <_printf_i+0x1f2>
 800429e:	1b40      	subs	r0, r0, r5
 80042a0:	6060      	str	r0, [r4, #4]
 80042a2:	6863      	ldr	r3, [r4, #4]
 80042a4:	6123      	str	r3, [r4, #16]
 80042a6:	2300      	movs	r3, #0
 80042a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042ac:	e7a8      	b.n	8004200 <_printf_i+0x150>
 80042ae:	6923      	ldr	r3, [r4, #16]
 80042b0:	462a      	mov	r2, r5
 80042b2:	4649      	mov	r1, r9
 80042b4:	4640      	mov	r0, r8
 80042b6:	47d0      	blx	sl
 80042b8:	3001      	adds	r0, #1
 80042ba:	d0ab      	beq.n	8004214 <_printf_i+0x164>
 80042bc:	6823      	ldr	r3, [r4, #0]
 80042be:	079b      	lsls	r3, r3, #30
 80042c0:	d413      	bmi.n	80042ea <_printf_i+0x23a>
 80042c2:	68e0      	ldr	r0, [r4, #12]
 80042c4:	9b03      	ldr	r3, [sp, #12]
 80042c6:	4298      	cmp	r0, r3
 80042c8:	bfb8      	it	lt
 80042ca:	4618      	movlt	r0, r3
 80042cc:	e7a4      	b.n	8004218 <_printf_i+0x168>
 80042ce:	2301      	movs	r3, #1
 80042d0:	4632      	mov	r2, r6
 80042d2:	4649      	mov	r1, r9
 80042d4:	4640      	mov	r0, r8
 80042d6:	47d0      	blx	sl
 80042d8:	3001      	adds	r0, #1
 80042da:	d09b      	beq.n	8004214 <_printf_i+0x164>
 80042dc:	3501      	adds	r5, #1
 80042de:	68e3      	ldr	r3, [r4, #12]
 80042e0:	9903      	ldr	r1, [sp, #12]
 80042e2:	1a5b      	subs	r3, r3, r1
 80042e4:	42ab      	cmp	r3, r5
 80042e6:	dcf2      	bgt.n	80042ce <_printf_i+0x21e>
 80042e8:	e7eb      	b.n	80042c2 <_printf_i+0x212>
 80042ea:	2500      	movs	r5, #0
 80042ec:	f104 0619 	add.w	r6, r4, #25
 80042f0:	e7f5      	b.n	80042de <_printf_i+0x22e>
 80042f2:	bf00      	nop
 80042f4:	080049d5 	.word	0x080049d5
 80042f8:	080049e6 	.word	0x080049e6

080042fc <_sbrk_r>:
 80042fc:	b538      	push	{r3, r4, r5, lr}
 80042fe:	4d06      	ldr	r5, [pc, #24]	; (8004318 <_sbrk_r+0x1c>)
 8004300:	2300      	movs	r3, #0
 8004302:	4604      	mov	r4, r0
 8004304:	4608      	mov	r0, r1
 8004306:	602b      	str	r3, [r5, #0]
 8004308:	f7fc fc84 	bl	8000c14 <_sbrk>
 800430c:	1c43      	adds	r3, r0, #1
 800430e:	d102      	bne.n	8004316 <_sbrk_r+0x1a>
 8004310:	682b      	ldr	r3, [r5, #0]
 8004312:	b103      	cbz	r3, 8004316 <_sbrk_r+0x1a>
 8004314:	6023      	str	r3, [r4, #0]
 8004316:	bd38      	pop	{r3, r4, r5, pc}
 8004318:	20000144 	.word	0x20000144

0800431c <__sread>:
 800431c:	b510      	push	{r4, lr}
 800431e:	460c      	mov	r4, r1
 8004320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004324:	f000 fab2 	bl	800488c <_read_r>
 8004328:	2800      	cmp	r0, #0
 800432a:	bfab      	itete	ge
 800432c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800432e:	89a3      	ldrhlt	r3, [r4, #12]
 8004330:	181b      	addge	r3, r3, r0
 8004332:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004336:	bfac      	ite	ge
 8004338:	6563      	strge	r3, [r4, #84]	; 0x54
 800433a:	81a3      	strhlt	r3, [r4, #12]
 800433c:	bd10      	pop	{r4, pc}

0800433e <__swrite>:
 800433e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004342:	461f      	mov	r7, r3
 8004344:	898b      	ldrh	r3, [r1, #12]
 8004346:	05db      	lsls	r3, r3, #23
 8004348:	4605      	mov	r5, r0
 800434a:	460c      	mov	r4, r1
 800434c:	4616      	mov	r6, r2
 800434e:	d505      	bpl.n	800435c <__swrite+0x1e>
 8004350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004354:	2302      	movs	r3, #2
 8004356:	2200      	movs	r2, #0
 8004358:	f000 f9c8 	bl	80046ec <_lseek_r>
 800435c:	89a3      	ldrh	r3, [r4, #12]
 800435e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004362:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004366:	81a3      	strh	r3, [r4, #12]
 8004368:	4632      	mov	r2, r6
 800436a:	463b      	mov	r3, r7
 800436c:	4628      	mov	r0, r5
 800436e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004372:	f000 b869 	b.w	8004448 <_write_r>

08004376 <__sseek>:
 8004376:	b510      	push	{r4, lr}
 8004378:	460c      	mov	r4, r1
 800437a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800437e:	f000 f9b5 	bl	80046ec <_lseek_r>
 8004382:	1c43      	adds	r3, r0, #1
 8004384:	89a3      	ldrh	r3, [r4, #12]
 8004386:	bf15      	itete	ne
 8004388:	6560      	strne	r0, [r4, #84]	; 0x54
 800438a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800438e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004392:	81a3      	strheq	r3, [r4, #12]
 8004394:	bf18      	it	ne
 8004396:	81a3      	strhne	r3, [r4, #12]
 8004398:	bd10      	pop	{r4, pc}

0800439a <__sclose>:
 800439a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800439e:	f000 b8d3 	b.w	8004548 <_close_r>
	...

080043a4 <__swbuf_r>:
 80043a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043a6:	460e      	mov	r6, r1
 80043a8:	4614      	mov	r4, r2
 80043aa:	4605      	mov	r5, r0
 80043ac:	b118      	cbz	r0, 80043b6 <__swbuf_r+0x12>
 80043ae:	6983      	ldr	r3, [r0, #24]
 80043b0:	b90b      	cbnz	r3, 80043b6 <__swbuf_r+0x12>
 80043b2:	f7ff fb81 	bl	8003ab8 <__sinit>
 80043b6:	4b21      	ldr	r3, [pc, #132]	; (800443c <__swbuf_r+0x98>)
 80043b8:	429c      	cmp	r4, r3
 80043ba:	d12b      	bne.n	8004414 <__swbuf_r+0x70>
 80043bc:	686c      	ldr	r4, [r5, #4]
 80043be:	69a3      	ldr	r3, [r4, #24]
 80043c0:	60a3      	str	r3, [r4, #8]
 80043c2:	89a3      	ldrh	r3, [r4, #12]
 80043c4:	071a      	lsls	r2, r3, #28
 80043c6:	d52f      	bpl.n	8004428 <__swbuf_r+0x84>
 80043c8:	6923      	ldr	r3, [r4, #16]
 80043ca:	b36b      	cbz	r3, 8004428 <__swbuf_r+0x84>
 80043cc:	6923      	ldr	r3, [r4, #16]
 80043ce:	6820      	ldr	r0, [r4, #0]
 80043d0:	1ac0      	subs	r0, r0, r3
 80043d2:	6963      	ldr	r3, [r4, #20]
 80043d4:	b2f6      	uxtb	r6, r6
 80043d6:	4283      	cmp	r3, r0
 80043d8:	4637      	mov	r7, r6
 80043da:	dc04      	bgt.n	80043e6 <__swbuf_r+0x42>
 80043dc:	4621      	mov	r1, r4
 80043de:	4628      	mov	r0, r5
 80043e0:	f000 f948 	bl	8004674 <_fflush_r>
 80043e4:	bb30      	cbnz	r0, 8004434 <__swbuf_r+0x90>
 80043e6:	68a3      	ldr	r3, [r4, #8]
 80043e8:	3b01      	subs	r3, #1
 80043ea:	60a3      	str	r3, [r4, #8]
 80043ec:	6823      	ldr	r3, [r4, #0]
 80043ee:	1c5a      	adds	r2, r3, #1
 80043f0:	6022      	str	r2, [r4, #0]
 80043f2:	701e      	strb	r6, [r3, #0]
 80043f4:	6963      	ldr	r3, [r4, #20]
 80043f6:	3001      	adds	r0, #1
 80043f8:	4283      	cmp	r3, r0
 80043fa:	d004      	beq.n	8004406 <__swbuf_r+0x62>
 80043fc:	89a3      	ldrh	r3, [r4, #12]
 80043fe:	07db      	lsls	r3, r3, #31
 8004400:	d506      	bpl.n	8004410 <__swbuf_r+0x6c>
 8004402:	2e0a      	cmp	r6, #10
 8004404:	d104      	bne.n	8004410 <__swbuf_r+0x6c>
 8004406:	4621      	mov	r1, r4
 8004408:	4628      	mov	r0, r5
 800440a:	f000 f933 	bl	8004674 <_fflush_r>
 800440e:	b988      	cbnz	r0, 8004434 <__swbuf_r+0x90>
 8004410:	4638      	mov	r0, r7
 8004412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004414:	4b0a      	ldr	r3, [pc, #40]	; (8004440 <__swbuf_r+0x9c>)
 8004416:	429c      	cmp	r4, r3
 8004418:	d101      	bne.n	800441e <__swbuf_r+0x7a>
 800441a:	68ac      	ldr	r4, [r5, #8]
 800441c:	e7cf      	b.n	80043be <__swbuf_r+0x1a>
 800441e:	4b09      	ldr	r3, [pc, #36]	; (8004444 <__swbuf_r+0xa0>)
 8004420:	429c      	cmp	r4, r3
 8004422:	bf08      	it	eq
 8004424:	68ec      	ldreq	r4, [r5, #12]
 8004426:	e7ca      	b.n	80043be <__swbuf_r+0x1a>
 8004428:	4621      	mov	r1, r4
 800442a:	4628      	mov	r0, r5
 800442c:	f000 f81e 	bl	800446c <__swsetup_r>
 8004430:	2800      	cmp	r0, #0
 8004432:	d0cb      	beq.n	80043cc <__swbuf_r+0x28>
 8004434:	f04f 37ff 	mov.w	r7, #4294967295
 8004438:	e7ea      	b.n	8004410 <__swbuf_r+0x6c>
 800443a:	bf00      	nop
 800443c:	08004984 	.word	0x08004984
 8004440:	080049a4 	.word	0x080049a4
 8004444:	08004964 	.word	0x08004964

08004448 <_write_r>:
 8004448:	b538      	push	{r3, r4, r5, lr}
 800444a:	4d07      	ldr	r5, [pc, #28]	; (8004468 <_write_r+0x20>)
 800444c:	4604      	mov	r4, r0
 800444e:	4608      	mov	r0, r1
 8004450:	4611      	mov	r1, r2
 8004452:	2200      	movs	r2, #0
 8004454:	602a      	str	r2, [r5, #0]
 8004456:	461a      	mov	r2, r3
 8004458:	f7fc f88c 	bl	8000574 <_write>
 800445c:	1c43      	adds	r3, r0, #1
 800445e:	d102      	bne.n	8004466 <_write_r+0x1e>
 8004460:	682b      	ldr	r3, [r5, #0]
 8004462:	b103      	cbz	r3, 8004466 <_write_r+0x1e>
 8004464:	6023      	str	r3, [r4, #0]
 8004466:	bd38      	pop	{r3, r4, r5, pc}
 8004468:	20000144 	.word	0x20000144

0800446c <__swsetup_r>:
 800446c:	4b32      	ldr	r3, [pc, #200]	; (8004538 <__swsetup_r+0xcc>)
 800446e:	b570      	push	{r4, r5, r6, lr}
 8004470:	681d      	ldr	r5, [r3, #0]
 8004472:	4606      	mov	r6, r0
 8004474:	460c      	mov	r4, r1
 8004476:	b125      	cbz	r5, 8004482 <__swsetup_r+0x16>
 8004478:	69ab      	ldr	r3, [r5, #24]
 800447a:	b913      	cbnz	r3, 8004482 <__swsetup_r+0x16>
 800447c:	4628      	mov	r0, r5
 800447e:	f7ff fb1b 	bl	8003ab8 <__sinit>
 8004482:	4b2e      	ldr	r3, [pc, #184]	; (800453c <__swsetup_r+0xd0>)
 8004484:	429c      	cmp	r4, r3
 8004486:	d10f      	bne.n	80044a8 <__swsetup_r+0x3c>
 8004488:	686c      	ldr	r4, [r5, #4]
 800448a:	89a3      	ldrh	r3, [r4, #12]
 800448c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004490:	0719      	lsls	r1, r3, #28
 8004492:	d42c      	bmi.n	80044ee <__swsetup_r+0x82>
 8004494:	06dd      	lsls	r5, r3, #27
 8004496:	d411      	bmi.n	80044bc <__swsetup_r+0x50>
 8004498:	2309      	movs	r3, #9
 800449a:	6033      	str	r3, [r6, #0]
 800449c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80044a0:	81a3      	strh	r3, [r4, #12]
 80044a2:	f04f 30ff 	mov.w	r0, #4294967295
 80044a6:	e03e      	b.n	8004526 <__swsetup_r+0xba>
 80044a8:	4b25      	ldr	r3, [pc, #148]	; (8004540 <__swsetup_r+0xd4>)
 80044aa:	429c      	cmp	r4, r3
 80044ac:	d101      	bne.n	80044b2 <__swsetup_r+0x46>
 80044ae:	68ac      	ldr	r4, [r5, #8]
 80044b0:	e7eb      	b.n	800448a <__swsetup_r+0x1e>
 80044b2:	4b24      	ldr	r3, [pc, #144]	; (8004544 <__swsetup_r+0xd8>)
 80044b4:	429c      	cmp	r4, r3
 80044b6:	bf08      	it	eq
 80044b8:	68ec      	ldreq	r4, [r5, #12]
 80044ba:	e7e6      	b.n	800448a <__swsetup_r+0x1e>
 80044bc:	0758      	lsls	r0, r3, #29
 80044be:	d512      	bpl.n	80044e6 <__swsetup_r+0x7a>
 80044c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044c2:	b141      	cbz	r1, 80044d6 <__swsetup_r+0x6a>
 80044c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044c8:	4299      	cmp	r1, r3
 80044ca:	d002      	beq.n	80044d2 <__swsetup_r+0x66>
 80044cc:	4630      	mov	r0, r6
 80044ce:	f000 f991 	bl	80047f4 <_free_r>
 80044d2:	2300      	movs	r3, #0
 80044d4:	6363      	str	r3, [r4, #52]	; 0x34
 80044d6:	89a3      	ldrh	r3, [r4, #12]
 80044d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80044dc:	81a3      	strh	r3, [r4, #12]
 80044de:	2300      	movs	r3, #0
 80044e0:	6063      	str	r3, [r4, #4]
 80044e2:	6923      	ldr	r3, [r4, #16]
 80044e4:	6023      	str	r3, [r4, #0]
 80044e6:	89a3      	ldrh	r3, [r4, #12]
 80044e8:	f043 0308 	orr.w	r3, r3, #8
 80044ec:	81a3      	strh	r3, [r4, #12]
 80044ee:	6923      	ldr	r3, [r4, #16]
 80044f0:	b94b      	cbnz	r3, 8004506 <__swsetup_r+0x9a>
 80044f2:	89a3      	ldrh	r3, [r4, #12]
 80044f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80044f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044fc:	d003      	beq.n	8004506 <__swsetup_r+0x9a>
 80044fe:	4621      	mov	r1, r4
 8004500:	4630      	mov	r0, r6
 8004502:	f000 f92b 	bl	800475c <__smakebuf_r>
 8004506:	89a0      	ldrh	r0, [r4, #12]
 8004508:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800450c:	f010 0301 	ands.w	r3, r0, #1
 8004510:	d00a      	beq.n	8004528 <__swsetup_r+0xbc>
 8004512:	2300      	movs	r3, #0
 8004514:	60a3      	str	r3, [r4, #8]
 8004516:	6963      	ldr	r3, [r4, #20]
 8004518:	425b      	negs	r3, r3
 800451a:	61a3      	str	r3, [r4, #24]
 800451c:	6923      	ldr	r3, [r4, #16]
 800451e:	b943      	cbnz	r3, 8004532 <__swsetup_r+0xc6>
 8004520:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004524:	d1ba      	bne.n	800449c <__swsetup_r+0x30>
 8004526:	bd70      	pop	{r4, r5, r6, pc}
 8004528:	0781      	lsls	r1, r0, #30
 800452a:	bf58      	it	pl
 800452c:	6963      	ldrpl	r3, [r4, #20]
 800452e:	60a3      	str	r3, [r4, #8]
 8004530:	e7f4      	b.n	800451c <__swsetup_r+0xb0>
 8004532:	2000      	movs	r0, #0
 8004534:	e7f7      	b.n	8004526 <__swsetup_r+0xba>
 8004536:	bf00      	nop
 8004538:	2000000c 	.word	0x2000000c
 800453c:	08004984 	.word	0x08004984
 8004540:	080049a4 	.word	0x080049a4
 8004544:	08004964 	.word	0x08004964

08004548 <_close_r>:
 8004548:	b538      	push	{r3, r4, r5, lr}
 800454a:	4d06      	ldr	r5, [pc, #24]	; (8004564 <_close_r+0x1c>)
 800454c:	2300      	movs	r3, #0
 800454e:	4604      	mov	r4, r0
 8004550:	4608      	mov	r0, r1
 8004552:	602b      	str	r3, [r5, #0]
 8004554:	f7fc fb29 	bl	8000baa <_close>
 8004558:	1c43      	adds	r3, r0, #1
 800455a:	d102      	bne.n	8004562 <_close_r+0x1a>
 800455c:	682b      	ldr	r3, [r5, #0]
 800455e:	b103      	cbz	r3, 8004562 <_close_r+0x1a>
 8004560:	6023      	str	r3, [r4, #0]
 8004562:	bd38      	pop	{r3, r4, r5, pc}
 8004564:	20000144 	.word	0x20000144

08004568 <__sflush_r>:
 8004568:	898a      	ldrh	r2, [r1, #12]
 800456a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800456e:	4605      	mov	r5, r0
 8004570:	0710      	lsls	r0, r2, #28
 8004572:	460c      	mov	r4, r1
 8004574:	d458      	bmi.n	8004628 <__sflush_r+0xc0>
 8004576:	684b      	ldr	r3, [r1, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	dc05      	bgt.n	8004588 <__sflush_r+0x20>
 800457c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800457e:	2b00      	cmp	r3, #0
 8004580:	dc02      	bgt.n	8004588 <__sflush_r+0x20>
 8004582:	2000      	movs	r0, #0
 8004584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004588:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800458a:	2e00      	cmp	r6, #0
 800458c:	d0f9      	beq.n	8004582 <__sflush_r+0x1a>
 800458e:	2300      	movs	r3, #0
 8004590:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004594:	682f      	ldr	r7, [r5, #0]
 8004596:	602b      	str	r3, [r5, #0]
 8004598:	d032      	beq.n	8004600 <__sflush_r+0x98>
 800459a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800459c:	89a3      	ldrh	r3, [r4, #12]
 800459e:	075a      	lsls	r2, r3, #29
 80045a0:	d505      	bpl.n	80045ae <__sflush_r+0x46>
 80045a2:	6863      	ldr	r3, [r4, #4]
 80045a4:	1ac0      	subs	r0, r0, r3
 80045a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80045a8:	b10b      	cbz	r3, 80045ae <__sflush_r+0x46>
 80045aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045ac:	1ac0      	subs	r0, r0, r3
 80045ae:	2300      	movs	r3, #0
 80045b0:	4602      	mov	r2, r0
 80045b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045b4:	6a21      	ldr	r1, [r4, #32]
 80045b6:	4628      	mov	r0, r5
 80045b8:	47b0      	blx	r6
 80045ba:	1c43      	adds	r3, r0, #1
 80045bc:	89a3      	ldrh	r3, [r4, #12]
 80045be:	d106      	bne.n	80045ce <__sflush_r+0x66>
 80045c0:	6829      	ldr	r1, [r5, #0]
 80045c2:	291d      	cmp	r1, #29
 80045c4:	d82c      	bhi.n	8004620 <__sflush_r+0xb8>
 80045c6:	4a2a      	ldr	r2, [pc, #168]	; (8004670 <__sflush_r+0x108>)
 80045c8:	40ca      	lsrs	r2, r1
 80045ca:	07d6      	lsls	r6, r2, #31
 80045cc:	d528      	bpl.n	8004620 <__sflush_r+0xb8>
 80045ce:	2200      	movs	r2, #0
 80045d0:	6062      	str	r2, [r4, #4]
 80045d2:	04d9      	lsls	r1, r3, #19
 80045d4:	6922      	ldr	r2, [r4, #16]
 80045d6:	6022      	str	r2, [r4, #0]
 80045d8:	d504      	bpl.n	80045e4 <__sflush_r+0x7c>
 80045da:	1c42      	adds	r2, r0, #1
 80045dc:	d101      	bne.n	80045e2 <__sflush_r+0x7a>
 80045de:	682b      	ldr	r3, [r5, #0]
 80045e0:	b903      	cbnz	r3, 80045e4 <__sflush_r+0x7c>
 80045e2:	6560      	str	r0, [r4, #84]	; 0x54
 80045e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045e6:	602f      	str	r7, [r5, #0]
 80045e8:	2900      	cmp	r1, #0
 80045ea:	d0ca      	beq.n	8004582 <__sflush_r+0x1a>
 80045ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045f0:	4299      	cmp	r1, r3
 80045f2:	d002      	beq.n	80045fa <__sflush_r+0x92>
 80045f4:	4628      	mov	r0, r5
 80045f6:	f000 f8fd 	bl	80047f4 <_free_r>
 80045fa:	2000      	movs	r0, #0
 80045fc:	6360      	str	r0, [r4, #52]	; 0x34
 80045fe:	e7c1      	b.n	8004584 <__sflush_r+0x1c>
 8004600:	6a21      	ldr	r1, [r4, #32]
 8004602:	2301      	movs	r3, #1
 8004604:	4628      	mov	r0, r5
 8004606:	47b0      	blx	r6
 8004608:	1c41      	adds	r1, r0, #1
 800460a:	d1c7      	bne.n	800459c <__sflush_r+0x34>
 800460c:	682b      	ldr	r3, [r5, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0c4      	beq.n	800459c <__sflush_r+0x34>
 8004612:	2b1d      	cmp	r3, #29
 8004614:	d001      	beq.n	800461a <__sflush_r+0xb2>
 8004616:	2b16      	cmp	r3, #22
 8004618:	d101      	bne.n	800461e <__sflush_r+0xb6>
 800461a:	602f      	str	r7, [r5, #0]
 800461c:	e7b1      	b.n	8004582 <__sflush_r+0x1a>
 800461e:	89a3      	ldrh	r3, [r4, #12]
 8004620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004624:	81a3      	strh	r3, [r4, #12]
 8004626:	e7ad      	b.n	8004584 <__sflush_r+0x1c>
 8004628:	690f      	ldr	r7, [r1, #16]
 800462a:	2f00      	cmp	r7, #0
 800462c:	d0a9      	beq.n	8004582 <__sflush_r+0x1a>
 800462e:	0793      	lsls	r3, r2, #30
 8004630:	680e      	ldr	r6, [r1, #0]
 8004632:	bf08      	it	eq
 8004634:	694b      	ldreq	r3, [r1, #20]
 8004636:	600f      	str	r7, [r1, #0]
 8004638:	bf18      	it	ne
 800463a:	2300      	movne	r3, #0
 800463c:	eba6 0807 	sub.w	r8, r6, r7
 8004640:	608b      	str	r3, [r1, #8]
 8004642:	f1b8 0f00 	cmp.w	r8, #0
 8004646:	dd9c      	ble.n	8004582 <__sflush_r+0x1a>
 8004648:	6a21      	ldr	r1, [r4, #32]
 800464a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800464c:	4643      	mov	r3, r8
 800464e:	463a      	mov	r2, r7
 8004650:	4628      	mov	r0, r5
 8004652:	47b0      	blx	r6
 8004654:	2800      	cmp	r0, #0
 8004656:	dc06      	bgt.n	8004666 <__sflush_r+0xfe>
 8004658:	89a3      	ldrh	r3, [r4, #12]
 800465a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800465e:	81a3      	strh	r3, [r4, #12]
 8004660:	f04f 30ff 	mov.w	r0, #4294967295
 8004664:	e78e      	b.n	8004584 <__sflush_r+0x1c>
 8004666:	4407      	add	r7, r0
 8004668:	eba8 0800 	sub.w	r8, r8, r0
 800466c:	e7e9      	b.n	8004642 <__sflush_r+0xda>
 800466e:	bf00      	nop
 8004670:	20400001 	.word	0x20400001

08004674 <_fflush_r>:
 8004674:	b538      	push	{r3, r4, r5, lr}
 8004676:	690b      	ldr	r3, [r1, #16]
 8004678:	4605      	mov	r5, r0
 800467a:	460c      	mov	r4, r1
 800467c:	b913      	cbnz	r3, 8004684 <_fflush_r+0x10>
 800467e:	2500      	movs	r5, #0
 8004680:	4628      	mov	r0, r5
 8004682:	bd38      	pop	{r3, r4, r5, pc}
 8004684:	b118      	cbz	r0, 800468e <_fflush_r+0x1a>
 8004686:	6983      	ldr	r3, [r0, #24]
 8004688:	b90b      	cbnz	r3, 800468e <_fflush_r+0x1a>
 800468a:	f7ff fa15 	bl	8003ab8 <__sinit>
 800468e:	4b14      	ldr	r3, [pc, #80]	; (80046e0 <_fflush_r+0x6c>)
 8004690:	429c      	cmp	r4, r3
 8004692:	d11b      	bne.n	80046cc <_fflush_r+0x58>
 8004694:	686c      	ldr	r4, [r5, #4]
 8004696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d0ef      	beq.n	800467e <_fflush_r+0xa>
 800469e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80046a0:	07d0      	lsls	r0, r2, #31
 80046a2:	d404      	bmi.n	80046ae <_fflush_r+0x3a>
 80046a4:	0599      	lsls	r1, r3, #22
 80046a6:	d402      	bmi.n	80046ae <_fflush_r+0x3a>
 80046a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046aa:	f7ff faa3 	bl	8003bf4 <__retarget_lock_acquire_recursive>
 80046ae:	4628      	mov	r0, r5
 80046b0:	4621      	mov	r1, r4
 80046b2:	f7ff ff59 	bl	8004568 <__sflush_r>
 80046b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046b8:	07da      	lsls	r2, r3, #31
 80046ba:	4605      	mov	r5, r0
 80046bc:	d4e0      	bmi.n	8004680 <_fflush_r+0xc>
 80046be:	89a3      	ldrh	r3, [r4, #12]
 80046c0:	059b      	lsls	r3, r3, #22
 80046c2:	d4dd      	bmi.n	8004680 <_fflush_r+0xc>
 80046c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046c6:	f7ff fa96 	bl	8003bf6 <__retarget_lock_release_recursive>
 80046ca:	e7d9      	b.n	8004680 <_fflush_r+0xc>
 80046cc:	4b05      	ldr	r3, [pc, #20]	; (80046e4 <_fflush_r+0x70>)
 80046ce:	429c      	cmp	r4, r3
 80046d0:	d101      	bne.n	80046d6 <_fflush_r+0x62>
 80046d2:	68ac      	ldr	r4, [r5, #8]
 80046d4:	e7df      	b.n	8004696 <_fflush_r+0x22>
 80046d6:	4b04      	ldr	r3, [pc, #16]	; (80046e8 <_fflush_r+0x74>)
 80046d8:	429c      	cmp	r4, r3
 80046da:	bf08      	it	eq
 80046dc:	68ec      	ldreq	r4, [r5, #12]
 80046de:	e7da      	b.n	8004696 <_fflush_r+0x22>
 80046e0:	08004984 	.word	0x08004984
 80046e4:	080049a4 	.word	0x080049a4
 80046e8:	08004964 	.word	0x08004964

080046ec <_lseek_r>:
 80046ec:	b538      	push	{r3, r4, r5, lr}
 80046ee:	4d07      	ldr	r5, [pc, #28]	; (800470c <_lseek_r+0x20>)
 80046f0:	4604      	mov	r4, r0
 80046f2:	4608      	mov	r0, r1
 80046f4:	4611      	mov	r1, r2
 80046f6:	2200      	movs	r2, #0
 80046f8:	602a      	str	r2, [r5, #0]
 80046fa:	461a      	mov	r2, r3
 80046fc:	f7fc fa7c 	bl	8000bf8 <_lseek>
 8004700:	1c43      	adds	r3, r0, #1
 8004702:	d102      	bne.n	800470a <_lseek_r+0x1e>
 8004704:	682b      	ldr	r3, [r5, #0]
 8004706:	b103      	cbz	r3, 800470a <_lseek_r+0x1e>
 8004708:	6023      	str	r3, [r4, #0]
 800470a:	bd38      	pop	{r3, r4, r5, pc}
 800470c:	20000144 	.word	0x20000144

08004710 <__swhatbuf_r>:
 8004710:	b570      	push	{r4, r5, r6, lr}
 8004712:	460e      	mov	r6, r1
 8004714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004718:	2900      	cmp	r1, #0
 800471a:	b096      	sub	sp, #88	; 0x58
 800471c:	4614      	mov	r4, r2
 800471e:	461d      	mov	r5, r3
 8004720:	da08      	bge.n	8004734 <__swhatbuf_r+0x24>
 8004722:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	602a      	str	r2, [r5, #0]
 800472a:	061a      	lsls	r2, r3, #24
 800472c:	d410      	bmi.n	8004750 <__swhatbuf_r+0x40>
 800472e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004732:	e00e      	b.n	8004752 <__swhatbuf_r+0x42>
 8004734:	466a      	mov	r2, sp
 8004736:	f000 f8bb 	bl	80048b0 <_fstat_r>
 800473a:	2800      	cmp	r0, #0
 800473c:	dbf1      	blt.n	8004722 <__swhatbuf_r+0x12>
 800473e:	9a01      	ldr	r2, [sp, #4]
 8004740:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004744:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004748:	425a      	negs	r2, r3
 800474a:	415a      	adcs	r2, r3
 800474c:	602a      	str	r2, [r5, #0]
 800474e:	e7ee      	b.n	800472e <__swhatbuf_r+0x1e>
 8004750:	2340      	movs	r3, #64	; 0x40
 8004752:	2000      	movs	r0, #0
 8004754:	6023      	str	r3, [r4, #0]
 8004756:	b016      	add	sp, #88	; 0x58
 8004758:	bd70      	pop	{r4, r5, r6, pc}
	...

0800475c <__smakebuf_r>:
 800475c:	898b      	ldrh	r3, [r1, #12]
 800475e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004760:	079d      	lsls	r5, r3, #30
 8004762:	4606      	mov	r6, r0
 8004764:	460c      	mov	r4, r1
 8004766:	d507      	bpl.n	8004778 <__smakebuf_r+0x1c>
 8004768:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800476c:	6023      	str	r3, [r4, #0]
 800476e:	6123      	str	r3, [r4, #16]
 8004770:	2301      	movs	r3, #1
 8004772:	6163      	str	r3, [r4, #20]
 8004774:	b002      	add	sp, #8
 8004776:	bd70      	pop	{r4, r5, r6, pc}
 8004778:	ab01      	add	r3, sp, #4
 800477a:	466a      	mov	r2, sp
 800477c:	f7ff ffc8 	bl	8004710 <__swhatbuf_r>
 8004780:	9900      	ldr	r1, [sp, #0]
 8004782:	4605      	mov	r5, r0
 8004784:	4630      	mov	r0, r6
 8004786:	f7ff fa57 	bl	8003c38 <_malloc_r>
 800478a:	b948      	cbnz	r0, 80047a0 <__smakebuf_r+0x44>
 800478c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004790:	059a      	lsls	r2, r3, #22
 8004792:	d4ef      	bmi.n	8004774 <__smakebuf_r+0x18>
 8004794:	f023 0303 	bic.w	r3, r3, #3
 8004798:	f043 0302 	orr.w	r3, r3, #2
 800479c:	81a3      	strh	r3, [r4, #12]
 800479e:	e7e3      	b.n	8004768 <__smakebuf_r+0xc>
 80047a0:	4b0d      	ldr	r3, [pc, #52]	; (80047d8 <__smakebuf_r+0x7c>)
 80047a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80047a4:	89a3      	ldrh	r3, [r4, #12]
 80047a6:	6020      	str	r0, [r4, #0]
 80047a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ac:	81a3      	strh	r3, [r4, #12]
 80047ae:	9b00      	ldr	r3, [sp, #0]
 80047b0:	6163      	str	r3, [r4, #20]
 80047b2:	9b01      	ldr	r3, [sp, #4]
 80047b4:	6120      	str	r0, [r4, #16]
 80047b6:	b15b      	cbz	r3, 80047d0 <__smakebuf_r+0x74>
 80047b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047bc:	4630      	mov	r0, r6
 80047be:	f000 f889 	bl	80048d4 <_isatty_r>
 80047c2:	b128      	cbz	r0, 80047d0 <__smakebuf_r+0x74>
 80047c4:	89a3      	ldrh	r3, [r4, #12]
 80047c6:	f023 0303 	bic.w	r3, r3, #3
 80047ca:	f043 0301 	orr.w	r3, r3, #1
 80047ce:	81a3      	strh	r3, [r4, #12]
 80047d0:	89a0      	ldrh	r0, [r4, #12]
 80047d2:	4305      	orrs	r5, r0
 80047d4:	81a5      	strh	r5, [r4, #12]
 80047d6:	e7cd      	b.n	8004774 <__smakebuf_r+0x18>
 80047d8:	08003a51 	.word	0x08003a51

080047dc <__malloc_lock>:
 80047dc:	4801      	ldr	r0, [pc, #4]	; (80047e4 <__malloc_lock+0x8>)
 80047de:	f7ff ba09 	b.w	8003bf4 <__retarget_lock_acquire_recursive>
 80047e2:	bf00      	nop
 80047e4:	20000138 	.word	0x20000138

080047e8 <__malloc_unlock>:
 80047e8:	4801      	ldr	r0, [pc, #4]	; (80047f0 <__malloc_unlock+0x8>)
 80047ea:	f7ff ba04 	b.w	8003bf6 <__retarget_lock_release_recursive>
 80047ee:	bf00      	nop
 80047f0:	20000138 	.word	0x20000138

080047f4 <_free_r>:
 80047f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80047f6:	2900      	cmp	r1, #0
 80047f8:	d044      	beq.n	8004884 <_free_r+0x90>
 80047fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047fe:	9001      	str	r0, [sp, #4]
 8004800:	2b00      	cmp	r3, #0
 8004802:	f1a1 0404 	sub.w	r4, r1, #4
 8004806:	bfb8      	it	lt
 8004808:	18e4      	addlt	r4, r4, r3
 800480a:	f7ff ffe7 	bl	80047dc <__malloc_lock>
 800480e:	4a1e      	ldr	r2, [pc, #120]	; (8004888 <_free_r+0x94>)
 8004810:	9801      	ldr	r0, [sp, #4]
 8004812:	6813      	ldr	r3, [r2, #0]
 8004814:	b933      	cbnz	r3, 8004824 <_free_r+0x30>
 8004816:	6063      	str	r3, [r4, #4]
 8004818:	6014      	str	r4, [r2, #0]
 800481a:	b003      	add	sp, #12
 800481c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004820:	f7ff bfe2 	b.w	80047e8 <__malloc_unlock>
 8004824:	42a3      	cmp	r3, r4
 8004826:	d908      	bls.n	800483a <_free_r+0x46>
 8004828:	6825      	ldr	r5, [r4, #0]
 800482a:	1961      	adds	r1, r4, r5
 800482c:	428b      	cmp	r3, r1
 800482e:	bf01      	itttt	eq
 8004830:	6819      	ldreq	r1, [r3, #0]
 8004832:	685b      	ldreq	r3, [r3, #4]
 8004834:	1949      	addeq	r1, r1, r5
 8004836:	6021      	streq	r1, [r4, #0]
 8004838:	e7ed      	b.n	8004816 <_free_r+0x22>
 800483a:	461a      	mov	r2, r3
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	b10b      	cbz	r3, 8004844 <_free_r+0x50>
 8004840:	42a3      	cmp	r3, r4
 8004842:	d9fa      	bls.n	800483a <_free_r+0x46>
 8004844:	6811      	ldr	r1, [r2, #0]
 8004846:	1855      	adds	r5, r2, r1
 8004848:	42a5      	cmp	r5, r4
 800484a:	d10b      	bne.n	8004864 <_free_r+0x70>
 800484c:	6824      	ldr	r4, [r4, #0]
 800484e:	4421      	add	r1, r4
 8004850:	1854      	adds	r4, r2, r1
 8004852:	42a3      	cmp	r3, r4
 8004854:	6011      	str	r1, [r2, #0]
 8004856:	d1e0      	bne.n	800481a <_free_r+0x26>
 8004858:	681c      	ldr	r4, [r3, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	6053      	str	r3, [r2, #4]
 800485e:	4421      	add	r1, r4
 8004860:	6011      	str	r1, [r2, #0]
 8004862:	e7da      	b.n	800481a <_free_r+0x26>
 8004864:	d902      	bls.n	800486c <_free_r+0x78>
 8004866:	230c      	movs	r3, #12
 8004868:	6003      	str	r3, [r0, #0]
 800486a:	e7d6      	b.n	800481a <_free_r+0x26>
 800486c:	6825      	ldr	r5, [r4, #0]
 800486e:	1961      	adds	r1, r4, r5
 8004870:	428b      	cmp	r3, r1
 8004872:	bf04      	itt	eq
 8004874:	6819      	ldreq	r1, [r3, #0]
 8004876:	685b      	ldreq	r3, [r3, #4]
 8004878:	6063      	str	r3, [r4, #4]
 800487a:	bf04      	itt	eq
 800487c:	1949      	addeq	r1, r1, r5
 800487e:	6021      	streq	r1, [r4, #0]
 8004880:	6054      	str	r4, [r2, #4]
 8004882:	e7ca      	b.n	800481a <_free_r+0x26>
 8004884:	b003      	add	sp, #12
 8004886:	bd30      	pop	{r4, r5, pc}
 8004888:	2000013c 	.word	0x2000013c

0800488c <_read_r>:
 800488c:	b538      	push	{r3, r4, r5, lr}
 800488e:	4d07      	ldr	r5, [pc, #28]	; (80048ac <_read_r+0x20>)
 8004890:	4604      	mov	r4, r0
 8004892:	4608      	mov	r0, r1
 8004894:	4611      	mov	r1, r2
 8004896:	2200      	movs	r2, #0
 8004898:	602a      	str	r2, [r5, #0]
 800489a:	461a      	mov	r2, r3
 800489c:	f7fc f968 	bl	8000b70 <_read>
 80048a0:	1c43      	adds	r3, r0, #1
 80048a2:	d102      	bne.n	80048aa <_read_r+0x1e>
 80048a4:	682b      	ldr	r3, [r5, #0]
 80048a6:	b103      	cbz	r3, 80048aa <_read_r+0x1e>
 80048a8:	6023      	str	r3, [r4, #0]
 80048aa:	bd38      	pop	{r3, r4, r5, pc}
 80048ac:	20000144 	.word	0x20000144

080048b0 <_fstat_r>:
 80048b0:	b538      	push	{r3, r4, r5, lr}
 80048b2:	4d07      	ldr	r5, [pc, #28]	; (80048d0 <_fstat_r+0x20>)
 80048b4:	2300      	movs	r3, #0
 80048b6:	4604      	mov	r4, r0
 80048b8:	4608      	mov	r0, r1
 80048ba:	4611      	mov	r1, r2
 80048bc:	602b      	str	r3, [r5, #0]
 80048be:	f7fc f980 	bl	8000bc2 <_fstat>
 80048c2:	1c43      	adds	r3, r0, #1
 80048c4:	d102      	bne.n	80048cc <_fstat_r+0x1c>
 80048c6:	682b      	ldr	r3, [r5, #0]
 80048c8:	b103      	cbz	r3, 80048cc <_fstat_r+0x1c>
 80048ca:	6023      	str	r3, [r4, #0]
 80048cc:	bd38      	pop	{r3, r4, r5, pc}
 80048ce:	bf00      	nop
 80048d0:	20000144 	.word	0x20000144

080048d4 <_isatty_r>:
 80048d4:	b538      	push	{r3, r4, r5, lr}
 80048d6:	4d06      	ldr	r5, [pc, #24]	; (80048f0 <_isatty_r+0x1c>)
 80048d8:	2300      	movs	r3, #0
 80048da:	4604      	mov	r4, r0
 80048dc:	4608      	mov	r0, r1
 80048de:	602b      	str	r3, [r5, #0]
 80048e0:	f7fc f97f 	bl	8000be2 <_isatty>
 80048e4:	1c43      	adds	r3, r0, #1
 80048e6:	d102      	bne.n	80048ee <_isatty_r+0x1a>
 80048e8:	682b      	ldr	r3, [r5, #0]
 80048ea:	b103      	cbz	r3, 80048ee <_isatty_r+0x1a>
 80048ec:	6023      	str	r3, [r4, #0]
 80048ee:	bd38      	pop	{r3, r4, r5, pc}
 80048f0:	20000144 	.word	0x20000144

080048f4 <_init>:
 80048f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048f6:	bf00      	nop
 80048f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048fa:	bc08      	pop	{r3}
 80048fc:	469e      	mov	lr, r3
 80048fe:	4770      	bx	lr

08004900 <_fini>:
 8004900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004902:	bf00      	nop
 8004904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004906:	bc08      	pop	{r3}
 8004908:	469e      	mov	lr, r3
 800490a:	4770      	bx	lr
